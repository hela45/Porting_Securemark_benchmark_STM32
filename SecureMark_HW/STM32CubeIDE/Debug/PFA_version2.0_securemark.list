
PFA_version2.0_securemark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bea4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c0f0  0800c0f0  0000d0f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c208  0800c208  0000e0b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c208  0800c208  0000d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c210  0800c210  0000e0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c210  0800c210  0000d210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c214  0800c214  0000d214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  0800c218  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200000b8  0800c2d0  0000e0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  0800c2d0  0000e5c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b81e  00000000  00000000  0000e0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d57  00000000  00000000  0002990c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0002d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f98  00000000  00000000  0002eab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006274  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d32  00000000  00000000  00035cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014004f  00000000  00000000  000569f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00196a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a48  00000000  00000000  00196a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  0019c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	200000b8 	.word	0x200000b8
 8000268:	00000000 	.word	0x00000000
 800026c:	0800c0d8 	.word	0x0800c0d8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	200000bc 	.word	0x200000bc
 8000288:	0800c0d8 	.word	0x0800c0d8

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b9b0 	b.w	8000614 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	4688      	mov	r8, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	468e      	mov	lr, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14a      	bne.n	8000372 <__udivmoddi4+0xa6>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4617      	mov	r7, r2
 80002e0:	d95f      	bls.n	80003a2 <__udivmoddi4+0xd6>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	b14e      	cbz	r6, 80002fc <__udivmoddi4+0x30>
 80002e8:	f1c6 0320 	rsb	r3, r6, #32
 80002ec:	fa01 fe06 	lsl.w	lr, r1, r6
 80002f0:	40b7      	lsls	r7, r6
 80002f2:	40b4      	lsls	r4, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	ea43 0e0e 	orr.w	lr, r3, lr
 80002fc:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	0c23      	lsrs	r3, r4, #16
 8000306:	fbbe f1f8 	udiv	r1, lr, r8
 800030a:	fb08 ee11 	mls	lr, r8, r1, lr
 800030e:	fb01 f20c 	mul.w	r2, r1, ip
 8000312:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000316:	429a      	cmp	r2, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x5e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	429a      	cmp	r2, r3
 8000324:	f200 8154 	bhi.w	80005d0 <__udivmoddi4+0x304>
 8000328:	4601      	mov	r1, r0
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	b2a2      	uxth	r2, r4
 800032e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000332:	fb08 3310 	mls	r3, r8, r0, r3
 8000336:	fb00 fc0c 	mul.w	ip, r0, ip
 800033a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800033e:	4594      	cmp	ip, r2
 8000340:	d90b      	bls.n	800035a <__udivmoddi4+0x8e>
 8000342:	18ba      	adds	r2, r7, r2
 8000344:	f100 33ff 	add.w	r3, r0, #4294967295
 8000348:	bf2c      	ite	cs
 800034a:	2401      	movcs	r4, #1
 800034c:	2400      	movcc	r4, #0
 800034e:	4594      	cmp	ip, r2
 8000350:	d902      	bls.n	8000358 <__udivmoddi4+0x8c>
 8000352:	2c00      	cmp	r4, #0
 8000354:	f000 813f 	beq.w	80005d6 <__udivmoddi4+0x30a>
 8000358:	4618      	mov	r0, r3
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	eba2 020c 	sub.w	r2, r2, ip
 8000362:	2100      	movs	r1, #0
 8000364:	b11d      	cbz	r5, 800036e <__udivmoddi4+0xa2>
 8000366:	40f2      	lsrs	r2, r6
 8000368:	2300      	movs	r3, #0
 800036a:	e9c5 2300 	strd	r2, r3, [r5]
 800036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000372:	428b      	cmp	r3, r1
 8000374:	d905      	bls.n	8000382 <__udivmoddi4+0xb6>
 8000376:	b10d      	cbz	r5, 800037c <__udivmoddi4+0xb0>
 8000378:	e9c5 0100 	strd	r0, r1, [r5]
 800037c:	2100      	movs	r1, #0
 800037e:	4608      	mov	r0, r1
 8000380:	e7f5      	b.n	800036e <__udivmoddi4+0xa2>
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14e      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038a:	4543      	cmp	r3, r8
 800038c:	f0c0 8112 	bcc.w	80005b4 <__udivmoddi4+0x2e8>
 8000390:	4282      	cmp	r2, r0
 8000392:	f240 810f 	bls.w	80005b4 <__udivmoddi4+0x2e8>
 8000396:	4608      	mov	r0, r1
 8000398:	2d00      	cmp	r5, #0
 800039a:	d0e8      	beq.n	800036e <__udivmoddi4+0xa2>
 800039c:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a0:	e7e5      	b.n	800036e <__udivmoddi4+0xa2>
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	f000 80ac 	beq.w	8000500 <__udivmoddi4+0x234>
 80003a8:	fab2 f682 	clz	r6, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	f040 80bb 	bne.w	8000528 <__udivmoddi4+0x25c>
 80003b2:	1a8b      	subs	r3, r1, r2
 80003b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003b8:	b2bc      	uxth	r4, r7
 80003ba:	2101      	movs	r1, #1
 80003bc:	0c02      	lsrs	r2, r0, #16
 80003be:	b280      	uxth	r0, r0
 80003c0:	fbb3 fcfe 	udiv	ip, r3, lr
 80003c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003c8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003cc:	fb04 f20c 	mul.w	r2, r4, ip
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d90e      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	429a      	cmp	r2, r3
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80ec 	beq.w	80005c8 <__udivmoddi4+0x2fc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f8fe 	udiv	r8, r3, lr
 80003f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80003fc:	fb04 f408 	mul.w	r4, r4, r8
 8000400:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000404:	4294      	cmp	r4, r2
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x154>
 8000408:	18ba      	adds	r2, r7, r2
 800040a:	f108 33ff 	add.w	r3, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	2001      	movcs	r0, #1
 8000412:	2000      	movcc	r0, #0
 8000414:	4294      	cmp	r4, r2
 8000416:	d902      	bls.n	800041e <__udivmoddi4+0x152>
 8000418:	2800      	cmp	r0, #0
 800041a:	f000 80d1 	beq.w	80005c0 <__udivmoddi4+0x2f4>
 800041e:	4698      	mov	r8, r3
 8000420:	1b12      	subs	r2, r2, r4
 8000422:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa08 f401 	lsl.w	r4, r8, r1
 8000432:	fa00 f901 	lsl.w	r9, r0, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	fa28 f806 	lsr.w	r8, r8, r6
 800043e:	408a      	lsls	r2, r1
 8000440:	431f      	orrs	r7, r3
 8000442:	fa20 f306 	lsr.w	r3, r0, r6
 8000446:	0c38      	lsrs	r0, r7, #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa1f fc87 	uxth.w	ip, r7
 800044e:	0c1c      	lsrs	r4, r3, #16
 8000450:	fbb8 fef0 	udiv	lr, r8, r0
 8000454:	fb00 881e 	mls	r8, r0, lr, r8
 8000458:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800045c:	fb0e f80c 	mul.w	r8, lr, ip
 8000460:	45a0      	cmp	r8, r4
 8000462:	d90e      	bls.n	8000482 <__udivmoddi4+0x1b6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	bf2c      	ite	cs
 800046c:	f04f 0b01 	movcs.w	fp, #1
 8000470:	f04f 0b00 	movcc.w	fp, #0
 8000474:	45a0      	cmp	r8, r4
 8000476:	d903      	bls.n	8000480 <__udivmoddi4+0x1b4>
 8000478:	f1bb 0f00 	cmp.w	fp, #0
 800047c:	f000 80b8 	beq.w	80005f0 <__udivmoddi4+0x324>
 8000480:	46d6      	mov	lr, sl
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fa1f f883 	uxth.w	r8, r3
 800048a:	fbb4 f3f0 	udiv	r3, r4, r0
 800048e:	fb00 4413 	mls	r4, r0, r3, r4
 8000492:	fb03 fc0c 	mul.w	ip, r3, ip
 8000496:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800049a:	45a4      	cmp	ip, r4
 800049c:	d90e      	bls.n	80004bc <__udivmoddi4+0x1f0>
 800049e:	193c      	adds	r4, r7, r4
 80004a0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a4:	bf2c      	ite	cs
 80004a6:	f04f 0801 	movcs.w	r8, #1
 80004aa:	f04f 0800 	movcc.w	r8, #0
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d903      	bls.n	80004ba <__udivmoddi4+0x1ee>
 80004b2:	f1b8 0f00 	cmp.w	r8, #0
 80004b6:	f000 809f 	beq.w	80005f8 <__udivmoddi4+0x32c>
 80004ba:	4603      	mov	r3, r0
 80004bc:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c0:	eba4 040c 	sub.w	r4, r4, ip
 80004c4:	fba0 ec02 	umull	lr, ip, r0, r2
 80004c8:	4564      	cmp	r4, ip
 80004ca:	4673      	mov	r3, lr
 80004cc:	46e0      	mov	r8, ip
 80004ce:	d302      	bcc.n	80004d6 <__udivmoddi4+0x20a>
 80004d0:	d107      	bne.n	80004e2 <__udivmoddi4+0x216>
 80004d2:	45f1      	cmp	r9, lr
 80004d4:	d205      	bcs.n	80004e2 <__udivmoddi4+0x216>
 80004d6:	ebbe 0302 	subs.w	r3, lr, r2
 80004da:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004de:	3801      	subs	r0, #1
 80004e0:	46e0      	mov	r8, ip
 80004e2:	b15d      	cbz	r5, 80004fc <__udivmoddi4+0x230>
 80004e4:	ebb9 0203 	subs.w	r2, r9, r3
 80004e8:	eb64 0408 	sbc.w	r4, r4, r8
 80004ec:	fa04 f606 	lsl.w	r6, r4, r6
 80004f0:	fa22 f301 	lsr.w	r3, r2, r1
 80004f4:	40cc      	lsrs	r4, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	e9c5 6400 	strd	r6, r4, [r5]
 80004fc:	2100      	movs	r1, #0
 80004fe:	e736      	b.n	800036e <__udivmoddi4+0xa2>
 8000500:	fbb1 fcf2 	udiv	ip, r1, r2
 8000504:	0c01      	lsrs	r1, r0, #16
 8000506:	4614      	mov	r4, r2
 8000508:	b280      	uxth	r0, r0
 800050a:	4696      	mov	lr, r2
 800050c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000510:	2620      	movs	r6, #32
 8000512:	4690      	mov	r8, r2
 8000514:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000518:	4610      	mov	r0, r2
 800051a:	fbb1 f1f2 	udiv	r1, r1, r2
 800051e:	eba3 0308 	sub.w	r3, r3, r8
 8000522:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000526:	e74b      	b.n	80003c0 <__udivmoddi4+0xf4>
 8000528:	40b7      	lsls	r7, r6
 800052a:	f1c6 0320 	rsb	r3, r6, #32
 800052e:	fa01 f206 	lsl.w	r2, r1, r6
 8000532:	fa21 f803 	lsr.w	r8, r1, r3
 8000536:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800053a:	fa20 f303 	lsr.w	r3, r0, r3
 800053e:	b2bc      	uxth	r4, r7
 8000540:	40b0      	lsls	r0, r6
 8000542:	4313      	orrs	r3, r2
 8000544:	0c02      	lsrs	r2, r0, #16
 8000546:	0c19      	lsrs	r1, r3, #16
 8000548:	b280      	uxth	r0, r0
 800054a:	fbb8 f9fe 	udiv	r9, r8, lr
 800054e:	fb0e 8819 	mls	r8, lr, r9, r8
 8000552:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000556:	fb09 f804 	mul.w	r8, r9, r4
 800055a:	4588      	cmp	r8, r1
 800055c:	d951      	bls.n	8000602 <__udivmoddi4+0x336>
 800055e:	1879      	adds	r1, r7, r1
 8000560:	f109 3cff 	add.w	ip, r9, #4294967295
 8000564:	bf2c      	ite	cs
 8000566:	f04f 0a01 	movcs.w	sl, #1
 800056a:	f04f 0a00 	movcc.w	sl, #0
 800056e:	4588      	cmp	r8, r1
 8000570:	d902      	bls.n	8000578 <__udivmoddi4+0x2ac>
 8000572:	f1ba 0f00 	cmp.w	sl, #0
 8000576:	d031      	beq.n	80005dc <__udivmoddi4+0x310>
 8000578:	eba1 0108 	sub.w	r1, r1, r8
 800057c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000580:	fb09 f804 	mul.w	r8, r9, r4
 8000584:	fb0e 1119 	mls	r1, lr, r9, r1
 8000588:	b29b      	uxth	r3, r3
 800058a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058e:	4543      	cmp	r3, r8
 8000590:	d235      	bcs.n	80005fe <__udivmoddi4+0x332>
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	f109 31ff 	add.w	r1, r9, #4294967295
 8000598:	bf2c      	ite	cs
 800059a:	f04f 0a01 	movcs.w	sl, #1
 800059e:	f04f 0a00 	movcc.w	sl, #0
 80005a2:	4543      	cmp	r3, r8
 80005a4:	d2bb      	bcs.n	800051e <__udivmoddi4+0x252>
 80005a6:	f1ba 0f00 	cmp.w	sl, #0
 80005aa:	d1b8      	bne.n	800051e <__udivmoddi4+0x252>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e7b4      	b.n	800051e <__udivmoddi4+0x252>
 80005b4:	1a84      	subs	r4, r0, r2
 80005b6:	eb68 0203 	sbc.w	r2, r8, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	4696      	mov	lr, r2
 80005be:	e6eb      	b.n	8000398 <__udivmoddi4+0xcc>
 80005c0:	443a      	add	r2, r7
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	e72b      	b.n	8000420 <__udivmoddi4+0x154>
 80005c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80005cc:	443b      	add	r3, r7
 80005ce:	e710      	b.n	80003f2 <__udivmoddi4+0x126>
 80005d0:	3902      	subs	r1, #2
 80005d2:	443b      	add	r3, r7
 80005d4:	e6a9      	b.n	800032a <__udivmoddi4+0x5e>
 80005d6:	443a      	add	r2, r7
 80005d8:	3802      	subs	r0, #2
 80005da:	e6be      	b.n	800035a <__udivmoddi4+0x8e>
 80005dc:	eba7 0808 	sub.w	r8, r7, r8
 80005e0:	f1a9 0c02 	sub.w	ip, r9, #2
 80005e4:	4441      	add	r1, r8
 80005e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005ea:	fb09 f804 	mul.w	r8, r9, r4
 80005ee:	e7c9      	b.n	8000584 <__udivmoddi4+0x2b8>
 80005f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005f4:	443c      	add	r4, r7
 80005f6:	e744      	b.n	8000482 <__udivmoddi4+0x1b6>
 80005f8:	3b02      	subs	r3, #2
 80005fa:	443c      	add	r4, r7
 80005fc:	e75e      	b.n	80004bc <__udivmoddi4+0x1f0>
 80005fe:	4649      	mov	r1, r9
 8000600:	e78d      	b.n	800051e <__udivmoddi4+0x252>
 8000602:	eba1 0108 	sub.w	r1, r1, r8
 8000606:	46cc      	mov	ip, r9
 8000608:	fbb1 f9fe 	udiv	r9, r1, lr
 800060c:	fb09 f804 	mul.w	r8, r9, r4
 8000610:	e7b8      	b.n	8000584 <__udivmoddi4+0x2b8>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <th_timestamp_initialize>:
 * PORTME: Set up an OPEN-DRAIN GPIO if it hasn't already been done,
 * otherwise it is OK to leave this alone.
 */
void
th_timestamp_initialize(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	 /* USER CODE 1 BEGIN */
		 /* Enable TRC */
		 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <th_timestamp_initialize+0x30>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a09      	ldr	r2, [pc, #36]	@ (8000648 <th_timestamp_initialize+0x30>)
 8000622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000626:	60d3      	str	r3, [r2, #12]
		 /* Reset the clock cycle counter value */
		 DWT->CYCCNT = 0;
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <th_timestamp_initialize+0x34>)
 800062a:	2200      	movs	r2, #0
 800062c:	605a      	str	r2, [r3, #4]
		  /* Enable  clock cycle counter */
		 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <th_timestamp_initialize+0x34>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a06      	ldr	r2, [pc, #24]	@ (800064c <th_timestamp_initialize+0x34>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6013      	str	r3, [r2, #0]
	    /* Some BSP/MSP/SDKs initialize the GPIO long before we even get here! */
	    /* USER CODE 1 END */
	    /* Always print this message, the host needs it. */
	    th_printf(EE_MSG_TIMESTAMP_MODE);
 800063a:	4805      	ldr	r0, [pc, #20]	@ (8000650 <th_timestamp_initialize+0x38>)
 800063c:	f000 f81c 	bl	8000678 <th_printf>
	    /* Always call the timestamp on initialize so that the open-drain output
	       is set to "1" (so that we catch a falling edge) */
	    th_timestamp();
 8000640:	f000 f808 	bl	8000654 <th_timestamp>

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	e000edf0 	.word	0xe000edf0
 800064c:	e0001000 	.word	0xe0001000
 8000650:	0800c0f0 	.word	0x0800c0f0

08000654 <th_timestamp>:
 *
 * PORTME: This function is essential.
 */
uint32_t
th_timestamp(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
	 // uint32_t elapsedMicroSeconds = 0;
	    /* USER CODE 1 BEGIN */

	    return DWT->CYCCNT / 250;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <th_timestamp+0x1c>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <th_timestamp+0x20>)
 800065e:	fba2 2303 	umull	r2, r3, r2, r3
 8000662:	091b      	lsrs	r3, r3, #4
	        This message must be printed, the host needs it.
	        th_printf(EE_MSG_TIMESTAMP, elapsedMicroSeconds);
	#endif
	    }*/

}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e0001000 	.word	0xe0001000
 8000674:	10624dd3 	.word	0x10624dd3

08000678 <th_printf>:
 * It may only be necessary to comment out this function and define
 * th_printf as printf and just rerout fputc();
 */
void
th_printf(const char *p_fmt, ...)
{
 8000678:	b40f      	push	{r0, r1, r2, r3}
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, p_fmt);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	607b      	str	r3, [r7, #4]
    (void)th_vprintf(p_fmt, args);
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	6938      	ldr	r0, [r7, #16]
 800068a:	f000 f807 	bl	800069c <th_vprintf>
    va_end(args);
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr

0800069c <th_vprintf>:
    free(ptr);
}

int
th_vprintf(const char *format, va_list ap)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    return vprintf(format, ap);
 80006a6:	6839      	ldr	r1, [r7, #0]
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f00a ff85 	bl	800b5b8 <viprintf>
 80006ae:	4603      	mov	r3, r0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <aes_set_key>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
static int aes_set_key( mbedtls_aes_context *ctx,
                        const unsigned char *key,
                        unsigned int keybits )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
    unsigned int i;
    int ret = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_lock( &cryp_mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif /* MBEDTLS_THREADING_C */

    switch (keybits)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006ce:	d012      	beq.n	80006f6 <aes_set_key+0x3e>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80006d6:	d813      	bhi.n	8000700 <aes_set_key+0x48>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b80      	cmp	r3, #128	@ 0x80
 80006dc:	d003      	beq.n	80006e6 <aes_set_key+0x2e>
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80006e2:	d004      	beq.n	80006ee <aes_set_key+0x36>
 80006e4:	e00c      	b.n	8000700 <aes_set_key+0x48>
    {
        case 128:
            ctx->hcryp_aes.Init.KeySize = CRYP_KEYSIZE_128B;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80006ec:	e00c      	b.n	8000708 <aes_set_key+0x50>
        case 192:
#if ( USE_AES_KEY192 == 1 )
            ctx->hcryp_aes.Init.KeySize = CRYP_KEYSIZE_192B;
            break;
#else
            ret = MBEDTLS_ERR_PLATFORM_FEATURE_UNSUPPORTED;
 80006ee:	f06f 0371 	mvn.w	r3, #113	@ 0x71
 80006f2:	613b      	str	r3, [r7, #16]
            goto exit;
 80006f4:	e053      	b.n	800079e <aes_set_key+0xe6>
#endif /* USE_AES_KEY192 */

        case 256:
            ctx->hcryp_aes.Init.KeySize = CRYP_KEYSIZE_256B;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80006fe:	e003      	b.n	8000708 <aes_set_key+0x50>

        default :
            ret = MBEDTLS_ERR_AES_INVALID_KEY_LENGTH;
 8000700:	f06f 031f 	mvn.w	r3, #31
 8000704:	613b      	str	r3, [r7, #16]
            goto exit;
 8000706:	e04a      	b.n	800079e <aes_set_key+0xe6>
    }

    /* Format and fill AES key  */
    for( i=0; i < (keybits/32); i++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e024      	b.n	8000758 <aes_set_key+0xa0>
        GET_UINT32_BE( ctx->aes_key[i], key,4*i );
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	061a      	lsls	r2, r3, #24
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	3301      	adds	r3, #1
 8000720:	68b9      	ldr	r1, [r7, #8]
 8000722:	440b      	add	r3, r1
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	041b      	lsls	r3, r3, #16
 8000728:	431a      	orrs	r2, r3
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	3302      	adds	r3, #2
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	440b      	add	r3, r1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	021b      	lsls	r3, r3, #8
 8000738:	4313      	orrs	r3, r2
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	3203      	adds	r2, #3
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	440a      	add	r2, r1
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	ea43 0102 	orr.w	r1, r3, r2
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for( i=0; i < (keybits/32); i++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	429a      	cmp	r2, r3
 8000760:	d3d5      	bcc.n	800070e <aes_set_key+0x56>

    /* include the appropriate instance name */
#if defined (AES)
    ctx->hcryp_aes.Instance = AES;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <aes_set_key+0xf0>)
 8000766:	621a      	str	r2, [r3, #32]
    ctx->hcryp_aes.Instance = AES1;
#else /* CRYP */
    ctx->hcryp_aes.Instance = CRYP;
#endif /* AES */

    ctx->hcryp_aes.Init.DataType = CRYP_DATATYPE_8B;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	2204      	movs	r2, #4
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->hcryp_aes.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2201      	movs	r2, #1
 8000772:	645a      	str	r2, [r3, #68]	@ 0x44
    ctx->hcryp_aes.Init.pKey = ctx->aes_key;
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	62da      	str	r2, [r3, #44]	@ 0x2c

    if ( HAL_CRYP_Init(&ctx->hcryp_aes) != HAL_OK )
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3320      	adds	r3, #32
 800077e:	4618      	mov	r0, r3
 8000780:	f001 f9a2 	bl	8001ac8 <HAL_CRYP_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <aes_set_key+0xda>
    {
        ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 800078a:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800078e:	613b      	str	r3, [r7, #16]
        goto exit;
 8000790:	e005      	b.n	800079e <aes_set_key+0xe6>
    }

    /* allow multi-context of CRYP : save context */
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6a1b      	ldr	r3, [r3, #32]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &cryp_mutex ) != 0 )
        ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
#endif /* MBEDTLS_THREADING_C */

    return( ret );
 800079e:	693b      	ldr	r3, [r7, #16]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	420c0000 	.word	0x420c0000

080007ac <mbedtls_aes_init>:

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
{
    mbedtls_mutex_init( &cryp_mutex );
    cryp_mutex_started = 1;
}
#endif /* MBEDTLS_THREADING_C */
    cryp_context_count++;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <mbedtls_aes_init+0x2c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <mbedtls_aes_init+0x2c>)
 80007c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80007c2:	b662      	cpsie	i
}
 80007c4:	bf00      	nop
    __enable_irq();

    cryp_zeroize( (void*)ctx, sizeof(mbedtls_aes_context) );
 80007c6:	218c      	movs	r1, #140	@ 0x8c
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f000 f8c6 	bl	800095a <cryp_zeroize>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000d4 	.word	0x200000d4

080007dc <mbedtls_aes_free>:


void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d01a      	beq.n	8000820 <mbedtls_aes_free+0x44>
  __ASM volatile ("cpsid i" : : : "memory");
 80007ea:	b672      	cpsid	i
}
 80007ec:	bf00      	nop
        return;

    __disable_irq();
    if (cryp_context_count > 0)
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <mbedtls_aes_free+0x4c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d004      	beq.n	8000800 <mbedtls_aes_free+0x24>
        cryp_context_count--;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <mbedtls_aes_free+0x4c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <mbedtls_aes_free+0x4c>)
 80007fe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000800:	b662      	cpsie	i
}
 8000802:	bf00      	nop
    }
#endif /* MBEDTLS_THREADING_C */
    __enable_irq();

    /* Shut down CRYP on last context */
    if (cryp_context_count == 0)
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <mbedtls_aes_free+0x4c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d104      	bne.n	8000816 <mbedtls_aes_free+0x3a>
        HAL_CRYP_DeInit( &ctx->hcryp_aes );
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3320      	adds	r3, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fa15 	bl	8001c40 <HAL_CRYP_DeInit>

    cryp_zeroize( (void*)ctx, sizeof(mbedtls_aes_context) );
 8000816:	218c      	movs	r1, #140	@ 0x8c
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 f89e 	bl	800095a <cryp_zeroize>
 800081e:	e000      	b.n	8000822 <mbedtls_aes_free+0x46>
        return;
 8000820:	bf00      	nop
}
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000d4 	.word	0x200000d4

0800082c <mbedtls_aes_setkey_enc>:
/*
 * AES key schedule (encryption)
 */
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                            unsigned int keybits)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    return( aes_set_key( ctx, key, keybits ) );
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	68b9      	ldr	r1, [r7, #8]
 800083c:	68f8      	ldr	r0, [r7, #12]
 800083e:	f7ff ff3b 	bl	80006b8 <aes_set_key>
 8000842:	4603      	mov	r3, r0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
    if( mbedtls_mutex_lock( &cryp_mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif /* MBEDTLS_THREADING_C */

    /* allow multi-context of CRYP use: restore context */
    ctx->hcryp_aes.Instance->CR = ctx->ctx_save_cr;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8000868:	601a      	str	r2, [r3, #0]

    ctx->hcryp_aes.Init.DataType = CRYP_DATATYPE_8B;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	2204      	movs	r2, #4
 800086e:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->hcryp_aes.Init.pKey = ctx->aes_key;
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the Algo if not configured till now */
    if ( CRYP_AES_ECB != ctx->hcryp_aes.Init.Algorithm )
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	2b00      	cmp	r3, #0
 800087c:	d012      	beq.n	80008a4 <mbedtls_aes_crypt_ecb+0x58>
    {
        ctx->hcryp_aes.Init.Algorithm  = CRYP_AES_ECB;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Configure the CRYP  */
        if ( HAL_CRYP_SetConfig( &ctx->hcryp_aes,
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f103 0220 	add.w	r2, r3, #32
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	3324      	adds	r3, #36	@ 0x24
 800088e:	4619      	mov	r1, r3
 8000890:	4610      	mov	r0, r2
 8000892:	f001 fa15 	bl	8001cc0 <HAL_CRYP_SetConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <mbedtls_aes_crypt_ecb+0x58>
                                 &ctx->hcryp_aes.Init ) != HAL_OK )
        {
            ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 800089c:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 80008a0:	617b      	str	r3, [r7, #20]
            goto exit;
 80008a2:	e01d      	b.n	80008e0 <mbedtls_aes_crypt_ecb+0x94>
        }
    }

    if ( mode == MBEDTLS_AES_DECRYPT )
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d109      	bne.n	80008be <mbedtls_aes_crypt_ecb+0x72>
    {
       /* AES decryption */
        ret = mbedtls_internal_aes_decrypt( ctx, input, output );
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	6879      	ldr	r1, [r7, #4]
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 f837 	bl	8000922 <mbedtls_internal_aes_decrypt>
 80008b4:	6178      	str	r0, [r7, #20]
        if ( ret != 0 )
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d009      	beq.n	80008d0 <mbedtls_aes_crypt_ecb+0x84>
        {
            goto exit;
 80008bc:	e010      	b.n	80008e0 <mbedtls_aes_crypt_ecb+0x94>
        }
    }
    else
    {
        /* AES encryption */
        ret = mbedtls_internal_aes_encrypt( ctx, input, output );
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f000 f811 	bl	80008ea <mbedtls_internal_aes_encrypt>
 80008c8:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d106      	bne.n	80008de <mbedtls_aes_crypt_ecb+0x92>
            goto exit;
        }
    }

    /* allow multi-context of CRYP : save context */
    ctx->ctx_save_cr = ctx->hcryp_aes.Instance->CR;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80008dc:	e000      	b.n	80008e0 <mbedtls_aes_crypt_ecb+0x94>
            goto exit;
 80008de:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &cryp_mutex ) != 0 )
        ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
#endif /* MBEDTLS_THREADING_C */

    return( ret );
 80008e0:	697b      	ldr	r3, [r7, #20]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <mbedtls_internal_aes_encrypt>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af02      	add	r7, sp, #8
 80008f0:	60f8      	str	r0, [r7, #12]
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]

    if (HAL_CRYP_Encrypt( &ctx->hcryp_aes,
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	f103 0020 	add.w	r0, r3, #32
 80008fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000900:	9300      	str	r3, [sp, #0]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2210      	movs	r2, #16
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	f001 faf0 	bl	8001eec <HAL_CRYP_Encrypt>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d002      	beq.n	8000918 <mbedtls_internal_aes_encrypt+0x2e>
                          (uint32_t *)input,
                          16,
                          (uint32_t *)output,
                          ST_CRYP_TIMEOUT) != HAL_OK )
    {
        return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 8000912:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000916:	e000      	b.n	800091a <mbedtls_internal_aes_encrypt+0x30>
    }
    return( 0 );
 8000918:	2300      	movs	r3, #0

}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <mbedtls_internal_aes_decrypt>:

int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af02      	add	r7, sp, #8
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
    if (HAL_CRYP_Decrypt( &ctx->hcryp_aes,
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f103 0020 	add.w	r0, r3, #32
 8000934:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2210      	movs	r2, #16
 800093e:	68b9      	ldr	r1, [r7, #8]
 8000940:	f001 fba8 	bl	8002094 <HAL_CRYP_Decrypt>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <mbedtls_internal_aes_decrypt+0x2e>
                          (uint32_t *)input,
                          16,
                          (uint32_t *)output,
                          ST_CRYP_TIMEOUT) != HAL_OK )
    {
        return( MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED );
 800094a:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800094e:	e000      	b.n	8000952 <mbedtls_internal_aes_decrypt+0x30>
    }
    return( 0 );
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <cryp_zeroize>:

/* Functions -----------------------------------------------------------------*/

/* Implementation that should never be optimized out by the compiler */
void cryp_zeroize(void *v, size_t n)
{
 800095a:	b480      	push	{r7}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char *)v;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	60fb      	str	r3, [r7, #12]
    while (n--) {
 8000968:	e004      	b.n	8000974 <cryp_zeroize+0x1a>
        *p++ = 0;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60fa      	str	r2, [r7, #12]
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
    while (n--) {
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	603a      	str	r2, [r7, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1f5      	bne.n	800096a <cryp_zeroize+0x10>
    }
}
 800097e:	bf00      	nop
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <HAL_CRYP_MspInit>:
  *           - Peripherals clock enable
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspInit(CRYP_HandleTypeDef *hcryp)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
#if defined (AES)
  /* Enable CRYP clock */
  __HAL_RCC_AES_CLK_ENABLE();
 8000994:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 8000996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800099a:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 800099c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 80009a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

  /* Force the CRYP Peripheral Clock Reset */
  __HAL_RCC_AES_FORCE_RESET();
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 80009b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 80009b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009bc:	6653      	str	r3, [r2, #100]	@ 0x64

  /* Release the CRYP Peripheral Clock Reset */
  __HAL_RCC_AES_RELEASE_RESET();
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 80009c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <HAL_CRYP_MspInit+0x4c>)
 80009c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009c8:	6653      	str	r3, [r2, #100]	@ 0x64
  __HAL_RCC_CRYP_FORCE_RESET();

  /* Release the CRYP Peripheral Clock Reset */
  __HAL_RCC_CRYP_RELEASE_RESET();
#endif /* AES */
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	44020c00 	.word	0x44020c00

080009dc <HAL_CRYP_MspDeInit>:
  *          - Disable the Peripherals clock
  * @param hcryp: CRYP handle pointer
  * @retval None
  */
void HAL_CRYP_MspDeInit(CRYP_HandleTypeDef *hcryp)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
#if defined (AES)
  __HAL_RCC_AES_CLK_DISABLE();
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_CRYP_MspDeInit+0x24>)
 80009e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <HAL_CRYP_MspDeInit+0x24>)
 80009ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80009f0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  __HAL_RCC_AES1_CLK_DISABLE();
#else /* CRYP */
  /* Disable CRYP clock */
  __HAL_RCC_CRYP_CLK_DISABLE();
#endif /* AES */
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	44020c00 	.word	0x44020c00

08000a04 <hash_zeroize>:

/* Functions -----------------------------------------------------------------*/

/* Implementation that should never be optimized out by the compiler */
void hash_zeroize( void *v, size_t n )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    volatile unsigned char *p = (unsigned char *)v;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]
    while (n--)
 8000a12:	e004      	b.n	8000a1e <hash_zeroize+0x1a>
    {
        *p++ = 0;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	60fa      	str	r2, [r7, #12]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
    while (n--)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	1e5a      	subs	r2, r3, #1
 8000a22:	603a      	str	r2, [r7, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1f5      	bne.n	8000a14 <hash_zeroize+0x10>
    }
}
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_HASH_MspInit+0x34>)
 8000a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a46:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_HASH_MspInit+0x34>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_HASH_MspInit+0x34>)
 8000a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	44020c00 	.word	0x44020c00

08000a70 <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_HASH_MspDeInit+0x24>)
 8000a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7e:	4a05      	ldr	r2, [pc, #20]	@ (8000a94 <HAL_HASH_MspDeInit+0x24>)
 8000a80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000a84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
}
 8000a88:	bf00      	nop
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	44020c00 	.word	0x44020c00

08000a98 <mbedtls_sha256_init>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa0:	b672      	cpsid	i
}
 8000aa2:	bf00      	nop
{
    mbedtls_mutex_init( &hash_mutex );
    hash_mutex_started = 1;
}
#endif /* MBEDTLS_THREADING_C */
    hash_context_count++;
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <mbedtls_sha256_init+0x2c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a06      	ldr	r2, [pc, #24]	@ (8000ac4 <mbedtls_sha256_init+0x2c>)
 8000aac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aae:	b662      	cpsie	i
}
 8000ab0:	bf00      	nop
    __enable_irq();

    hash_zeroize( ctx, sizeof(mbedtls_sha256_context) );
 8000ab2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffa4 	bl	8000a04 <hash_zeroize>

}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200000d8 	.word	0x200000d8

08000ac8 <mbedtls_sha256_free>:

void mbedtls_sha256_free( mbedtls_sha256_context *ctx )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    if (ctx == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d01b      	beq.n	8000b0e <mbedtls_sha256_free+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad6:	b672      	cpsid	i
}
 8000ad8:	bf00      	nop
        return;

    __disable_irq();
    if (hash_context_count > 0)
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <mbedtls_sha256_free+0x50>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d004      	beq.n	8000aec <mbedtls_sha256_free+0x24>
        hash_context_count--;
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <mbedtls_sha256_free+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <mbedtls_sha256_free+0x50>)
 8000aea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aec:	b662      	cpsie	i
}
 8000aee:	bf00      	nop
    }
#endif /* MBEDTLS_THREADING_C */
    __enable_irq();

    /* Shut down HASH on last context */
    if (hash_context_count == 0)
 8000af0:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <mbedtls_sha256_free+0x50>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <mbedtls_sha256_free+0x3a>
        HAL_HASH_DeInit( &ctx->hhash );
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3304      	adds	r3, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f002 ff55 	bl	80039ac <HAL_HASH_DeInit>

    hash_zeroize( ctx, sizeof(mbedtls_sha256_context) );
 8000b02:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ff7c 	bl	8000a04 <hash_zeroize>
 8000b0c:	e000      	b.n	8000b10 <mbedtls_sha256_free+0x48>
        return;
 8000b0e:	bf00      	nop
}
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200000d8 	.word	0x200000d8

08000b1c <mbedtls_sha256_starts_ret>:

    *dst = *src;
}

int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]

#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &hash_mutex ) ) != 0 )
        return( ret );
#endif /* MBEDTLS_THREADING_C */
    ctx->hhash.Instance = HASH;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <mbedtls_sha256_starts_ret+0x5c>)
 8000b2e:	605a      	str	r2, [r3, #4]
    /* HASH Configuration */
    if (HAL_HASH_DeInit( &ctx->hhash ) != HAL_OK)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3304      	adds	r3, #4
 8000b34:	4618      	mov	r0, r3
 8000b36:	f002 ff39 	bl	80039ac <HAL_HASH_DeInit>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <mbedtls_sha256_starts_ret+0x2c>
    {
        ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000b40:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000b44:	60fb      	str	r3, [r7, #12]
        goto exit;
 8000b46:	e011      	b.n	8000b6c <mbedtls_sha256_starts_ret+0x50>
    }
    ctx->hhash.Init.DataType = HASH_BYTE_SWAP   ;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	609a      	str	r2, [r3, #8]
    if ( HAL_HASH_Init( &ctx->hhash ) != HAL_OK )
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3304      	adds	r3, #4
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fef2 	bl	800393c <HAL_HASH_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <mbedtls_sha256_starts_ret+0x4a>
    {
        ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000b5e:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000b62:	60fb      	str	r3, [r7, #12]
        goto exit;
 8000b64:	e002      	b.n	8000b6c <mbedtls_sha256_starts_ret+0x50>
    }

    ctx->is224 = is224;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &hash_mutex ) != 0 )
        ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
#endif /* MBEDTLS_THREADING_C */

    return( ret );
 8000b6c:	68fb      	ldr	r3, [r7, #12]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	420c0400 	.word	0x420c0400

08000b7c <mbedtls_sha256_update_ret>:
}

int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
    size_t currentlen = ilen;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	61bb      	str	r3, [r7, #24]
#endif /* MBEDTLS_THREADING_C */

    /* restore hw context */
//    HAL_HASH_ContextRestoring( &ctx->hhash, (uint8_t *)ctx->ctx_save_regs );

    if (currentlen < (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len))
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000b96:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d215      	bcs.n	8000bcc <mbedtls_sha256_update_ret+0x50>
    {
        /* only store input data in context buffer */
        memcpy( ctx->sbuf + ctx->sbuf_len, input, currentlen );
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	3344      	adds	r3, #68	@ 0x44
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8000baa:	4413      	add	r3, r2
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	68b9      	ldr	r1, [r7, #8]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f00a fe2a 	bl	800b80a <memcpy>
        ctx->sbuf_len += currentlen;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f893 2084 	ldrb.w	r2, [r3, #132]	@ 0x84
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 8000bca:	e092      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
    }
    else
    {
        /* fill context buffer until ST_SHA256_BLOCK_SIZE bytes, and process it */
        memcpy( ctx->sbuf + ctx->sbuf_len,
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3344      	adds	r3, #68	@ 0x44
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8000bd6:	1898      	adds	r0, r3, r2
                input,
                (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len) );
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
        memcpy( ctx->sbuf + ctx->sbuf_len,
 8000bde:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000be2:	461a      	mov	r2, r3
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	f00a fe10 	bl	800b80a <memcpy>
        currentlen -= (ST_SHA256_BLOCK_SIZE - ctx->sbuf_len);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	3b40      	subs	r3, #64	@ 0x40
 8000bf8:	61bb      	str	r3, [r7, #24]

        if (ctx->is224 == 0)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d110      	bne.n	8000c24 <mbedtls_sha256_update_ret+0xa8>
        {
            if ( HAL_HASH_Accumulate(&ctx->hhash,
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	1d18      	adds	r0, r3, #4
                    (uint8_t *)(ctx->sbuf),
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f103 0144 	add.w	r1, r3, #68	@ 0x44
            if ( HAL_HASH_Accumulate(&ctx->hhash,
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2240      	movs	r2, #64	@ 0x40
 8000c12:	f002 feee 	bl	80039f2 <HAL_HASH_Accumulate>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d014      	beq.n	8000c46 <mbedtls_sha256_update_ret+0xca>
                    ST_SHA256_BLOCK_SIZE,
                    HAL_MAX_DELAY) != 0 )
            {
                ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000c1c:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000c20:	61fb      	str	r3, [r7, #28]
                goto exit;
 8000c22:	e066      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
            }
        }
        else
        {
            if ( HAL_HASH_Accumulate(&ctx->hhash,
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	1d18      	adds	r0, r3, #4
                    (uint8_t *)(ctx->sbuf),
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f103 0144 	add.w	r1, r3, #68	@ 0x44
            if ( HAL_HASH_Accumulate(&ctx->hhash,
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	2240      	movs	r2, #64	@ 0x40
 8000c34:	f002 fedd 	bl	80039f2 <HAL_HASH_Accumulate>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <mbedtls_sha256_update_ret+0xca>
                    ST_SHA256_BLOCK_SIZE,
                    HAL_MAX_DELAY) != 0 )
            {
                ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000c3e:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000c42:	61fb      	str	r3, [r7, #28]
                goto exit;
 8000c44:	e055      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
            }
        }

        /* Process following input data
                     with size multiple of ST_SHA256_BLOCK_SIZE bytes */
        size_t iter = currentlen / ST_SHA256_BLOCK_SIZE;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	099b      	lsrs	r3, r3, #6
 8000c4a:	617b      	str	r3, [r7, #20]
        if (iter != 0)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d02f      	beq.n	8000cb2 <mbedtls_sha256_update_ret+0x136>
        {
            if (ctx->is224 == 0)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d115      	bne.n	8000c86 <mbedtls_sha256_update_ret+0x10a>
            {
                if ( HAL_HASH_Accumulate(
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	1d18      	adds	r0, r3, #4
                	    &ctx->hhash,
                	    (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len),
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000c64:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000c68:	68ba      	ldr	r2, [r7, #8]
 8000c6a:	18d1      	adds	r1, r2, r3
                	    iter * ST_SHA256_BLOCK_SIZE,
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	019a      	lsls	r2, r3, #6
                if ( HAL_HASH_Accumulate(
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	f002 febd 	bl	80039f2 <HAL_HASH_Accumulate>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d019      	beq.n	8000cb2 <mbedtls_sha256_update_ret+0x136>
                	    HAL_MAX_DELAY
                	) != 0 )
                {
                    ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000c7e:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000c82:	61fb      	str	r3, [r7, #28]
                    goto exit;
 8000c84:	e035      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
                }
            }
            else
            {
                if ( HAL_HASH_Accumulate(
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1d18      	adds	r0, r3, #4
                	    &ctx->hhash,
                	    (uint8_t *)(input + ST_SHA256_BLOCK_SIZE - ctx->sbuf_len),
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000c90:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	18d1      	adds	r1, r2, r3
                	    iter * ST_SHA256_BLOCK_SIZE,
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	019a      	lsls	r2, r3, #6
                if ( HAL_HASH_Accumulate(
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	f002 fea7 	bl	80039f2 <HAL_HASH_Accumulate>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <mbedtls_sha256_update_ret+0x136>
                	    HAL_MAX_DELAY
                	) != 0 )
                {
                    ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000caa:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000cae:	61fb      	str	r3, [r7, #28]
                    goto exit;
 8000cb0:	e01f      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
            }
        }

        /* Store only the remaining input data
                        up to (ST_SHA256_BLOCK_SIZE - 1) bytes */
        ctx->sbuf_len = currentlen % ST_SHA256_BLOCK_SIZE;
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        if ( ctx->sbuf_len != 0 )
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d011      	beq.n	8000cf0 <mbedtls_sha256_update_ret+0x174>
        {
            memcpy(ctx->sbuf, input + ilen - ctx->sbuf_len, ctx->sbuf_len);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f103 0044 	add.w	r0, r3, #68	@ 0x44
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	1a9b      	subs	r3, r3, r2
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	18d1      	adds	r1, r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f00a fd8e 	bl	800b80a <memcpy>
 8000cee:	e000      	b.n	8000cf2 <mbedtls_sha256_update_ret+0x176>
    }

    /* save hw context */
//    HAL_HASH_ContextSaving( &ctx->hhash, (uint8_t *)ctx->ctx_save_regs );

exit :
 8000cf0:	bf00      	nop
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &hash_mutex ) != 0 )
        ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
#endif /* MBEDTLS_THREADING_C */

    return( ret );
 8000cf2:	69fb      	ldr	r3, [r7, #28]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <mbedtls_sha256_finish_ret>:

int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af02      	add	r7, sp, #8
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
    int ret = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
    /* restore hw context */
  //  HAL_HASH_ContextRestoring( &ctx->hhash, (uint8_t *)ctx->ctx_save_regs );

    /* Last accumulation for pending bytes in sbuf_len,
                             then trig processing and get digest */
    if ( ctx->is224 == 0 )
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d115      	bne.n	8000d3e <mbedtls_sha256_finish_ret+0x42>
    {
        if ( HAL_HASH_AccumulateLast(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_HASH_TIMEOUT) != 0 )
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	1d18      	adds	r0, r3, #4
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000d22:	461a      	mov	r2, r3
 8000d24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f002 fecc 	bl	8003ac8 <HAL_HASH_AccumulateLast>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d019      	beq.n	8000d6a <mbedtls_sha256_finish_ret+0x6e>
        {
            ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000d36:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000d3a:	60fb      	str	r3, [r7, #12]
            goto exit;
 8000d3c:	e019      	b.n	8000d72 <mbedtls_sha256_finish_ret+0x76>
        }
    }
    else
    {
        if ( HAL_HASH_AccumulateLast(&ctx->hhash, ctx->sbuf, ctx->sbuf_len, output, ST_HASH_TIMEOUT) != 0 )
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	1d18      	adds	r0, r3, #4
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f002 feb6 	bl	8003ac8 <HAL_HASH_AccumulateLast>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <mbedtls_sha256_finish_ret+0x6e>
        {
            ret = MBEDTLS_ERR_PLATFORM_HW_ACCEL_FAILED;
 8000d62:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 8000d66:	60fb      	str	r3, [r7, #12]
            goto exit;
 8000d68:	e003      	b.n	8000d72 <mbedtls_sha256_finish_ret+0x76>
        }
    }

    ctx->sbuf_len = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &hash_mutex ) != 0 )
        ret = MBEDTLS_ERR_THREADING_MUTEX_ERROR;
#endif /* MBEDTLS_THREADING_C */

    return( ret );
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <MX_AES_Init>:
CRYP_HandleTypeDef hcryp;
uint32_t pKeyAES[4] = {0x00000000,0x00000000,0x00000000,0x00000000};

/* AES init function */
void MX_AES_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_AES_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <MX_AES_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_NO_SWAP;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_AES_Init+0x50>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_AES_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_AES_Init+0x50>)
 8000d94:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd4 <MX_AES_Init+0x58>)
 8000d96:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_AES_Init+0x50>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_AES_Init+0x50>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	@ 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_AES_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_AES_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hcryp.Init.KeyMode = CRYP_KEYMODE_NORMAL;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_AES_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_AES_Init+0x50>)
 8000db8:	f000 fe86 	bl	8001ac8 <HAL_CRYP_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_AES_Init+0x4a>
  {
    Error_Handler();
 8000dc2:	f000 f95b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000dc 	.word	0x200000dc
 8000dd0:	420c0000 	.word	0x420c0000
 8000dd4:	20000144 	.word	0x20000144

08000dd8 <MX_GPIO_Init>:

/** Configure pins
     PH0-OSC_IN(PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000de4:	4a10      	ldr	r2, [pc, #64]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_GPIO_Init+0x50>)
 8000e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	44020c00 	.word	0x44020c00

08000e2c <MX_HASH_Init>:

HASH_HandleTypeDef hhash;

/* HASH init function */
void MX_HASH_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000e30:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_HASH_Init+0x2c>)
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <MX_HASH_Init+0x30>)
 8000e34:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <MX_HASH_Init+0x2c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA256;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_HASH_Init+0x2c>)
 8000e3e:	f44f 22c0 	mov.w	r2, #393216	@ 0x60000
 8000e42:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_HASH_Init+0x2c>)
 8000e46:	f002 fd79 	bl	800393c <HAL_HASH_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_HASH_Init+0x28>
  {
    Error_Handler();
 8000e50:	f000 f914 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000154 	.word	0x20000154
 8000e5c:	420c0400 	.word	0x420c0400

08000e60 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e64:	f003 fada 	bl	800441c <HAL_ICACHE_Enable>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000e6e:	f000 f905 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
//	 uint32_t aes_time_sw=0;
	 uint32_t aes_time_hw=0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
	 uint32_t sha_time_hw=0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
	  uint32_t t0=0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
	  uint32_t t1=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 fbf9 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f86b 	bl	8000f6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  th_timestamp_initialize();
 8000e96:	f7ff fbbf 	bl	8000618 <th_timestamp_initialize>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e9a:	f7ff ff9d 	bl	8000dd8 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000e9e:	f7ff ffdf 	bl	8000e60 <MX_ICACHE_Init>
  MX_AES_Init();
 8000ea2:	f7ff ff6b 	bl	8000d7c <MX_AES_Init>
  MX_HASH_Init();
 8000ea6:	f7ff ffc1 	bl	8000e2c <MX_HASH_Init>
  MX_RNG_Init();
 8000eaa:	f000 f923 	bl	80010f4 <MX_RNG_Init>
  MX_PKA_Init();
 8000eae:	f000 f8eb 	bl	8001088 <MX_PKA_Init>
  MX_USART1_UART_Init();
 8000eb2:	f000 fa67 	bl	8001384 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
 //AES TEST
  t0= th_timestamp();
 8000eb6:	f7ff fbcd 	bl	8000654 <th_timestamp>
 8000eba:	6178      	str	r0, [r7, #20]

  mbedtls_aes_init(&aes_ctx);
 8000ebc:	4824      	ldr	r0, [pc, #144]	@ (8000f50 <main+0xd8>)
 8000ebe:	f7ff fc75 	bl	80007ac <mbedtls_aes_init>
  mbedtls_aes_setkey_enc(&aes_ctx, key, 128);
 8000ec2:	2280      	movs	r2, #128	@ 0x80
 8000ec4:	4923      	ldr	r1, [pc, #140]	@ (8000f54 <main+0xdc>)
 8000ec6:	4822      	ldr	r0, [pc, #136]	@ (8000f50 <main+0xd8>)
 8000ec8:	f7ff fcb0 	bl	800082c <mbedtls_aes_setkey_enc>
  mbedtls_aes_crypt_ecb(&aes_ctx, MBEDTLS_AES_ENCRYPT,message_buffer, message_list);
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <main+0xe0>)
 8000ece:	4a23      	ldr	r2, [pc, #140]	@ (8000f5c <main+0xe4>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	481f      	ldr	r0, [pc, #124]	@ (8000f50 <main+0xd8>)
 8000ed4:	f7ff fcba 	bl	800084c <mbedtls_aes_crypt_ecb>


  t1= th_timestamp();
 8000ed8:	f7ff fbbc 	bl	8000654 <th_timestamp>
 8000edc:	6138      	str	r0, [r7, #16]
   aes_time_hw=t1-t0 ;
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	61fb      	str	r3, [r7, #28]

    printf("AES encryption Hw took %lu microseconds\r\n", aes_time_hw);
 8000ee6:	69f9      	ldr	r1, [r7, #28]
 8000ee8:	481d      	ldr	r0, [pc, #116]	@ (8000f60 <main+0xe8>)
 8000eea:	f00a fb0f 	bl	800b50c <iprintf>

    mbedtls_aes_free(&aes_ctx);
 8000eee:	4818      	ldr	r0, [pc, #96]	@ (8000f50 <main+0xd8>)
 8000ef0:	f7ff fc74 	bl	80007dc <mbedtls_aes_free>

    //SHA_256 TEST
    t0= th_timestamp();
 8000ef4:	f7ff fbae 	bl	8000654 <th_timestamp>
 8000ef8:	6178      	str	r0, [r7, #20]

    mbedtls_sha256_init(&sha_ctx);
 8000efa:	481a      	ldr	r0, [pc, #104]	@ (8000f64 <main+0xec>)
 8000efc:	f7ff fdcc 	bl	8000a98 <mbedtls_sha256_init>
  uint32_t rets=  mbedtls_sha256_starts_ret(&sha_ctx, 0);
 8000f00:	2100      	movs	r1, #0
 8000f02:	4818      	ldr	r0, [pc, #96]	@ (8000f64 <main+0xec>)
 8000f04:	f7ff fe0a 	bl	8000b1c <mbedtls_sha256_starts_ret>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60fb      	str	r3, [r7, #12]
  uint32_t retu=  mbedtls_sha256_update_ret(&sha_ctx,  message_list, strlen((char *)message_list));
 8000f0c:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <main+0xe0>)
 8000f0e:	f7ff f9bd 	bl	800028c <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	461a      	mov	r2, r3
 8000f16:	4910      	ldr	r1, [pc, #64]	@ (8000f58 <main+0xe0>)
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <main+0xec>)
 8000f1a:	f7ff fe2f 	bl	8000b7c <mbedtls_sha256_update_ret>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60bb      	str	r3, [r7, #8]
  uint32_t retf=  mbedtls_sha256_finish_ret(&sha_ctx, message_buffer);
 8000f22:	490e      	ldr	r1, [pc, #56]	@ (8000f5c <main+0xe4>)
 8000f24:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <main+0xec>)
 8000f26:	f7ff fee9 	bl	8000cfc <mbedtls_sha256_finish_ret>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	607b      	str	r3, [r7, #4]


    t1= th_timestamp();
 8000f2e:	f7ff fb91 	bl	8000654 <th_timestamp>
 8000f32:	6138      	str	r0, [r7, #16]
    sha_time_hw=t1-t0 ;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	61bb      	str	r3, [r7, #24]


    printf("SHA_256 Hash Hw took %lu microseconds\r\n", sha_time_hw);
 8000f3c:	69b9      	ldr	r1, [r7, #24]
 8000f3e:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <main+0xf0>)
 8000f40:	f00a fae4 	bl	800b50c <iprintf>
    mbedtls_sha256_free(&sha_ctx);
 8000f44:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <main+0xec>)
 8000f46:	f7ff fdbf 	bl	8000ac8 <mbedtls_sha256_free>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 8000f4a:	bf00      	nop
 8000f4c:	e7fd      	b.n	8000f4a <main+0xd2>
 8000f4e:	bf00      	nop
 8000f50:	20000194 	.word	0x20000194
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	2000038c 	.word	0x2000038c
 8000f60:	0800c110 	.word	0x0800c110
 8000f64:	20000220 	.word	0x20000220
 8000f68:	0800c13c 	.word	0x0800c13c

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b09c      	sub	sp, #112	@ 0x70
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2250      	movs	r2, #80	@ 0x50
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f00a fbba 	bl	800b6f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <SystemClock_Config+0xe4>)
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	4a2e      	ldr	r2, [pc, #184]	@ (8001050 <SystemClock_Config+0xe4>)
 8000f98:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000f9c:	6113      	str	r3, [r2, #16]
 8000f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001050 <SystemClock_Config+0xe4>)
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000faa:	bf00      	nop
 8000fac:	4b28      	ldr	r3, [pc, #160]	@ (8001050 <SystemClock_Config+0xe4>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d1f9      	bne.n	8000fac <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_CSI;
 8000fb8:	2330      	movs	r3, #48	@ 0x30
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000fc8:	2320      	movs	r3, #32
 8000fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000fd8:	237d      	movs	r3, #125	@ 0x7d
 8000fda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000fe8:	2308      	movs	r3, #8
 8000fea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 faa9 	bl	8004550 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001004:	f000 f83a 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	231f      	movs	r3, #31
 800100a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	2105      	movs	r1, #5
 8001026:	4618      	mov	r0, r3
 8001028:	f003 feca 	bl	8004dc0 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001032:	f000 f823 	bl	800107c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <SystemClock_Config+0xe8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <SystemClock_Config+0xe8>)
 8001040:	f043 0320 	orr.w	r3, r3, #32
 8001044:	6013      	str	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	3770      	adds	r7, #112	@ 0x70
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	44020800 	.word	0x44020800
 8001054:	40022000 	.word	0x40022000

08001058 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to USART3 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001060:	1d39      	adds	r1, r7, #4
 8001062:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001066:	2201      	movs	r2, #1
 8001068:	4803      	ldr	r0, [pc, #12]	@ (8001078 <__io_putchar+0x20>)
 800106a:	f009 fb31 	bl	800a6d0 <HAL_UART_Transmit>

 return ch;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200003dc 	.word	0x200003dc

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <MX_PKA_Init>:

PKA_HandleTypeDef hpka;

/* PKA init function */
void MX_PKA_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_PKA_Init+0x20>)
 800108e:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <MX_PKA_Init+0x24>)
 8001090:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_PKA_Init+0x20>)
 8001094:	f003 f9d2 	bl	800443c <HAL_PKA_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 800109e:	f7ff ffed 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200003ac 	.word	0x200003ac
 80010ac:	420c2000 	.word	0x420c2000

080010b0 <HAL_PKA_MspInit>:

void HAL_PKA_MspInit(PKA_HandleTypeDef* pkaHandle)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  if(pkaHandle->Instance==PKA)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_PKA_MspInit+0x3c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10e      	bne.n	80010e0 <HAL_PKA_MspInit+0x30>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* PKA clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_PKA_MspInit+0x40>)
 80010c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_PKA_MspInit+0x40>)
 80010ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80010ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010d2:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <HAL_PKA_MspInit+0x40>)
 80010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	420c2000 	.word	0x420c2000
 80010f0:	44020c00 	.word	0x44020c00

080010f4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <MX_RNG_Init+0x24>)
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <MX_RNG_Init+0x28>)
 80010fc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <MX_RNG_Init+0x24>)
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_RNG_Init+0x24>)
 8001106:	f009 f9f5 	bl	800a4f4 <HAL_RNG_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001110:	f7ff ffb4 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200003c4 	.word	0x200003c4
 800111c:	420c0800 	.word	0x420c0800

08001120 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0c6      	sub	sp, #280	@ 0x118
 8001124:	af00      	add	r7, sp, #0
 8001126:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800112a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800112e:	6018      	str	r0, [r3, #0]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001138:	4618      	mov	r0, r3
 800113a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800113e:	461a      	mov	r2, r3
 8001140:	2100      	movs	r1, #0
 8001142:	f00a fad7 	bl	800b6f4 <memset>
  if(rngHandle->Instance==RNG)
 8001146:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800114a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <HAL_RNG_MspInit+0xa8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d131      	bne.n	80011bc <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001158:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800115c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001160:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800116c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001174:	2200      	movs	r2, #0
 8001176:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f004 f960 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800118a:	f7ff ff77 	bl	800107c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_RNG_MspInit+0xac>)
 8001190:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001194:	4a0d      	ldr	r2, [pc, #52]	@ (80011cc <HAL_RNG_MspInit+0xac>)
 8001196:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800119a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <HAL_RNG_MspInit+0xac>)
 80011a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80011a4:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80011a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011ba:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	420c0800 	.word	0x420c0800
 80011cc:	44020c00 	.word	0x44020c00

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e2:	bf00      	nop
 80011e4:	e7fd      	b.n	80011e2 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	bf00      	nop
 80011ec:	e7fd      	b.n	80011ea <HardFault_Handler+0x4>

080011ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f2:	bf00      	nop
 80011f4:	e7fd      	b.n	80011f2 <MemManage_Handler+0x4>

080011f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <BusFault_Handler+0x4>

080011fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001202:	bf00      	nop
 8001204:	e7fd      	b.n	8001202 <UsageFault_Handler+0x4>

08001206 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001234:	f000 fac4 	bl	80017c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fee1 	bl	8001058 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
  }
  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f00a fa32 	bl	800b7b0 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200a0000 	.word	0x200a0000
 8001378:	00000400 	.word	0x00000400
 800137c:	200003d8 	.word	0x200003d8
 8001380:	200005c0 	.word	0x200005c0

08001384 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001388:	4b22      	ldr	r3, [pc, #136]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 800138a:	4a23      	ldr	r2, [pc, #140]	@ (8001418 <MX_USART1_UART_Init+0x94>)
 800138c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800138e:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c0:	4b14      	ldr	r3, [pc, #80]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c6:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013cc:	4811      	ldr	r0, [pc, #68]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013ce:	f009 f92f 	bl	800a630 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80013d8:	f7ff fe50 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013dc:	2100      	movs	r1, #0
 80013de:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013e0:	f009 fe5a 	bl	800b098 <HAL_UARTEx_SetTxFifoThreshold>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013ea:	f7ff fe47 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4808      	ldr	r0, [pc, #32]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 80013f2:	f009 fe8f 	bl	800b114 <HAL_UARTEx_SetRxFifoThreshold>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013fc:	f7ff fe3e 	bl	800107c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	@ (8001414 <MX_USART1_UART_Init+0x90>)
 8001402:	f009 fe10 	bl	800b026 <HAL_UARTEx_DisableFifoMode>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800140c:	f7ff fe36 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200003dc 	.word	0x200003dc
 8001418:	40013800 	.word	0x40013800

0800141c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0cc      	sub	sp, #304	@ 0x130
 8001420:	af00      	add	r7, sp, #0
 8001422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001426:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800142a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001440:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001444:	4618      	mov	r0, r3
 8001446:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800144a:	461a      	mov	r2, r3
 800144c:	2100      	movs	r1, #0
 800144e:	f00a f951 	bl	800b6f4 <memset>
  if(uartHandle->Instance==USART1)
 8001452:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001456:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a33      	ldr	r2, [pc, #204]	@ (800152c <HAL_UART_MspInit+0x110>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d15d      	bne.n	8001520 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001464:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001468:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800146c:	f04f 0201 	mov.w	r2, #1
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001478:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800147c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001480:	2200      	movs	r2, #0
 8001482:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4618      	mov	r0, r3
 800148a:	f003 ffdb 	bl	8005444 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001494:	f7ff fdf2 	bl	800107c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001498:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <HAL_UART_MspInit+0x114>)
 800149a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800149e:	4a24      	ldr	r2, [pc, #144]	@ (8001530 <HAL_UART_MspInit+0x114>)
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80014a8:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <HAL_UART_MspInit+0x114>)
 80014aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80014ae:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80014b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014b6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014c0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014c4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <HAL_UART_MspInit+0x114>)
 80014c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014cc:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_UART_MspInit+0x114>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_UART_MspInit+0x114>)
 80014d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f2:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80014f4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800150e:	2307      	movs	r3, #7
 8001510:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	@ (8001534 <HAL_UART_MspInit+0x118>)
 800151c:	f002 f8b0 	bl	8003680 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40013800 	.word	0x40013800
 8001530:	44020c00 	.word	0x44020c00
 8001534:	42020000 	.word	0x42020000

08001538 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001538:	480d      	ldr	r0, [pc, #52]	@ (8001570 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800153a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800153c:	f000 f826 	bl	800158c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopForever+0x6>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopForever+0xe>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopForever+0x16>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001566:	f00a f929 	bl	800b7bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff fc85 	bl	8000e78 <main>

0800156e <LoopForever>:

LoopForever:
    b LoopForever
 800156e:	e7fe      	b.n	800156e <LoopForever>
  ldr   r0, =_estack
 8001570:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800157c:	0800c218 	.word	0x0800c218
  ldr r2, =_sbss
 8001580:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001584:	200005c0 	.word	0x200005c0

08001588 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC1_IRQHandler>
	...

0800158c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001592:	4b35      	ldr	r3, [pc, #212]	@ (8001668 <SystemInit+0xdc>)
 8001594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001598:	4a33      	ldr	r2, [pc, #204]	@ (8001668 <SystemInit+0xdc>)
 800159a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800159e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80015a2:	4b32      	ldr	r3, [pc, #200]	@ (800166c <SystemInit+0xe0>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80015a8:	4b30      	ldr	r3, [pc, #192]	@ (800166c <SystemInit+0xe0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80015ae:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <SystemInit+0xe0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80015b4:	4b2d      	ldr	r3, [pc, #180]	@ (800166c <SystemInit+0xe0>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	492c      	ldr	r1, [pc, #176]	@ (800166c <SystemInit+0xe0>)
 80015ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <SystemInit+0xe4>)
 80015bc:	4013      	ands	r3, r2
 80015be:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80015c0:	4b2a      	ldr	r3, [pc, #168]	@ (800166c <SystemInit+0xe0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <SystemInit+0xe0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80015cc:	4b27      	ldr	r3, [pc, #156]	@ (800166c <SystemInit+0xe0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <SystemInit+0xe0>)
 80015d4:	4a27      	ldr	r2, [pc, #156]	@ (8001674 <SystemInit+0xe8>)
 80015d6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <SystemInit+0xe0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <SystemInit+0xe0>)
 80015e0:	4a24      	ldr	r2, [pc, #144]	@ (8001674 <SystemInit+0xe8>)
 80015e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <SystemInit+0xe0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <SystemInit+0xe0>)
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <SystemInit+0xe8>)
 80015ee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80015f0:	4b1e      	ldr	r3, [pc, #120]	@ (800166c <SystemInit+0xe0>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <SystemInit+0xe0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <SystemInit+0xe0>)
 80015fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001600:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <SystemInit+0xe0>)
 8001604:	2200      	movs	r2, #0
 8001606:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <SystemInit+0xdc>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800160e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001610:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <SystemInit+0xec>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001618:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001620:	d003      	beq.n	800162a <SystemInit+0x9e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001628:	d117      	bne.n	800165a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800162a:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <SystemInit+0xec>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SystemInit+0xec>)
 8001638:	4a10      	ldr	r2, [pc, #64]	@ (800167c <SystemInit+0xf0>)
 800163a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <SystemInit+0xec>)
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <SystemInit+0xf4>)
 8001640:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <SystemInit+0xec>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a0c      	ldr	r2, [pc, #48]	@ (8001678 <SystemInit+0xec>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <SystemInit+0xec>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <SystemInit+0xec>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	61d3      	str	r3, [r2, #28]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00
 800166c:	44020c00 	.word	0x44020c00
 8001670:	eae2eae3 	.word	0xeae2eae3
 8001674:	01010280 	.word	0x01010280
 8001678:	40022000 	.word	0x40022000
 800167c:	08192a3b 	.word	0x08192a3b
 8001680:	4c5d6e7f 	.word	0x4c5d6e7f

08001684 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001688:	2003      	movs	r0, #3
 800168a:	f000 f948 	bl	800191e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800168e:	f003 fd4f 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8001692:	4602      	mov	r2, r0
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_Init+0x44>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	490b      	ldr	r1, [pc, #44]	@ (80016cc <HAL_Init+0x48>)
 800169e:	5ccb      	ldrb	r3, [r1, r3]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_Init+0x4c>)
 80016a6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80016a8:	2004      	movs	r0, #4
 80016aa:	f000 f97f 	bl	80019ac <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ae:	200f      	movs	r0, #15
 80016b0:	f000 f810 	bl	80016d4 <HAL_InitTick>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e002      	b.n	80016c4 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fd87 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	44020c00 	.word	0x44020c00
 80016cc:	0800c194 	.word	0x0800c194
 80016d0:	20000050 	.word	0x20000050

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80016e0:	4b33      	ldr	r3, [pc, #204]	@ (80017b0 <HAL_InitTick+0xdc>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e05c      	b.n	80017a6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80016ec:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_InitTick+0xe0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d10c      	bne.n	8001712 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80016f8:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <HAL_InitTick+0xe4>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b2c      	ldr	r3, [pc, #176]	@ (80017b0 <HAL_InitTick+0xdc>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e037      	b.n	8001782 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001712:	f000 f9a3 	bl	8001a5c <HAL_SYSTICK_GetCLKSourceConfig>
 8001716:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d023      	beq.n	8001766 <HAL_InitTick+0x92>
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	2b02      	cmp	r3, #2
 8001722:	d82d      	bhi.n	8001780 <HAL_InitTick+0xac>
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_InitTick+0x5e>
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00d      	beq.n	800174c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001730:	e026      	b.n	8001780 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <HAL_InitTick+0xe4>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <HAL_InitTick+0xdc>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001740:	fbb3 f3f1 	udiv	r3, r3, r1
 8001744:	fbb2 f3f3 	udiv	r3, r2, r3
 8001748:	60fb      	str	r3, [r7, #12]
        break;
 800174a:	e01a      	b.n	8001782 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <HAL_InitTick+0xdc>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	fbb3 f3f2 	udiv	r3, r3, r2
 800175a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	60fb      	str	r3, [r7, #12]
        break;
 8001764:	e00d      	b.n	8001782 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0xdc>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001770:	fbb3 f3f2 	udiv	r3, r3, r2
 8001774:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001778:	fbb2 f3f3 	udiv	r3, r2, r3
 800177c:	60fb      	str	r3, [r7, #12]
        break;
 800177e:	e000      	b.n	8001782 <HAL_InitTick+0xae>
        break;
 8001780:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f8f0 	bl	8001968 <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e009      	b.n	80017a6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001792:	2200      	movs	r2, #0
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	f04f 30ff 	mov.w	r0, #4294967295
 800179a:	f000 f8cb 	bl	8001934 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_InitTick+0xe8>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000058 	.word	0x20000058
 80017b4:	e000e010 	.word	0xe000e010
 80017b8:	20000050 	.word	0x20000050
 80017bc:	20000054 	.word	0x20000054

080017c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x20>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x24>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	4a04      	ldr	r2, [pc, #16]	@ (80017e4 <HAL_IncTick+0x24>)
 80017d2:	6013      	str	r3, [r2, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000058 	.word	0x20000058
 80017e4:	20000470 	.word	0x20000470

080017e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return uwTick;
 80017ec:	4b03      	ldr	r3, [pc, #12]	@ (80017fc <HAL_GetTick+0x14>)
 80017ee:	681b      	ldr	r3, [r3, #0]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	20000470 	.word	0x20000470

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff6a 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001942:	f7ff ff81 	bl	8001848 <__NVIC_GetPriorityGrouping>
 8001946:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7ff ffb3 	bl	80018b8 <NVIC_EncodePriority>
 8001952:	4602      	mov	r2, r0
 8001954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff82 	bl	8001864 <__NVIC_SetPriority>
}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001978:	d301      	bcc.n	800197e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 800197a:	2301      	movs	r3, #1
 800197c:	e00d      	b.n	800199a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <HAL_SYSTICK_Config+0x40>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001986:	4b08      	ldr	r3, [pc, #32]	@ (80019a8 <HAL_SYSTICK_Config+0x40>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 800198c:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_SYSTICK_Config+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a05      	ldr	r2, [pc, #20]	@ (80019a8 <HAL_SYSTICK_Config+0x40>)
 8001992:	f043 0303 	orr.w	r3, r3, #3
 8001996:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e010 	.word	0xe000e010

080019ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d844      	bhi.n	8001a44 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80019ba:	a201      	add	r2, pc, #4	@ (adr r2, 80019c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80019bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c0:	080019e3 	.word	0x080019e3
 80019c4:	08001a01 	.word	0x08001a01
 80019c8:	08001a23 	.word	0x08001a23
 80019cc:	08001a45 	.word	0x08001a45
 80019d0:	080019d5 	.word	0x080019d5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6013      	str	r3, [r2, #0]
      break;
 80019e0:	e031      	b.n	8001a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80019e8:	f023 0304 	bic.w	r3, r3, #4
 80019ec:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80019f4:	4a18      	ldr	r2, [pc, #96]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80019f6:	f023 030c 	bic.w	r3, r3, #12
 80019fa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80019fe:	e022      	b.n	8001a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a12:	f023 030c 	bic.w	r3, r3, #12
 8001a16:	4a10      	ldr	r2, [pc, #64]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a20:	e011      	b.n	8001a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0b      	ldr	r2, [pc, #44]	@ (8001a54 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a34:	f023 030c 	bic.w	r3, r3, #12
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001a42:	e000      	b.n	8001a46 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a44:	bf00      	nop
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010
 8001a58:	44020c00 	.word	0x44020c00

08001a5c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	e01e      	b.n	8001ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001a76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d00f      	beq.n	8001aa6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d80f      	bhi.n	8001aac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d003      	beq.n	8001aa0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001a98:	e008      	b.n	8001aac <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
        break;
 8001a9e:	e008      	b.n	8001ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
        break;
 8001aa4:	e005      	b.n	8001ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	607b      	str	r3, [r7, #4]
        break;
 8001aaa:	e002      	b.n	8001ab2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001aac:	2300      	movs	r3, #0
 8001aae:	607b      	str	r3, [r7, #4]
        break;
 8001ab0:	bf00      	nop
    }
  }
  return systick_source;
 8001ab2:	687b      	ldr	r3, [r7, #4]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e010 	.word	0xe000e010
 8001ac4:	44020c00 	.word	0x44020c00

08001ac8 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
#if defined(SAES)
  uint32_t tickstart;
#endif /* SAES */

  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0a7      	b.n	8001c2a <HAL_CRYP_Init+0x162>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_CRYP_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f7fe ff4c 	bl	800098c <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  if (hcryp->Instance == AES)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a4e      	ldr	r2, [pc, #312]	@ (8001c34 <HAL_CRYP_Init+0x16c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d116      	bne.n	8001b2c <HAL_CRYP_Init+0x64>
  {
    /* Set the key size, data type and Algorithm */
    cr_value = (uint32_t)(hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4313      	orrs	r3, r2
 8001b14:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm and mode */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, cr_value);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <HAL_CRYP_Init+0x170>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e070      	b.n	8001c0e <HAL_CRYP_Init+0x146>
  }
  else
  {
    /* SAES is initializing, fetching random number from the RNG */
    tickstart = HAL_GetTick();
 8001b2c:	f7ff fe5c 	bl	80017e8 <HAL_GetTick>
 8001b30:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8001b32:	e01e      	b.n	8001b72 <HAL_CRYP_Init+0xaa>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8001b34:	f7ff fe58 	bl	80017e8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b52      	cmp	r3, #82	@ 0x52
 8001b40:	d917      	bls.n	8001b72 <HAL_CRYP_Init+0xaa>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 0201 	bic.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b56:	f043 0210 	orr.w	r2, r3, #16
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e05b      	b.n	8001c2a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->SR, CRYP_FLAG_BUSY))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d0d9      	beq.n	8001b34 <HAL_CRYP_Init+0x6c>
      }
    }
    /* SAES is initializing, no random number fetching error flagged */
    tickstart = HAL_GetTick();
 8001b80:	f7ff fe32 	bl	80017e8 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8001b86:	e01e      	b.n	8001bc6 <HAL_CRYP_Init+0xfe>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CRYP_GENERAL_TIMEOUT)
 8001b88:	f7ff fe2e 	bl	80017e8 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b52      	cmp	r3, #82	@ 0x52
 8001b94:	d917      	bls.n	8001bc6 <HAL_CRYP_Init+0xfe>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_RNG;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001baa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e031      	b.n	8001c2a <HAL_CRYP_Init+0x162>
    while (HAL_IS_BIT_SET(hcryp->Instance->ISR, CRYP_FLAG_RNGEIF))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d0d8      	beq.n	8001b88 <HAL_CRYP_Init+0xc0>
      }
    }
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8001bea:	431a      	orrs	r2, r3
                          hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    cr_value = (uint32_t)(hcryp->Init.KeyMode | hcryp->Init.DataType | hcryp->Init.KeySize | \
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60bb      	str	r3, [r7, #8]
    /* Set the key size, data type, algorithm, Key selection and key protection */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD | AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KEYSEL |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_CRYP_Init+0x174>)
 8001c02:	4013      	ands	r3, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	6013      	str	r3, [r2, #0]
               AES_CR_KEYPROT, cr_value);
  }
  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	64da      	str	r2, [r3, #76]	@ 0x4c

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	420c0000 	.word	0x420c0000
 8001c38:	fcfaff99 	.word	0xfcfaff99
 8001c3c:	8cf2ff99 	.word	0x8cf2ff99

08001c40 <HAL_CRYP_DeInit>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_DeInit(CRYP_HandleTypeDef *hcryp)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_CRYP_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e032      	b.n	8001cb8 <HAL_CRYP_DeInit+0x78>
  }

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Reset CrypInCount and CrypOutCount */
  hcryp->CrypInCount = 0;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->CrypOutCount = 0;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  hcryp->CrypHeaderCount = 0;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Disable the CRYP peripheral clock */
  __HAL_CRYP_DISABLE(hcryp);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Set IPRST for software reset */
  SET_BIT(hcryp->Instance->CR, AES_CR_IPRST);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Clear IPRST to allow writing registers */
  CLEAR_BIT(hcryp->Instance->CR, AES_CR_IPRST);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c9e:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  hcryp->MspDeInitCallback(hcryp);
#else
  /* DeInit the low level hardware: CLOCK, NVIC.*/
  HAL_CRYP_MspDeInit(hcryp);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7fe fe9b 	bl	80009dc <HAL_CRYP_MspDeInit>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_RESET;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  __HAL_UNLOCK(hcryp);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_CRYP_SetConfig>:
  * @param  pConf pointer to a CRYP_ConfigTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_SetConfig(CRYP_HandleTypeDef *hcryp, CRYP_ConfigTypeDef *pConf)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  /* Check the CRYP handle allocation */
  if ((hcryp == NULL) || (pConf == NULL))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_CRYP_SetConfig+0x16>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_CRYP_SetConfig+0x1a>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0fe      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
  /* Check parameters */
  assert_param(IS_CRYP_KEYSIZE(pConf->KeySize));
  assert_param(IS_CRYP_DATATYPE(pConf->DataType));
  assert_param(IS_CRYP_ALGORITHM(pConf->Algorithm));

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	f040 80f1 	bne.w	8001eca <HAL_CRYP_SetConfig+0x20a>
  {
    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_CRYP_SetConfig+0x3e>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e0ec      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Set CRYP parameters */
    hcryp->Init.DataType   = pConf->DataType;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
    hcryp->Init.pKey       = pConf->pKey;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]
    hcryp->Init.Algorithm  = pConf->Algorithm;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	615a      	str	r2, [r3, #20]
    hcryp->Init.KeySize    = pConf->KeySize;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	609a      	str	r2, [r3, #8]
    hcryp->Init.pInitVect  = pConf->pInitVect;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	611a      	str	r2, [r3, #16]
    hcryp->Init.Header     = pConf->Header;
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
    hcryp->Init.HeaderSize = pConf->HeaderSize;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	61da      	str	r2, [r3, #28]
    hcryp->Init.B0         = pConf->B0;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	621a      	str	r2, [r3, #32]
    hcryp->Init.DataWidthUnit = pConf->DataWidthUnit;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6a1a      	ldr	r2, [r3, #32]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Init.KeyMode = pConf->KeyMode;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
    hcryp->Init.HeaderWidthUnit = pConf->HeaderWidthUnit;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Init.KeyIVConfigSkip = pConf->KeyIVConfigSkip;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hcryp->Instance == AES)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee0 <HAL_CRYP_SetConfig+0x220>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d127      	bne.n	8001dc0 <HAL_CRYP_SetConfig+0x100>
    {
      /* Check the busy flag before writing CR register */
      if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 8001d70:	2352      	movs	r3, #82	@ 0x52
 8001d72:	2201      	movs	r2, #1
 8001d74:	2108      	movs	r1, #8
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fd96 	bl	80028a8 <CRYP_WaitFLAG>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_CRYP_SetConfig+0xd6>
      {
        hcryp->State = HAL_CRYP_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0a0      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
      }
      /* Set the key size, data type, AlgoMode and operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | AES_CR_KMOD,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b51      	ldr	r3, [pc, #324]	@ (8001ee4 <HAL_CRYP_SetConfig+0x224>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6851      	ldr	r1, [r2, #4]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6892      	ldr	r2, [r2, #8]
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6952      	ldr	r2, [r2, #20]
 8001dae:	4311      	orrs	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e06a      	b.n	8001e96 <HAL_CRYP_SetConfig+0x1d6>
                 hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm | hcryp->Init.KeyMode);
    }
    else
    {
      hcryp->Init.KeySelect        = pConf->KeySelect;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	635a      	str	r2, [r3, #52]	@ 0x34
      hcryp->Init.KeyProtection    = pConf->KeyProtection;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* In case of HSW, HW or SW key selection, we should specify Key mode selection (SAES_CR_KMOD) */
      if ((hcryp->Init.KeySelect != CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_WRAPPED))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d029      	beq.n	8001e2c <HAL_CRYP_SetConfig+0x16c>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de0:	d124      	bne.n	8001e2c <HAL_CRYP_SetConfig+0x16c>
      {
        /* Disable AES to change key mode */
        __HAL_CRYP_DISABLE(hcryp);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0201 	bic.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]
        /* Check the busy flag before writing CR register */
        if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 8001df2:	2352      	movs	r3, #82	@ 0x52
 8001df4:	2201      	movs	r2, #1
 8001df6:	2108      	movs	r1, #8
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fd55 	bl	80028a8 <CRYP_WaitFLAG>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_CRYP_SetConfig+0x158>
        {
          hcryp->State = HAL_CRYP_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
          __HAL_UNLOCK(hcryp);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e05f      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
        }
        /* Set key mode selection (Normal, Wrapped or Shared key )*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_WRAPPED);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001e2a:	601a      	str	r2, [r3, #0]
      }
      /* Check the busy flag before writing CR register */
      if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 8001e2c:	2352      	movs	r3, #82	@ 0x52
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2108      	movs	r1, #8
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 fd38 	bl	80028a8 <CRYP_WaitFLAG>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_CRYP_SetConfig+0x192>
      {
        hcryp->State = HAL_CRYP_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e042      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
      }
      /* Set the key size data type, AlgoMode and operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD | \
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <HAL_CRYP_SetConfig+0x228>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6851      	ldr	r1, [r2, #4]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6892      	ldr	r2, [r2, #8]
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6952      	ldr	r2, [r2, #20]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e76:	4311      	orrs	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	430b      	orrs	r3, r1
 8001e84:	6013      	str	r3, [r2, #0]
                 AES_CR_KEYSEL | AES_CR_KEYPROT | AES_CR_KMOD, hcryp->Init.DataType | hcryp->Init.KeySize | \
                 hcryp->Init.Algorithm | hcryp->Init.KeySelect | hcryp->Init.KeyProtection | hcryp->Init.KeyMode);
      /* Set to 0 the number of non-valid bytes using NPBLB field of CR register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001e94:	601a      	str	r2, [r3, #0]
    }
    /* Clear error flags */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_RWEIF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0202 	orr.w	r2, r2, #2
 8001ea6:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
    __HAL_UNLOCK(hcryp);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Reset Error Code field */
    hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    /* Set the default CRYP phase */
    hcryp->Phase = CRYP_PHASE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	64da      	str	r2, [r3, #76]	@ 0x4c

    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e006      	b.n	8001ed8 <HAL_CRYP_SetConfig+0x218>
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ece:	f043 0208 	orr.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	65da      	str	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	420c0000 	.word	0x420c0000
 8001ee4:	fcfaff99 	.word	0xfcfaff99
 8001ee8:	8cf2ff99 	.word	0x8cf2ff99

08001eec <HAL_CRYP_Encrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f040 80b4 	bne.w	8002072 <HAL_CRYP_Encrypt+0x186>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_CRYP_Encrypt+0x34>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e0b1      	b.n	8002084 <HAL_CRYP_Encrypt+0x198>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr parameters */
    hcryp->CrypInCount = 0U;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Calculate Size parameter in Byte */
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d106      	bne.n	8001f5a <HAL_CRYP_Encrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8001f58:	e003      	b.n	8001f62 <HAL_CRYP_Encrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	88fa      	ldrh	r2, [r7, #6]
 8001f5e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    if (hcryp->Instance == AES)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a49      	ldr	r2, [pc, #292]	@ (800208c <HAL_CRYP_Encrypt+0x1a0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_CRYP_Encrypt+0xb8>
    {
      /* Check the busy flag before writing CR register */
      if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 8001f6c:	2352      	movs	r3, #82	@ 0x52
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2108      	movs	r1, #8
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fc98 	bl	80028a8 <CRYP_WaitFLAG>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d009      	beq.n	8001f92 <HAL_CRYP_Encrypt+0xa6>
      {
        hcryp->State = HAL_CRYP_STATE_READY;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e078      	b.n	8002084 <HAL_CRYP_Encrypt+0x198>
      }
      /* Set the operating mode */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_ENCRYPT);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0218 	bic.w	r2, r2, #24
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	e01c      	b.n	8001fde <HAL_CRYP_Encrypt+0xf2>
    }
    else
    {
      /* Check the busy flag before writing CR register */
      if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 8001fa4:	2352      	movs	r3, #82	@ 0x52
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2108      	movs	r1, #8
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fc7c 	bl	80028a8 <CRYP_WaitFLAG>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_CRYP_Encrypt+0xde>
      {
        hcryp->State = HAL_CRYP_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e05c      	b.n	8002084 <HAL_CRYP_Encrypt+0x198>
      }
      /* Set the operating mode and normal key selection */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_ENCRYPT | CRYP_KEYMODE_NORMAL);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8001fd8:	f023 0318 	bic.w	r3, r3, #24
 8001fdc:	6013      	str	r3, [r2, #0]
    }
    /* Algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <HAL_CRYP_Encrypt+0x1a4>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]

    switch (algo)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff0:	d023      	beq.n	800203a <HAL_CRYP_Encrypt+0x14e>
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ff8:	d826      	bhi.n	8002048 <HAL_CRYP_Encrypt+0x15c>
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b60      	cmp	r3, #96	@ 0x60
 8001ffe:	d015      	beq.n	800202c <HAL_CRYP_Encrypt+0x140>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	2b60      	cmp	r3, #96	@ 0x60
 8002004:	d820      	bhi.n	8002048 <HAL_CRYP_Encrypt+0x15c>
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b40      	cmp	r3, #64	@ 0x40
 800200a:	d008      	beq.n	800201e <HAL_CRYP_Encrypt+0x132>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	2b40      	cmp	r3, #64	@ 0x40
 8002010:	d81a      	bhi.n	8002048 <HAL_CRYP_Encrypt+0x15c>
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_CRYP_Encrypt+0x132>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b20      	cmp	r3, #32
 800201c:	d114      	bne.n	8002048 <HAL_CRYP_Encrypt+0x15c>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES encryption */
        status = CRYP_AES_Encrypt(hcryp, Timeout);
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f000 f90d 	bl	8002240 <CRYP_AES_Encrypt>
 8002026:	4603      	mov	r3, r0
 8002028:	75fb      	strb	r3, [r7, #23]
        break;
 800202a:	e016      	b.n	800205a <HAL_CRYP_Encrypt+0x16e>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM encryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 800202c:	6a39      	ldr	r1, [r7, #32]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fd5a 	bl	8002ae8 <CRYP_AESGCM_Process>
 8002034:	4603      	mov	r3, r0
 8002036:	75fb      	strb	r3, [r7, #23]
        break;
 8002038:	e00f      	b.n	800205a <HAL_CRYP_Encrypt+0x16e>

      case CRYP_AES_CCM:
        /* AES CCM encryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 ff35 	bl	8002eac <CRYP_AESCCM_Process>
 8002042:	4603      	mov	r3, r0
 8002044:	75fb      	strb	r3, [r7, #23]
        break;
 8002046:	e008      	b.n	800205a <HAL_CRYP_Encrypt+0x16e>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	f043 0220 	orr.w	r2, r3, #32
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	75fb      	strb	r3, [r7, #23]
        break;
 8002058:	bf00      	nop
    }

    if (status == HAL_OK)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d110      	bne.n	8002082 <HAL_CRYP_Encrypt+0x196>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002070:	e007      	b.n	8002082 <HAL_CRYP_Encrypt+0x196>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002076:	f043 0208 	orr.w	r2, r3, #8
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002082:	7dfb      	ldrb	r3, [r7, #23]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	420c0000 	.word	0x420c0000
 8002090:	00010060 	.word	0x00010060

08002094 <HAL_CRYP_Decrypt>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t *pInput, uint16_t Size, uint32_t *pOutput,
                                   uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	80fb      	strh	r3, [r7, #6]

  /* Check input buffer size */
  assert_param(IS_CRYP_BUFFERSIZE(algo_assert, hcryp->Init.DataWidthUnit, Size));
#endif /* USE_FULL_ASSERT */

  if (hcryp->State == HAL_CRYP_STATE_READY)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	f040 80aa 	bne.w	8002206 <HAL_CRYP_Decrypt+0x172>
  {
    /* Change state Busy */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    __HAL_LOCK(hcryp);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_CRYP_Decrypt+0x34>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e0a7      	b.n	8002218 <HAL_CRYP_Decrypt+0x184>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /*  Reset CrypInCount, CrypOutCount and Initialize pCrypInBuffPtr and pCrypOutBuffPtr  parameters*/
    hcryp->CrypInCount = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hcryp->CrypOutCount = 0U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    hcryp->pCrypInBuffPtr = pInput;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcryp->pCrypOutBuffPtr = pOutput;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /*  Calculate Size parameter in Byte*/
    if (hcryp->Init.DataWidthUnit == CRYP_DATAWIDTHUNIT_WORD)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d106      	bne.n	8002102 <HAL_CRYP_Decrypt+0x6e>
    {
      hcryp->Size = Size * 4U;
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
 8002100:	e003      	b.n	800210a <HAL_CRYP_Decrypt+0x76>
    }
    else
    {
      hcryp->Size = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }
    /* Check the busy flag before writing CR register */
    if (CRYP_WaitFLAG(hcryp, AES_SR_BUSY, SET, CRYP_GENERAL_TIMEOUT) != HAL_OK)
 800210a:	2352      	movs	r3, #82	@ 0x52
 800210c:	2201      	movs	r2, #1
 800210e:	2108      	movs	r1, #8
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fbc9 	bl	80028a8 <CRYP_WaitFLAG>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_CRYP_Decrypt+0x9c>
    {
      hcryp->State = HAL_CRYP_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e073      	b.n	8002218 <HAL_CRYP_Decrypt+0x184>
    }
    if (IS_AES_ALL_INSTANCE(hcryp->Instance))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3a      	ldr	r2, [pc, #232]	@ (8002220 <HAL_CRYP_Decrypt+0x18c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_CRYP_Decrypt+0xb0>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a39      	ldr	r2, [pc, #228]	@ (8002224 <HAL_CRYP_Decrypt+0x190>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d10a      	bne.n	800215a <HAL_CRYP_Decrypt+0xc6>
    {
      /* Set Decryption operating mode*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0218 	bic.w	r2, r3, #24
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0210 	orr.w	r2, r2, #16
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	e00b      	b.n	8002172 <HAL_CRYP_Decrypt+0xde>
    }
    else
    {
      MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE | AES_CR_KMOD, CRYP_OPERATINGMODE_DECRYPT | CRYP_KEYMODE_NORMAL);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002164:	f023 0318 	bic.w	r3, r3, #24
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	6013      	str	r3, [r2, #0]
    }
    /* algo get algorithm selected */
    algo = hcryp->Instance->CR & AES_CR_CHMOD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_CRYP_Decrypt+0x194>)
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]

    switch (algo)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002184:	d023      	beq.n	80021ce <HAL_CRYP_Decrypt+0x13a>
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800218c:	d826      	bhi.n	80021dc <HAL_CRYP_Decrypt+0x148>
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b60      	cmp	r3, #96	@ 0x60
 8002192:	d015      	beq.n	80021c0 <HAL_CRYP_Decrypt+0x12c>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b60      	cmp	r3, #96	@ 0x60
 8002198:	d820      	bhi.n	80021dc <HAL_CRYP_Decrypt+0x148>
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b40      	cmp	r3, #64	@ 0x40
 800219e:	d008      	beq.n	80021b2 <HAL_CRYP_Decrypt+0x11e>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b40      	cmp	r3, #64	@ 0x40
 80021a4:	d81a      	bhi.n	80021dc <HAL_CRYP_Decrypt+0x148>
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_CRYP_Decrypt+0x11e>
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d114      	bne.n	80021dc <HAL_CRYP_Decrypt+0x148>
    {
      case CRYP_AES_ECB:
      case CRYP_AES_CBC:
      case CRYP_AES_CTR:
        /* AES decryption */
        status = CRYP_AES_Decrypt(hcryp, Timeout);
 80021b2:	6a39      	ldr	r1, [r7, #32]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f933 	bl	8002420 <CRYP_AES_Decrypt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	75fb      	strb	r3, [r7, #23]
        break;
 80021be:	e016      	b.n	80021ee <HAL_CRYP_Decrypt+0x15a>

      case CRYP_AES_GCM_GMAC:
        /* AES GCM decryption */
        status = CRYP_AESGCM_Process(hcryp, Timeout);
 80021c0:	6a39      	ldr	r1, [r7, #32]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fc90 	bl	8002ae8 <CRYP_AESGCM_Process>
 80021c8:	4603      	mov	r3, r0
 80021ca:	75fb      	strb	r3, [r7, #23]
        break;
 80021cc:	e00f      	b.n	80021ee <HAL_CRYP_Decrypt+0x15a>

      case CRYP_AES_CCM:
        /* AES CCM decryption */
        status = CRYP_AESCCM_Process(hcryp, Timeout);
 80021ce:	6a39      	ldr	r1, [r7, #32]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 fe6b 	bl	8002eac <CRYP_AESCCM_Process>
 80021d6:	4603      	mov	r3, r0
 80021d8:	75fb      	strb	r3, [r7, #23]
        break;
 80021da:	e008      	b.n	80021ee <HAL_CRYP_Decrypt+0x15a>

      default:
        hcryp->ErrorCode |= HAL_CRYP_ERROR_NOT_SUPPORTED;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	75fb      	strb	r3, [r7, #23]
        break;
 80021ec:	bf00      	nop
    }

    if (status == HAL_OK)
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d110      	bne.n	8002216 <HAL_CRYP_Decrypt+0x182>
    {
      /* Change the CRYP peripheral state */
      hcryp->State = HAL_CRYP_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
      __HAL_UNLOCK(hcryp);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002204:	e007      	b.n	8002216 <HAL_CRYP_Decrypt+0x182>
    }
  }
  else
  {
    /* Busy error code field */
    hcryp->ErrorCode |= HAL_CRYP_ERROR_BUSY;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	f043 0208 	orr.w	r2, r3, #8
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	65da      	str	r2, [r3, #92]	@ 0x5c
    status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002216:	7dfb      	ldrb	r3, [r7, #23]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	420c0000 	.word	0x420c0000
 8002224:	520c0000 	.word	0x520c0000
 8002228:	00010060 	.word	0x00010060

0800222c <HAL_CRYP_ErrorCallback>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module.
  * @retval None
  */
__weak void HAL_CRYP_ErrorCallback(CRYP_HandleTypeDef *hcryp)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hcryp);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CRYP_ErrorCallback can be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <CRYP_AES_Encrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Encrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800224a:	2301      	movs	r3, #1
 800224c:	613b      	str	r3, [r7, #16]
  uint32_t tickstart;

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d003      	beq.n	800225e <CRYP_AES_Encrypt+0x1e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	2b04      	cmp	r3, #4
 800225c:	d109      	bne.n	8002272 <CRYP_AES_Encrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <CRYP_AES_Encrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e002      	b.n	8002272 <CRYP_AES_Encrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d17a      	bne.n	800236e <CRYP_AES_Encrypt+0x12e>
  {
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227c:	2b01      	cmp	r3, #1
 800227e:	d003      	beq.n	8002288 <CRYP_AES_Encrypt+0x48>
        (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8002284:	2b00      	cmp	r3, #0
 8002286:	d160      	bne.n	800234a <CRYP_AES_Encrypt+0x10a>
    {
      if (hcryp->Instance == AES)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a63      	ldr	r2, [pc, #396]	@ (800241c <CRYP_AES_Encrypt+0x1dc>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d114      	bne.n	80022bc <CRYP_AES_Encrypt+0x7c>
      {
        /* Set the Key */
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002296:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800229a:	d006      	beq.n	80022aa <CRYP_AES_Encrypt+0x6a>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fb98 	bl	80029d8 <CRYP_SetKey>
 80022a8:	e048      	b.n	800233c <CRYP_AES_Encrypt+0xfc>
        }
        else /* After sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	e03f      	b.n	800233c <CRYP_AES_Encrypt+0xfc>
        }
      }
      else
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <CRYP_AES_Encrypt+0x98>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <CRYP_AES_Encrypt+0x98>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fb80 	bl	80029d8 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 80022d8:	f7ff fa86 	bl	80017e8 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 80022de:	e026      	b.n	800232e <CRYP_AES_Encrypt+0xee>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e6:	d022      	beq.n	800232e <CRYP_AES_Encrypt+0xee>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022e8:	f7ff fa7e 	bl	80017e8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d302      	bcc.n	80022fe <CRYP_AES_Encrypt+0xbe>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d117      	bne.n	800232e <CRYP_AES_Encrypt+0xee>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0201 	bic.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002312:	f043 0210 	orr.w	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e071      	b.n	8002412 <CRYP_AES_Encrypt+0x1d2>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0d1      	beq.n	80022e0 <CRYP_AES_Encrypt+0xa0>
            }
          }
        }
      }
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <CRYP_AES_Encrypt+0x10a>
      {
        /* Set the Initialization Vector */
        CRYP_SetIV(hcryp);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fba8 	bl	8002a9a <CRYP_SetIV>
      }
    }
    /* key & IV configuration for CBC and CTR in interleave mode */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234e:	2b04      	cmp	r3, #4
 8002350:	d117      	bne.n	8002382 <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb3d 	bl	80029d8 <CRYP_SetKey>
      if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <CRYP_AES_Encrypt+0x142>
      {
        /* Set the Initialization Vector*/
        CRYP_SetIV(hcryp);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fb97 	bl	8002a9a <CRYP_SetIV>
 800236c:	e009      	b.n	8002382 <CRYP_AES_Encrypt+0x142>
    }
  } /* If (dokeyivconfig == 1U) */
  else
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002372:	2b04      	cmp	r3, #4
 8002374:	d105      	bne.n	8002382 <CRYP_AES_Encrypt+0x142>
    {
      /* Set the Key */
      CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fb2b 	bl	80029d8 <CRYP_SetKey>
    }
  }
  /* Peripheral Key configuration to not do, IV to configure for CBC */
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYNOCONFIG)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002386:	2b02      	cmp	r3, #2
 8002388:	d106      	bne.n	8002398 <CRYP_AES_Encrypt+0x158>
  {
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <CRYP_AES_Encrypt+0x158>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 fb81 	bl	8002a9a <CRYP_SetIV>
    }
  }

  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023b4:	82fb      	strh	r3, [r7, #22]
  outcount = hcryp->CrypOutCount;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80023bc:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80023be:	e00b      	b.n	80023d8 <CRYP_AES_Encrypt+0x198>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f9c0 	bl	8002748 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80023ce:	82fb      	strh	r3, [r7, #22]
    outcount = hcryp->CrypOutCount;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80023d6:	82bb      	strh	r3, [r7, #20]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	8afa      	ldrh	r2, [r7, #22]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <CRYP_AES_Encrypt+0x1b8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	8aba      	ldrh	r2, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d3e3      	bcc.n	80023c0 <CRYP_AES_Encrypt+0x180>
  }

  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	420c0000 	.word	0x420c0000

08002420 <CRYP_AES_Decrypt>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AES_Decrypt(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint16_t incount;  /* Temporary CrypInCount Value */
  uint16_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 800242a:	2301      	movs	r3, #1
 800242c:	60bb      	str	r3, [r7, #8]

  if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	2b01      	cmp	r3, #1
 8002434:	d003      	beq.n	800243e <CRYP_AES_Decrypt+0x1e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	2b04      	cmp	r3, #4
 800243c:	d109      	bne.n	8002452 <CRYP_AES_Decrypt+0x32>
  {
    if (hcryp->KeyIVConfig == 1U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <CRYP_AES_Decrypt+0x2c>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	e002      	b.n	8002452 <CRYP_AES_Decrypt+0x32>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  if (dokeyivconfig == 1U)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 80e1 	bne.w	800261c <CRYP_AES_Decrypt+0x1fc>
  {
    if (hcryp->Instance == AES)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a95      	ldr	r2, [pc, #596]	@ (80026b4 <CRYP_AES_Decrypt+0x294>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d17b      	bne.n	800255c <CRYP_AES_Decrypt+0x13c>
    {
      /*  Key preparation for ECB/CBC */
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b40      	cmp	r3, #64	@ 0x40
 800246a:	d05e      	beq.n	800252a <CRYP_AES_Decrypt+0x10a>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800247a:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0218 	bic.w	r2, r3, #24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0208 	orr.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]

        /* Set the Key */
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d003      	beq.n	80024a0 <CRYP_AES_Decrypt+0x80>
            (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ALWAYS))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if ((hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE) || \
 800249c:	2b00      	cmp	r3, #0
 800249e:	d114      	bne.n	80024ca <CRYP_AES_Decrypt+0xaa>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024a8:	d006      	beq.n	80024b8 <CRYP_AES_Decrypt+0x98>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 fa91 	bl	80029d8 <CRYP_SetKey>
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80024b6:	e012      	b.n	80024de <CRYP_AES_Decrypt+0xbe>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 80024c6:	601a      	str	r2, [r3, #0]
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 80024c8:	e009      	b.n	80024de <CRYP_AES_Decrypt+0xbe>
          }
        }

        /* interleave mode Key configuration  */
        else if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d105      	bne.n	80024de <CRYP_AES_Decrypt+0xbe>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 fa7d 	bl	80029d8 <CRYP_SetKey>
        {
          /* Nothing to do */
        }

        /* Enable CRYP */
        __HAL_CRYP_ENABLE(hcryp);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0201 	orr.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 f887 	bl	8003604 <CRYP_WaitOnCCFlag>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <CRYP_AES_Decrypt+0xe0>
        {
          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e11e      	b.n	800273e <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 0218 	bic.w	r2, r3, #24
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0210 	orr.w	r2, r2, #16
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	e070      	b.n	800260c <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* Set the Key */
        if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	2b02      	cmp	r3, #2
 8002530:	d06c      	beq.n	800260c <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800253a:	d006      	beq.n	800254a <CRYP_AES_Decrypt+0x12a>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4619      	mov	r1, r3
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa48 	bl	80029d8 <CRYP_SetKey>
 8002548:	e060      	b.n	800260c <CRYP_AES_Decrypt+0x1ec>
          }
          else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
          {
            hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	e057      	b.n	800260c <CRYP_AES_Decrypt+0x1ec>
        }
      }
    }
    else /*SAES*/
    {
      if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d041      	beq.n	80025e8 <CRYP_AES_Decrypt+0x1c8>
      {
        /* key preparation for decryption, operating mode 2*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0218 	bic.w	r2, r3, #24
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0208 	orr.w	r2, r2, #8
 8002576:	601a      	str	r2, [r3, #0]

        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <CRYP_AES_Decrypt+0x17c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <CRYP_AES_Decrypt+0x17c>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	2b02      	cmp	r3, #2
 800258e:	d005      	beq.n	800259c <CRYP_AES_Decrypt+0x17c>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4619      	mov	r1, r3
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa1e 	bl	80029d8 <CRYP_SetKey>
          }
        }

        /* Enable SAES */
        __HAL_CRYP_ENABLE(hcryp);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

        /* Wait for CCF flag to be raised */
        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f001 f828 	bl	8003604 <CRYP_WaitOnCCFlag>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <CRYP_AES_Decrypt+0x19e>
        {
          return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0bf      	b.n	800273e <CRYP_AES_Decrypt+0x31e>
        }
        /* Clear CCF Flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

        /*  End of Key preparation for ECB/CBC */
        /* Return to decryption operating mode(Mode 3)*/
        MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 0218 	bic.w	r2, r3, #24
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0210 	orr.w	r2, r2, #16
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e011      	b.n	800260c <CRYP_AES_Decrypt+0x1ec>
      }
      else  /*Algorithm CTR */
      {
        /* we should re-write Key, in the case where we change key after first operation*/
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <CRYP_AES_Decrypt+0x1ec>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <CRYP_AES_Decrypt+0x1ec>
        {
          if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d005      	beq.n	800260c <CRYP_AES_Decrypt+0x1ec>
          {
            CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9e6 	bl	80029d8 <CRYP_SetKey>
          }
        }
      }
    }
    /* Set IV */
    if (hcryp->Init.Algorithm != CRYP_AES_ECB)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d057      	beq.n	80026c4 <CRYP_AES_Decrypt+0x2a4>
    {
      /* Set the Initialization Vector*/
      CRYP_SetIV(hcryp);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa40 	bl	8002a9a <CRYP_SetIV>
 800261a:	e053      	b.n	80026c4 <CRYP_AES_Decrypt+0x2a4>
  } /* if (dokeyivconfig == 1U) */

  else /* if (dokeyivconfig == 0U) */
  {
    /* interleave mode Key configuration  */
    if (hcryp->Init.KeyIVConfigSkip == CRYP_IVCONFIG_ONCE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	2b04      	cmp	r3, #4
 8002622:	d14f      	bne.n	80026c4 <CRYP_AES_Decrypt+0x2a4>
    {
      if (hcryp->Instance == AES)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a22      	ldr	r2, [pc, #136]	@ (80026b4 <CRYP_AES_Decrypt+0x294>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d14a      	bne.n	80026c4 <CRYP_AES_Decrypt+0x2a4>
      {
        /*  Key preparation for ECB/CBC */
        if (hcryp->Init.Algorithm != CRYP_AES_CTR)   /*ECB or CBC*/
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b40      	cmp	r3, #64	@ 0x40
 8002634:	d040      	beq.n	80026b8 <CRYP_AES_Decrypt+0x298>
        {
          /* key preparation for decryption, operating mode 2*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_KMOD, CRYP_KEYMODE_NORMAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002644:	601a      	str	r2, [r3, #0]
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_KEYDERIVATION);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 0218 	bic.w	r2, r3, #24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0208 	orr.w	r2, r2, #8
 8002658:	601a      	str	r2, [r3, #0]

          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f9b9 	bl	80029d8 <CRYP_SetKey>

          /* Enable CRYP */
          __HAL_CRYP_ENABLE(hcryp);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

          /* Wait for CCF flag to be raised */
          if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 ffc3 	bl	8003604 <CRYP_WaitOnCCFlag>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <CRYP_AES_Decrypt+0x268>
          {
            return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e05a      	b.n	800273e <CRYP_AES_Decrypt+0x31e>
          }
          /* Clear CCF Flag */
          __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

          /* Return to decryption operating mode(Mode 3)*/
          MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_OPERATINGMODE_DECRYPT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 0218 	bic.w	r2, r3, #24
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0210 	orr.w	r2, r2, #16
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e008      	b.n	80026c4 <CRYP_AES_Decrypt+0x2a4>
 80026b2:	bf00      	nop
 80026b4:	420c0000 	.word	0x420c0000
        }
        else  /*Algorithm CTR */
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f98a 	bl	80029d8 <CRYP_SetKey>
      }
    }

  }
  /* Set the phase */
  hcryp->Phase = CRYP_PHASE_PROCESS;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable CRYP */
  __HAL_CRYP_ENABLE(hcryp);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

  incount = hcryp->CrypInCount;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026e0:	81fb      	strh	r3, [r7, #14]
  outcount = hcryp->CrypOutCount;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80026e8:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 80026ea:	e00b      	b.n	8002704 <CRYP_AES_Decrypt+0x2e4>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80026ec:	6839      	ldr	r1, [r7, #0]
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f82a 	bl	8002748 <CRYP_AES_ProcessData>
    incount = hcryp->CrypInCount;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80026fa:	81fb      	strh	r3, [r7, #14]
    outcount = hcryp->CrypOutCount;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002702:	81bb      	strh	r3, [r7, #12]
  while ((incount < (hcryp->Size / 4U)) && (outcount < (hcryp->Size / 4U)))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	b29b      	uxth	r3, r3
 800270e:	89fa      	ldrh	r2, [r7, #14]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <CRYP_AES_Decrypt+0x304>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	b29b      	uxth	r3, r3
 800271e:	89ba      	ldrh	r2, [r7, #12]
 8002720:	429a      	cmp	r2, r3
 8002722:	d3e3      	bcc.n	80026ec <CRYP_AES_Decrypt+0x2cc>
  }
  /* Disable CRYP */
  __HAL_CRYP_DISABLE(hcryp);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0201 	bic.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop

08002748 <CRYP_AES_ProcessData>:
  *         the configuration information for CRYP module
  * @param  Timeout Specify Timeout value
  * @retval None
  */
static void CRYP_AES_ProcessData(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]

  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t i;

  /* Write the input block in the IN FIFO */
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800275c:	b29b      	uxth	r3, r3
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002770:	b29b      	uxth	r3, r3
 8002772:	3301      	adds	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002786:	b29b      	uxth	r3, r3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	441a      	add	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800279a:	b29b      	uxth	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	441a      	add	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027da:	b29b      	uxth	r3, r3
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	441a      	add	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	609a      	str	r2, [r3, #8]
  hcryp->CrypInCount++;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Wait for CCF flag to be raised */
  if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 ff01 	bl	8003604 <CRYP_WaitOnCCFlag>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <CRYP_AES_ProcessData+0xc6>
    /*Call registered error callback*/
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
    hcryp->ErrorCallback(hcryp);
#else
    /*Call legacy weak error callback*/
    HAL_CRYP_ErrorCallback(hcryp);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fd0f 	bl	800222c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
  }

  /* Clear CCF Flag */
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

  /* Read the output block from the output FIFO and put them in temporary buffer then
     get CrypOutBuff from temporary buffer*/
  for (i = 0U; i < 4U; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	e00b      	b.n	8002840 <CRYP_AES_ProcessData+0xf8>
  {
    temp[i] = hcryp->Instance->DOUTR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	3320      	adds	r3, #32
 8002834:	443b      	add	r3, r7
 8002836:	f843 2c14 	str.w	r2, [r3, #-20]
  for (i = 0U; i < 4U; i++)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3301      	adds	r3, #1
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d9f0      	bls.n	8002828 <CRYP_AES_ProcessData+0xe0>
  }
  i = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 800284a:	e01a      	b.n	8002882 <CRYP_AES_ProcessData+0x13a>
  {
    *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[i];
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002856:	b29b      	uxth	r3, r3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	441a      	add	r2, r3
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3320      	adds	r3, #32
 8002862:	443b      	add	r3, r7
 8002864:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8002868:	6013      	str	r3, [r2, #0]
    hcryp->CrypOutCount++;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002870:	b29b      	uxth	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    i++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
  while ((hcryp->CrypOutCount < ((hcryp->Size + 3U) / 4U)) && (i < 4U))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002892:	3303      	adds	r3, #3
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	429a      	cmp	r2, r3
 8002898:	d202      	bcs.n	80028a0 <CRYP_AES_ProcessData+0x158>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d9d5      	bls.n	800284c <CRYP_AES_ProcessData+0x104>
  }
}
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <CRYP_WaitFLAG>:
  * @param  Timeout Timeout duration
  * @retval HAL status.
  */

static HAL_StatusTypeDef CRYP_WaitFLAG(CRYP_HandleTypeDef *hcryp, uint32_t flag, FlagStatus Status, uint32_t Timeout)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7fe ff96 	bl	80017e8 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]
  while (__HAL_CRYP_GET_FLAG(hcryp, flag) == Status)
 80028be:	e01a      	b.n	80028f6 <CRYP_WaitFLAG+0x4e>
  {
    if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe ff92 	bl	80017e8 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <CRYP_WaitFLAG+0x2e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10f      	bne.n	80028f6 <CRYP_WaitFLAG+0x4e>
    {
      CLEAR_BIT(hcryp->Instance->CR, AES_CR_EN);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0201 	bic.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
      /* Change state */
      hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* return error */
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e067      	b.n	80029c6 <CRYP_WaitFLAG+0x11e>
  while (__HAL_CRYP_GET_FLAG(hcryp, flag) == Status)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b80      	cmp	r3, #128	@ 0x80
 80028fa:	d10a      	bne.n	8002912 <CRYP_WaitFLAG+0x6a>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002906:	2b80      	cmp	r3, #128	@ 0x80
 8002908:	bf0c      	ite	eq
 800290a:	2301      	moveq	r3, #1
 800290c:	2300      	movne	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e054      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b08      	cmp	r3, #8
 8002916:	d10a      	bne.n	800292e <CRYP_WaitFLAG+0x86>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	bf0c      	ite	eq
 8002926:	2301      	moveq	r3, #1
 8002928:	2300      	movne	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	e046      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	4a27      	ldr	r2, [pc, #156]	@ (80029d0 <CRYP_WaitFLAG+0x128>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10a      	bne.n	800294c <CRYP_WaitFLAG+0xa4>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b04      	cmp	r3, #4
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	e037      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <CRYP_WaitFLAG+0x12c>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10a      	bne.n	800296a <CRYP_WaitFLAG+0xc2>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	bf0c      	ite	eq
 8002962:	2301      	moveq	r3, #1
 8002964:	2300      	movne	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e028      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d10b      	bne.n	8002988 <CRYP_WaitFLAG+0xe0>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b04      	cmp	r3, #4
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e019      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d10b      	bne.n	80029a6 <CRYP_WaitFLAG+0xfe>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	bf0c      	ite	eq
 800299e:	2301      	moveq	r3, #1
 80029a0:	2300      	movne	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e00a      	b.n	80029bc <CRYP_WaitFLAG+0x114>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	bf0c      	ite	eq
 80029b6:	2301      	moveq	r3, #1
 80029b8:	2300      	movne	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	79fa      	ldrb	r2, [r7, #7]
 80029be:	4293      	cmp	r3, r2
 80029c0:	f43f af7e 	beq.w	80028c0 <CRYP_WaitFLAG+0x18>
    }
  }
  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	80000004 	.word	0x80000004
 80029d4:	80000002 	.word	0x80000002

080029d8 <CRYP_SetKey>:
  * @param  KeySize Size of Key
  * @note   If pKey is NULL, the Key registers are not written.
  * @retval None
  */
static void CRYP_SetKey(CRYP_HandleTypeDef *hcryp, uint32_t KeySize)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  if (hcryp->Init.pKey != NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d051      	beq.n	8002a8e <CRYP_SetKey+0xb6>
  {
    switch (KeySize)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d034      	beq.n	8002a5a <CRYP_SetKey+0x82>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029f6:	d149      	bne.n	8002a8c <CRYP_SetKey+0xb4>
    {
      case CRYP_KEYSIZE_256B:
        hcryp->Instance->KEYR7 = *(uint32_t *)(hcryp->Init.pKey);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	63da      	str	r2, [r3, #60]	@ 0x3c
        hcryp->Instance->KEYR6 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6852      	ldr	r2, [r2, #4]
 8002a0e:	639a      	str	r2, [r3, #56]	@ 0x38
        hcryp->Instance->KEYR5 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6892      	ldr	r2, [r2, #8]
 8002a1a:	635a      	str	r2, [r3, #52]	@ 0x34
        hcryp->Instance->KEYR4 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68d2      	ldr	r2, [r2, #12]
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey + 4U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6912      	ldr	r2, [r2, #16]
 8002a32:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 5U);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6952      	ldr	r2, [r2, #20]
 8002a3e:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 6U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6992      	ldr	r2, [r2, #24]
 8002a4a:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 7U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	69d2      	ldr	r2, [r2, #28]
 8002a56:	611a      	str	r2, [r3, #16]
        break;
 8002a58:	e019      	b.n	8002a8e <CRYP_SetKey+0xb6>
      case CRYP_KEYSIZE_128B:
        hcryp->Instance->KEYR3 = *(uint32_t *)(hcryp->Init.pKey);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6812      	ldr	r2, [r2, #0]
 8002a64:	61da      	str	r2, [r3, #28]
        hcryp->Instance->KEYR2 = *(uint32_t *)(hcryp->Init.pKey + 1U);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6852      	ldr	r2, [r2, #4]
 8002a70:	619a      	str	r2, [r3, #24]
        hcryp->Instance->KEYR1 = *(uint32_t *)(hcryp->Init.pKey + 2U);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6892      	ldr	r2, [r2, #8]
 8002a7c:	615a      	str	r2, [r3, #20]
        hcryp->Instance->KEYR0 = *(uint32_t *)(hcryp->Init.pKey + 3U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68d2      	ldr	r2, [r2, #12]
 8002a88:	611a      	str	r2, [r3, #16]
        break;
 8002a8a:	e000      	b.n	8002a8e <CRYP_SetKey+0xb6>
      default:
        break;
 8002a8c:	bf00      	nop
    }
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <CRYP_SetIV>:
  *         the configuration information for CRYP module
  * @note   If IV is NULL, the IV registers are not written.
  * @retval None
  */
static void CRYP_SetIV(CRYP_HandleTypeDef *hcryp)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  if (hcryp->Init.pInitVect != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d017      	beq.n	8002ada <CRYP_SetIV+0x40>
  {
    /* Set the Initialization Vector*/
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.pInitVect);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.pInitVect + 1U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6852      	ldr	r2, [r2, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.pInitVect + 2U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.pInitVect + 3U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691a      	ldr	r2, [r3, #16]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d2      	ldr	r2, [r2, #12]
 8002ad8:	621a      	str	r2, [r3, #32]
  }
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <CRYP_AESGCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESGCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08e      	sub	sp, #56	@ 0x38
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t index;
  uint32_t lastwordsize;
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002afe:	2301      	movs	r3, #1
 8002b00:	623b      	str	r3, [r7, #32]
  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d118      	bne.n	8002b3c <CRYP_AESGCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10a      	bne.n	8002b28 <CRYP_AESGCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8002b20:	441a      	add	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	665a      	str	r2, [r3, #100]	@ 0x64
 8002b26:	e00f      	b.n	8002b48 <CRYP_AESGCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002b34:	461a      	mov	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	665a      	str	r2, [r3, #100]	@ 0x64
 8002b3a:	e005      	b.n	8002b48 <CRYP_AESGCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	f040 80a6 	bne.w	8002c9c <CRYP_AESGCM_Process+0x1b4>
  {

    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /****************************** Init phase **********************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002b66:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d059      	beq.n	8002c24 <CRYP_AESGCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a92      	ldr	r2, [pc, #584]	@ (8002dc0 <CRYP_AESGCM_Process+0x2d8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d114      	bne.n	8002ba4 <CRYP_AESGCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b82:	d006      	beq.n	8002b92 <CRYP_AESGCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff24 	bl	80029d8 <CRYP_SetKey>
 8002b90:	e048      	b.n	8002c24 <CRYP_AESGCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e03f      	b.n	8002c24 <CRYP_AESGCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <CRYP_AESGCM_Process+0xd8>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <CRYP_AESGCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff0c 	bl	80029d8 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bc0:	f7fe fe12 	bl	80017e8 <HAL_GetTick>
 8002bc4:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8002bc6:	e026      	b.n	8002c16 <CRYP_AESGCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d022      	beq.n	8002c16 <CRYP_AESGCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bd0:	f7fe fe0a 	bl	80017e8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d302      	bcc.n	8002be6 <CRYP_AESGCM_Process+0xfe>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d117      	bne.n	8002c16 <CRYP_AESGCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfa:	f043 0210 	orr.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e146      	b.n	8002ea4 <CRYP_AESGCM_Process+0x3bc>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0d1      	beq.n	8002bc8 <CRYP_AESGCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector and the counter : Initial Counter Block (ICB)*/
    CRYP_SetIV(hcryp);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff38 	bl	8002a9a <CRYP_SetIV>

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0201 	orr.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002c3a:	6839      	ldr	r1, [r7, #0]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fce1 	bl	8003604 <CRYP_WaitOnCCFlag>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <CRYP_AESGCM_Process+0x164>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e12b      	b.n	8002ea4 <CRYP_AESGCM_Process+0x3bc>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 0201 	orr.w	r2, r2, #1
 8002c5c:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/

    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fb18 	bl	8003298 <CRYP_GCMCCM_SetHeaderPhase>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <CRYP_AESGCM_Process+0x18a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e118      	b.n	8002ea4 <CRYP_AESGCM_Process+0x3bc>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_PAYLOAD);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c9a:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <CRYP_AESGCM_Process+0x1cc>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 8002cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb4:	f7fe fd98 	bl	80017e8 <HAL_GetTick>
 8002cb8:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output Data */
  incount = hcryp->CrypInCount;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002cce:	e034      	b.n	8002d3a <CRYP_AESGCM_Process+0x252>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fd38 	bl	8002748 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d022      	beq.n	8002d26 <CRYP_AESGCM_Process+0x23e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ce0:	f7fe fd82 	bl	80017e8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d302      	bcc.n	8002cf6 <CRYP_AESGCM_Process+0x20e>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d117      	bne.n	8002d26 <CRYP_AESGCM_Process+0x23e>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0201 	bic.w	r2, r2, #1
 8002d04:	601a      	str	r2, [r3, #0]

        /* Change state & error code */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e0be      	b.n	8002ea4 <CRYP_AESGCM_Process+0x3bc>
      }
    }
    incount = hcryp->CrypInCount;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8002d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d203      	bcs.n	8002d4a <CRYP_AESGCM_Process+0x262>
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d3c2      	bcc.n	8002cd0 <CRYP_AESGCM_Process+0x1e8>
  }

  if ((hcryp->Size % 16U) != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 80a3 	beq.w	8002ea2 <CRYP_AESGCM_Process+0x3ba>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    /*  Set Npblb in case of AES GCM payload encryption to get right tag*/
    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_ENCRYPT)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0318 	and.w	r3, r3, #24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <CRYP_AESGCM_Process+0x2b0>
    {
      /* Set to 0 the number of non-valid bytes using NPBLB register*/
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	051a      	lsls	r2, r3, #20
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]
    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <CRYP_AESGCM_Process+0x2c6>
    {
      lastwordsize = (16U - npblb) / 4U;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f1c3 0310 	rsb	r3, r3, #16
 8002da8:	089b      	lsrs	r3, r3, #2
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dac:	e005      	b.n	8002dba <CRYP_AESGCM_Process+0x2d2>
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f1c3 0310 	rsb	r3, r3, #16
 8002db4:	089b      	lsrs	r3, r3, #2
 8002db6:	3301      	adds	r3, #1
 8002db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /*  last block optionally pad the data with zeros*/
    for (index = 0U; index < lastwordsize; index ++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dbe:	e019      	b.n	8002df4 <CRYP_AESGCM_Process+0x30c>
 8002dc0:	420c0000 	.word	0x420c0000
    {
      /* Write the last Input block in the IN FIFO */
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6812      	ldr	r2, [r2, #0]
 8002dda:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (index = 0U; index < lastwordsize; index ++)
 8002dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df0:	3301      	adds	r3, #1
 8002df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d3e3      	bcc.n	8002dc4 <CRYP_AESGCM_Process+0x2dc>
    }
    while (index < 4U)
 8002dfc:	e006      	b.n	8002e0c <CRYP_AESGCM_Process+0x324>
    {
      /* pad the data with zeros to have a complete block */
      hcryp->Instance->DINR  = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	609a      	str	r2, [r3, #8]
      index++;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e08:	3301      	adds	r3, #1
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
    while (index < 4U)
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d9f5      	bls.n	8002dfe <CRYP_AESGCM_Process+0x316>
    }
    /* Wait for CCF flag to be raised */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8002e12:	6839      	ldr	r1, [r7, #0]
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fbf5 	bl	8003604 <CRYP_WaitOnCCFlag>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <CRYP_AESGCM_Process+0x33e>
#if (USE_HAL_CRYP_REGISTER_CALLBACKS == 1U)
      /*Call registered error callback*/
      hcryp->ErrorCallback(hcryp);
#else
      /*Call legacy weak error callback*/
      HAL_CRYP_ErrorCallback(hcryp);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fa03 	bl	800222c <HAL_CRYP_ErrorCallback>
#endif /* USE_HAL_CRYP_REGISTER_CALLBACKS */
    }

    /* Clear CCF Flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /*Read the output block from the output FIFO */
    for (index = 0U; index < 4U; index++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e3e:	e00b      	b.n	8002e58 <CRYP_AESGCM_Process+0x370>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[index] = hcryp->Instance->DOUTR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	3338      	adds	r3, #56	@ 0x38
 8002e4c:	443b      	add	r3, r7
 8002e4e:	f843 2c30 	str.w	r2, [r3, #-48]
    for (index = 0U; index < 4U; index++)
 8002e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e54:	3301      	adds	r3, #1
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d9f0      	bls.n	8002e40 <CRYP_AESGCM_Process+0x358>
    }
    for (index = 0U; index < lastwordsize; index++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e62:	e01a      	b.n	8002e9a <CRYP_AESGCM_Process+0x3b2>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + (hcryp->CrypOutCount)) = temp[index];
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	441a      	add	r2, r3
 8002e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	3338      	adds	r3, #56	@ 0x38
 8002e7a:	443b      	add	r3, r7
 8002e7c:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002e80:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (index = 0U; index < lastwordsize; index++)
 8002e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e96:	3301      	adds	r3, #1
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d3e0      	bcc.n	8002e64 <CRYP_AESGCM_Process+0x37c>
    }
  }

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3738      	adds	r7, #56	@ 0x38
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <CRYP_AESCCM_Process>:
  *         the configuration information for CRYP module
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_AESCCM_Process(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08e      	sub	sp, #56	@ 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t wordsize = ((uint32_t)hcryp->Size / 4U);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t npblb;
  uint32_t lastwordsize;
  uint32_t temp[4];  /* Temporary CrypOutBuff */
  uint32_t incount;  /* Temporary CrypInCount Value */
  uint32_t outcount;  /* Temporary CrypOutCount Value */
  uint32_t dokeyivconfig = 1U; /* By default, carry out peripheral Key and IV configuration */
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]

  if (hcryp->Init.KeyIVConfigSkip == CRYP_KEYIVCONFIG_ONCE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d118      	bne.n	8002f00 <CRYP_AESCCM_Process+0x54>
  {
    if (hcryp->KeyIVConfig == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d10a      	bne.n	8002eec <CRYP_AESCCM_Process+0x40>
    {
      /* If the Key and IV configuration has to be done only once
         and if it has already been done, skip it */
      dokeyivconfig = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	623b      	str	r3, [r7, #32]
      hcryp->SizesSum += hcryp->Size; /* Compute message total payload length */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8002ee4:	441a      	add	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	665a      	str	r2, [r3, #100]	@ 0x64
 8002eea:	e00f      	b.n	8002f0c <CRYP_AESCCM_Process+0x60>
    else
    {
      /* If the Key and IV configuration has to be done only once
         and if it has not been done already, do it and set KeyIVConfig
         to keep track it won't have to be done again next time */
      hcryp->KeyIVConfig = 1U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	661a      	str	r2, [r3, #96]	@ 0x60
      hcryp->SizesSum = hcryp->Size; /* Merely store payload length */
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	665a      	str	r2, [r3, #100]	@ 0x64
 8002efe:	e005      	b.n	8002f0c <CRYP_AESCCM_Process+0x60>
    }
  }
  else
  {
    hcryp->SizesSum = hcryp->Size;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8002f06:	461a      	mov	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  if (dokeyivconfig == 1U)
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 80bb 	bne.w	800308a <CRYP_AESCCM_Process+0x1de>
  {
    /*  Reset CrypHeaderCount */
    hcryp->CrypHeaderCount = 0U;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /********************** Init phase ******************************************/

    CRYP_SET_PHASE(hcryp, CRYP_PHASE_INIT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002f2a:	601a      	str	r2, [r3, #0]
    /* Set the Key */
    if (hcryp->Init.KeyIVConfigSkip != CRYP_KEYNOCONFIG)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d059      	beq.n	8002fe8 <CRYP_AESCCM_Process+0x13c>
    {
      if (hcryp->Instance == AES)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a98      	ldr	r2, [pc, #608]	@ (800319c <CRYP_AESCCM_Process+0x2f0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d114      	bne.n	8002f68 <CRYP_AESCCM_Process+0xbc>
      {
        if (hcryp->Init.KeyMode != CRYP_KEYMODE_SHARED)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f46:	d006      	beq.n	8002f56 <CRYP_AESCCM_Process+0xaa>
        {
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fd42 	bl	80029d8 <CRYP_SetKey>
 8002f54:	e048      	b.n	8002fe8 <CRYP_AESCCM_Process+0x13c>
        }
        else /*after sharing the key, AES should set KMOD[1:0] to 00.*/
        {
          hcryp->Instance->CR &=  ~CRYP_KEYMODE_SHARED;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	e03f      	b.n	8002fe8 <CRYP_AESCCM_Process+0x13c>
        }
      }
      else /*SAES*/
      {
        /* We should re-write Key, in the case where we change key after first operation */
        if ((hcryp->Init.KeySelect == CRYP_KEYSEL_NORMAL) && (hcryp->Init.KeyMode == CRYP_KEYMODE_NORMAL))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <CRYP_AESCCM_Process+0xd8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <CRYP_AESCCM_Process+0xd8>
        {
          /* Set the Key */
          CRYP_SetKey(hcryp, hcryp->Init.KeySize);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fd2a 	bl	80029d8 <CRYP_SetKey>
        }
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fc30 	bl	80017e8 <HAL_GetTick>
 8002f88:	61f8      	str	r0, [r7, #28]

        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8002f8a:	e026      	b.n	8002fda <CRYP_AESCCM_Process+0x12e>
        {
          /* Check for the Timeout */
          if (Timeout != HAL_MAX_DELAY)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d022      	beq.n	8002fda <CRYP_AESCCM_Process+0x12e>
          {
            if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f94:	f7fe fc28 	bl	80017e8 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d302      	bcc.n	8002faa <CRYP_AESCCM_Process+0xfe>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d117      	bne.n	8002fda <CRYP_AESCCM_Process+0x12e>
            {
              /* Disable the CRYP peripheral clock */
              __HAL_CRYP_DISABLE(hcryp);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f022 0201 	bic.w	r2, r2, #1
 8002fb8:	601a      	str	r2, [r3, #0]

              /* Change state */
              hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbe:	f043 0210 	orr.w	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
              hcryp->State = HAL_CRYP_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
              __HAL_UNLOCK(hcryp);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
              return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e15a      	b.n	8003290 <CRYP_AESCCM_Process+0x3e4>
        while (HAL_IS_BIT_CLR(hcryp->Instance->SR, CRYP_FLAG_KEYVALID))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0d1      	beq.n	8002f8c <CRYP_AESCCM_Process+0xe0>
          }
        }
      }
    }
    /* Set the initialization vector (IV) with B0 */
    hcryp->Instance->IVR3 = *(uint32_t *)(hcryp->Init.B0);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a1a      	ldr	r2, [r3, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcryp->Instance->IVR2 = *(uint32_t *)(hcryp->Init.B0 + 1U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1a      	ldr	r2, [r3, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6852      	ldr	r2, [r2, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	@ 0x28
    hcryp->Instance->IVR1 = *(uint32_t *)(hcryp->Init.B0 + 2U);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1a      	ldr	r2, [r3, #32]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6892      	ldr	r2, [r2, #8]
 800300a:	625a      	str	r2, [r3, #36]	@ 0x24
    hcryp->Instance->IVR0 = *(uint32_t *)(hcryp->Init.B0 + 3U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68d2      	ldr	r2, [r2, #12]
 8003016:	621a      	str	r2, [r3, #32]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003028:	6839      	ldr	r1, [r7, #0]
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 faea 	bl	8003604 <CRYP_WaitOnCCFlag>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <CRYP_AESCCM_Process+0x18e>
    {
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e12a      	b.n	8003290 <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    /************************ Header phase *************************************/
    /* Header block(B1) : associated data length expressed in bytes concatenated
    with Associated Data (A)*/
    if (CRYP_GCMCCM_SetHeaderPhase(hcryp,  Timeout) != HAL_OK)
 800304e:	6839      	ldr	r1, [r7, #0]
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f921 	bl	8003298 <CRYP_GCMCCM_SetHeaderPhase>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <CRYP_AESCCM_Process+0x1b4>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e117      	b.n	8003290 <CRYP_AESCCM_Process+0x3e4>
    }

    /*************************Payload phase ************************************/

    /* Set the phase */
    hcryp->Phase = CRYP_PHASE_PROCESS;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Select payload phase once the header phase is performed */
    MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, CRYP_PHASE_PAYLOAD);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003078:	601a      	str	r2, [r3, #0]

    /* Set to 0 the number of non-valid bytes using NPBLB register*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, 0U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003088:	601a      	str	r2, [r3, #0]

  } /* if (dokeyivconfig == 1U) */

  if ((hcryp->Size % 16U) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <CRYP_AESCCM_Process+0x1f6>
  {
    /* recalculate  wordsize */
    wordsize = ((wordsize / 4U) * 4U);
 800309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309c:	f023 0303 	bic.w	r3, r3, #3
 80030a0:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80030a2:	f7fe fba1 	bl	80017e8 <HAL_GetTick>
 80030a6:	61f8      	str	r0, [r7, #28]

  /* Write input data and get output data */
  incount = hcryp->CrypInCount;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  outcount = hcryp->CrypOutCount;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 80030bc:	e034      	b.n	8003128 <CRYP_AESCCM_Process+0x27c>
  {
    /* Write plain data and get cipher data */
    CRYP_AES_ProcessData(hcryp, Timeout);
 80030be:	6839      	ldr	r1, [r7, #0]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff fb41 	bl	8002748 <CRYP_AES_ProcessData>

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d022      	beq.n	8003114 <CRYP_AESCCM_Process+0x268>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fb8b 	bl	80017e8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <CRYP_AESCCM_Process+0x238>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d117      	bne.n	8003114 <CRYP_AESCCM_Process+0x268>
      {
        /* Disable the CRYP peripheral clock */
        __HAL_CRYP_DISABLE(hcryp);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f022 0201 	bic.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Change state */
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0bd      	b.n	8003290 <CRYP_AESCCM_Process+0x3e4>
      }
    }
    incount = hcryp->CrypInCount;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800311a:	b29b      	uxth	r3, r3
 800311c:	62bb      	str	r3, [r7, #40]	@ 0x28
    outcount = hcryp->CrypOutCount;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003124:	b29b      	uxth	r3, r3
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
  while ((incount < wordsize) && (outcount < wordsize))
 8003128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	429a      	cmp	r2, r3
 800312e:	d203      	bcs.n	8003138 <CRYP_AESCCM_Process+0x28c>
 8003130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	429a      	cmp	r2, r3
 8003136:	d3c2      	bcc.n	80030be <CRYP_AESCCM_Process+0x212>
  }

  if ((hcryp->Size % 16U) != 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	b29b      	uxth	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a2 	beq.w	800328e <CRYP_AESCCM_Process+0x3e2>
  {
    /* Compute the number of padding bytes in last block of payload */
    npblb = ((((uint32_t)hcryp->Size / 16U) + 1U) * 16U) - ((uint32_t)hcryp->Size);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	b29b      	uxth	r3, r3
 8003154:	3301      	adds	r3, #1
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	61bb      	str	r3, [r7, #24]

    if ((hcryp->Instance->CR & AES_CR_MODE) == CRYP_OPERATINGMODE_DECRYPT)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0318 	and.w	r3, r3, #24
 800316c:	2b10      	cmp	r3, #16
 800316e:	d10a      	bne.n	8003186 <CRYP_AESCCM_Process+0x2da>
    {
      /* Set Npblb in case of AES CCM payload decryption to get right tag  */
      MODIFY_REG(hcryp->Instance->CR, AES_CR_NPBLB, npblb << 20);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	051a      	lsls	r2, r3, #20
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

    }
    /* Number of valid words (lastwordsize) in last block */
    if ((npblb % 4U) == 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d107      	bne.n	80031a0 <CRYP_AESCCM_Process+0x2f4>
    {
      lastwordsize = (16U - npblb) / 4U;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f1c3 0310 	rsb	r3, r3, #16
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800319a:	e007      	b.n	80031ac <CRYP_AESCCM_Process+0x300>
 800319c:	420c0000 	.word	0x420c0000
    }
    else
    {
      lastwordsize = ((16U - npblb) / 4U) + 1U;
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f1c3 0310 	rsb	r3, r3, #16
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Write the last input block in the IN FIFO */
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80031b0:	e017      	b.n	80031e2 <CRYP_AESCCM_Process+0x336>
    {
      hcryp->Instance->DINR  = *(uint32_t *)(hcryp->pCrypInBuffPtr + hcryp->CrypInCount);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031bc:	b29b      	uxth	r3, r3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	609a      	str	r2, [r3, #8]
      hcryp->CrypInCount++;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter ++)
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	3301      	adds	r3, #1
 80031e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3e3      	bcc.n	80031b2 <CRYP_AESCCM_Process+0x306>
    }

    /* Pad the data with zeros to have a complete block */
    while (loopcounter < 4U)
 80031ea:	e006      	b.n	80031fa <CRYP_AESCCM_Process+0x34e>
    {
      hcryp->Instance->DINR  = 0U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
      loopcounter++;
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	3301      	adds	r3, #1
 80031f8:	633b      	str	r3, [r7, #48]	@ 0x30
    while (loopcounter < 4U)
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d9f5      	bls.n	80031ec <CRYP_AESCCM_Process+0x340>
    }
    /* just wait for hash computation */
    if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9fe 	bl	8003604 <CRYP_WaitOnCCFlag>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <CRYP_AESCCM_Process+0x366>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e03e      	b.n	8003290 <CRYP_AESCCM_Process+0x3e4>
    }
    /* Clear CCF flag */
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308

    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 8003226:	2300      	movs	r3, #0
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
 800322a:	e00b      	b.n	8003244 <CRYP_AESCCM_Process+0x398>
    {
      /* Read the output block from the output FIFO and put them in temporary buffer then
         get CrypOutBuff from temporary buffer */
      temp[loopcounter] = hcryp->Instance->DOUTR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3338      	adds	r3, #56	@ 0x38
 8003238:	443b      	add	r3, r7
 800323a:	f843 2c30 	str.w	r2, [r3, #-48]
    for (loopcounter = 0U; loopcounter < 4U; loopcounter++)
 800323e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003240:	3301      	adds	r3, #1
 8003242:	633b      	str	r3, [r7, #48]	@ 0x30
 8003244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003246:	2b03      	cmp	r3, #3
 8003248:	d9f0      	bls.n	800322c <CRYP_AESCCM_Process+0x380>
    }
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 800324a:	2300      	movs	r3, #0
 800324c:	633b      	str	r3, [r7, #48]	@ 0x30
 800324e:	e01a      	b.n	8003286 <CRYP_AESCCM_Process+0x3da>
    {
      *(uint32_t *)(hcryp->pCrypOutBuffPtr + hcryp->CrypOutCount) = temp[loopcounter];
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800325a:	b29b      	uxth	r3, r3
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	3338      	adds	r3, #56	@ 0x38
 8003266:	443b      	add	r3, r7
 8003268:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800326c:	6013      	str	r3, [r2, #0]
      hcryp->CrypOutCount++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003274:	b29b      	uxth	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    for (loopcounter = 0U; loopcounter < lastwordsize; loopcounter++)
 8003280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003282:	3301      	adds	r3, #1
 8003284:	633b      	str	r3, [r7, #48]	@ 0x30
 8003286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	429a      	cmp	r2, r3
 800328c:	d3e0      	bcc.n	8003250 <CRYP_AESCCM_Process+0x3a4>
    }
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3738      	adds	r7, #56	@ 0x38
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <CRYP_GCMCCM_SetHeaderPhase>:
  *         the configuration information for CRYP module(Header & HeaderSize)
  * @param  Timeout Timeout value
  * @retval state
  */
static HAL_StatusTypeDef CRYP_GCMCCM_SetHeaderPhase(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b092      	sub	sp, #72	@ 0x48
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t loopcounter;
  uint32_t size_in_bytes;
  uint32_t tmp;
  const uint32_t mask[12] = {0x0U, 0xFF000000U, 0xFFFF0000U, 0xFFFFFF00U,  /* 32-bit data type */
 80032a2:	4b8e      	ldr	r3, [pc, #568]	@ (80034dc <CRYP_GCMCCM_SetHeaderPhase+0x244>)
 80032a4:	f107 040c 	add.w	r4, r7, #12
 80032a8:	461d      	mov	r5, r3
 80032aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80032b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                             0x0U, 0x0000FF00U, 0x0000FFFFU, 0xFF00FFFFU,  /* 16-bit data type */
                             0x0U, 0x000000FFU, 0x0000FFFFU, 0x00FFFFFFU
                            }; /*  8-bit data type */

  /***************************** Header phase for GCM/GMAC or CCM *********************************/
  if (hcryp->Init.HeaderWidthUnit == CRYP_HEADERWIDTHUNIT_WORD)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <CRYP_GCMCCM_SetHeaderPhase+0x34>
  {
    size_in_bytes = hcryp->Init.HeaderSize * 4U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ca:	e002      	b.n	80032d2 <CRYP_GCMCCM_SetHeaderPhase+0x3a>
  }
  else
  {
    size_in_bytes = hcryp->Init.HeaderSize;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	643b      	str	r3, [r7, #64]	@ 0x40
  }

  if ((size_in_bytes != 0U))
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 8172 	beq.w	80035be <CRYP_GCMCCM_SetHeaderPhase+0x326>
  {
    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032ec:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

    /* If size_in_bytes is a multiple of blocks (a multiple of four 32-bits words ) */
    if ((size_in_bytes % 16U) == 0U)
 80032fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	2b00      	cmp	r3, #0
 8003306:	d172      	bne.n	80033ee <CRYP_GCMCCM_SetHeaderPhase+0x156>
    {
      /*  No padding */
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 8003308:	2300      	movs	r3, #0
 800330a:	647b      	str	r3, [r7, #68]	@ 0x44
 800330c:	e069      	b.n	80033e2 <CRYP_GCMCCM_SetHeaderPhase+0x14a>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003318:	b29b      	uxth	r3, r3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	441a      	add	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800332c:	b29b      	uxth	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003342:	b29b      	uxth	r3, r3
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6812      	ldr	r2, [r2, #0]
 800334e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003356:	b29b      	uxth	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800336c:	b29b      	uxth	r3, r3
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	441a      	add	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003380:	b29b      	uxth	r3, r3
 8003382:	3301      	adds	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699a      	ldr	r2, [r3, #24]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003396:	b29b      	uxth	r3, r3
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	441a      	add	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 80033b6:	6839      	ldr	r1, [r7, #0]
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f923 	bl	8003604 <CRYP_WaitOnCCFlag>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <CRYP_GCMCCM_SetHeaderPhase+0x130>
        {
          return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e118      	b.n	80035fa <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < (size_in_bytes / 4U)); loopcounter += 4U)
 80033dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033de:	3304      	adds	r3, #4
 80033e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d390      	bcc.n	800330e <CRYP_GCMCCM_SetHeaderPhase+0x76>
 80033ec:	e104      	b.n	80035f8 <CRYP_GCMCCM_SetHeaderPhase+0x360>
      }
    }
    else
    {
      /* Write header block in the IN FIFO without last block */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80033ee:	2300      	movs	r3, #0
 80033f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80033f2:	e069      	b.n	80034c8 <CRYP_GCMCCM_SetHeaderPhase+0x230>
      {
        /* Write the input block in the data input register */
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80033fe:	b29b      	uxth	r3, r3
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003412:	b29b      	uxth	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	b29a      	uxth	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003428:	b29b      	uxth	r3, r3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	441a      	add	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800343c:	b29b      	uxth	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR  = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003452:	b29b      	uxth	r3, r3
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	441a      	add	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003466:	b29b      	uxth	r3, r3
 8003468:	3301      	adds	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800347c:	b29b      	uxth	r3, r3
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003490:	b29b      	uxth	r3, r3
 8003492:	3301      	adds	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

        if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8b0 	bl	8003604 <CRYP_WaitOnCCFlag>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <CRYP_GCMCCM_SetHeaderPhase+0x216>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a5      	b.n	80035fa <CRYP_GCMCCM_SetHeaderPhase+0x362>
        }
        /* Clear CCF flag */
        __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 16U) * 4U)); loopcounter += 4U)
 80034c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034c4:	3304      	adds	r3, #4
 80034c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d38f      	bcc.n	80033f4 <CRYP_GCMCCM_SetHeaderPhase+0x15c>
      }
      /* Write last complete words */
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034d8:	e01a      	b.n	8003510 <CRYP_GCMCCM_SetHeaderPhase+0x278>
 80034da:	bf00      	nop
 80034dc:	0800c164 	.word	0x0800c164
      {
        hcryp->Instance->DINR = *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	441a      	add	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	609a      	str	r2, [r3, #8]
        hcryp->CrypHeaderCount++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      for (loopcounter = 0U; (loopcounter < ((size_in_bytes / 4U) % 4U)); loopcounter++)
 800350a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800350c:	3301      	adds	r3, #1
 800350e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003512:	089b      	lsrs	r3, r3, #2
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800351a:	429a      	cmp	r2, r3
 800351c:	d3e0      	bcc.n	80034e0 <CRYP_GCMCCM_SetHeaderPhase+0x248>
      }
      /* If the header size is a multiple of words */
      if ((size_in_bytes % 4U) == 0U)
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <CRYP_GCMCCM_SetHeaderPhase+0x2a8>
      {
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003528:	e006      	b.n	8003538 <CRYP_GCMCCM_SetHeaderPhase+0x2a0>
        {
          hcryp->Instance->DINR = 0x0U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
          loopcounter++;
 8003532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003534:	3301      	adds	r3, #1
 8003536:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8003538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800353a:	2b03      	cmp	r3, #3
 800353c:	d9f5      	bls.n	800352a <CRYP_GCMCCM_SetHeaderPhase+0x292>
 800353e:	e02a      	b.n	8003596 <CRYP_GCMCCM_SetHeaderPhase+0x2fe>
        }
      }
      else
      {
        /* Enter last bytes, padded with zeros */
        tmp =  *(uint32_t *)(hcryp->Init.Header + hcryp->CrypHeaderCount);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800354a:	b29b      	uxth	r3, r3
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        tmp &= mask[(hcryp->Init.DataType * 2U) + (size_in_bytes % 4U)];
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	005a      	lsls	r2, r3, #1
 800355a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	3348      	adds	r3, #72	@ 0x48
 8003566:	443b      	add	r3, r7
 8003568:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800356c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800356e:	4013      	ands	r3, r2
 8003570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        hcryp->Instance->DINR = tmp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003578:	609a      	str	r2, [r3, #8]
        loopcounter++;
 800357a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800357c:	3301      	adds	r3, #1
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Pad the data with zeros to have a complete block */
        while (loopcounter < 4U)
 8003580:	e006      	b.n	8003590 <CRYP_GCMCCM_SetHeaderPhase+0x2f8>
        {
          hcryp->Instance->DINR = 0x0U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
          loopcounter++;
 800358a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358c:	3301      	adds	r3, #1
 800358e:	647b      	str	r3, [r7, #68]	@ 0x44
        while (loopcounter < 4U)
 8003590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003592:	2b03      	cmp	r3, #3
 8003594:	d9f5      	bls.n	8003582 <CRYP_GCMCCM_SetHeaderPhase+0x2ea>
        }
      }

      if (CRYP_WaitOnCCFlag(hcryp, Timeout) != HAL_OK)
 8003596:	6839      	ldr	r1, [r7, #0]
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f833 	bl	8003604 <CRYP_WaitOnCCFlag>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <CRYP_GCMCCM_SetHeaderPhase+0x310>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e028      	b.n	80035fa <CRYP_GCMCCM_SetHeaderPhase+0x362>
      }
      /* Clear CCF flag */
      __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CLEAR_CCF);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8d3 2308 	ldr.w	r2, [r3, #776]	@ 0x308
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0201 	orr.w	r2, r2, #1
 80035b8:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
 80035bc:	e01c      	b.n	80035f8 <CRYP_GCMCCM_SetHeaderPhase+0x360>
    }
  }
  else
  {
    /*Workaround 1: only AES, before re-enabling the peripheral, datatype can be configured.*/
    MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE, hcryp->Init.DataType);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f023 0106 	bic.w	r1, r3, #6
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

    /* Select header phase */
    CRYP_SET_PHASE(hcryp, CRYP_PHASE_HEADER);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e6:	601a      	str	r2, [r3, #0]

    /* Enable the CRYP peripheral */
    __HAL_CRYP_ENABLE(hcryp);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3748      	adds	r7, #72	@ 0x48
 80035fe:	46bd      	mov	sp, r7
 8003600:	bdb0      	pop	{r4, r5, r7, pc}
 8003602:	bf00      	nop

08003604 <CRYP_WaitOnCCFlag>:
  * @param  Timeout Timeout duration.
  * @note   This function can only be used in thread mode.
  * @retval HAL status
  */
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef *hcryp, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 800360e:	f7fe f8eb 	bl	80017e8 <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8003614:	e026      	b.n	8003664 <CRYP_WaitOnCCFlag+0x60>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d022      	beq.n	8003664 <CRYP_WaitOnCCFlag+0x60>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fe f8e3 	bl	80017e8 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <CRYP_WaitOnCCFlag+0x30>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d117      	bne.n	8003664 <CRYP_WaitOnCCFlag+0x60>
      {
        __HAL_CRYP_DISABLE(hcryp);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]
        hcryp->ErrorCode |= HAL_CRYP_ERROR_TIMEOUT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	f043 0210 	orr.w	r2, r3, #16
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hcryp->State = HAL_CRYP_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        __HAL_UNLOCK(hcryp);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e008      	b.n	8003676 <CRYP_WaitOnCCFlag+0x72>
  while (HAL_IS_BIT_CLR(hcryp->Instance->ISR, AES_ISR_CCF))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d3 3304 	ldr.w	r3, [r3, #772]	@ 0x304
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0d0      	beq.n	8003616 <CRYP_WaitOnCCFlag+0x12>
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800368e:	e142      	b.n	8003916 <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2101      	movs	r1, #1
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	4013      	ands	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 8134 	beq.w	8003910 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x38>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b12      	cmp	r3, #18
 80036b6:	d125      	bne.n	8003704 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4013      	ands	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 020f 	and.w	r2, r3, #15
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	08da      	lsrs	r2, r3, #3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3208      	adds	r2, #8
 80036fe:	6979      	ldr	r1, [r7, #20]
 8003700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	2203      	movs	r2, #3
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4013      	ands	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d00b      	beq.n	8003758 <HAL_GPIO_Init+0xd8>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d007      	beq.n	8003758 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800374c:	2b11      	cmp	r3, #17
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b12      	cmp	r3, #18
 8003756:	d130      	bne.n	80037ba <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	2203      	movs	r2, #3
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4013      	ands	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378e:	2201      	movs	r2, #1
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	4013      	ands	r3, r2
 800379c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	091b      	lsrs	r3, r3, #4
 80037a4:	f003 0201 	and.w	r2, r3, #1
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d109      	bne.n	80037da <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d11b      	bne.n	800380a <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d017      	beq.n	800380a <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4013      	ands	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d07c      	beq.n	8003910 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003816:	4a47      	ldr	r2, [pc, #284]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3318      	adds	r3, #24
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4013      	ands	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0a9a      	lsrs	r2, r3, #10
 800383e:	4b3e      	ldr	r3, [pc, #248]	@ (8003938 <HAL_GPIO_Init+0x2b8>)
 8003840:	4013      	ands	r3, r2
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	00d2      	lsls	r2, r2, #3
 800384a:	4093      	lsls	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003852:	4938      	ldr	r1, [pc, #224]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3318      	adds	r3, #24
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003860:	4b34      	ldr	r3, [pc, #208]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43db      	mvns	r3, r3
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003884:	4a2b      	ldr	r2, [pc, #172]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800388a:	4b2a      	ldr	r3, [pc, #168]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	43db      	mvns	r3, r3
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4013      	ands	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80038ae:	4a21      	ldr	r2, [pc, #132]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80038b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 80038b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80038da:	4a16      	ldr	r2, [pc, #88]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80038e2:	4b14      	ldr	r3, [pc, #80]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 80038e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4013      	ands	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003908:	4a0a      	ldr	r2, [pc, #40]	@ (8003934 <HAL_GPIO_Init+0x2b4>)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	3301      	adds	r3, #1
 8003914:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f aeb5 	bne.w	8003690 <HAL_GPIO_Init+0x10>
  }
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	44022000 	.word	0x44022000
 8003938:	002f7f7f 	.word	0x002f7f7f

0800393c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e02a      	b.n	80039a4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d106      	bne.n	8003968 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7fd f868 	bl	8000a38 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800397e:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	430b      	orrs	r3, r1
 800398a:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e015      	b.n	80039ea <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd f84c 	bl	8000a70 <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_HASH_Accumulate>:
  * @param  Timeout specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Accumulate(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                      uint32_t Timeout)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b086      	sub	sp, #24
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
 80039fe:	603b      	str	r3, [r7, #0]
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation and buffer length multiple of 4 */
  if ((hhash == NULL) || ((Size % 4U) != 0U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d004      	beq.n	8003a10 <HAL_HASH_Accumulate+0x1e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_HASH_Accumulate+0x22>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e055      	b.n	8003ac0 <HAL_HASH_Accumulate+0xce>
  }

  /* Check if peripheral is ready to start process or suspended  */
  temp_state = hhash->State;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a1a:	75fb      	strb	r3, [r7, #23]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003a1c:	7dfb      	ldrb	r3, [r7, #23]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d002      	beq.n	8003a28 <HAL_HASH_Accumulate+0x36>
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d14a      	bne.n	8003abe <HAL_HASH_Accumulate+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_HASH_Accumulate+0x44>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e044      	b.n	8003ac0 <HAL_HASH_Accumulate+0xce>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
    hhash->pHashInBuffPtr = pInBuffer;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	615a      	str	r2, [r3, #20]
    hhash->HashInCount =  0U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
    hhash->Size = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	621a      	str	r2, [r3, #32]

    if (hhash->Phase == HAL_HASH_PHASE_READY)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d113      	bne.n	8003a8a <HAL_HASH_Accumulate+0x98>
    {
      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a70:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0204 	orr.w	r2, r2, #4
 8003a80:	601a      	str	r2, [r3, #0]

      /* Set the phase */
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }
    HASH_WriteData(hhash, pInBuffer, Size);
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 f8eb 	bl	8003c6a <HASH_WriteData>

    /* Wait for BUSY flag to be cleared */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_BUSY, SET, Timeout) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2201      	movs	r2, #1
 8003a98:	2108      	movs	r1, #8
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 fc6e 	bl	800437c <HASH_WaitOnFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_HASH_Accumulate+0xb8>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00a      	b.n	8003ac0 <HAL_HASH_Accumulate+0xce>
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e000      	b.n	8003ac0 <HAL_HASH_Accumulate+0xce>
  }
  else
  {
    return HAL_BUSY;
 8003abe:	2302      	movs	r3, #2
  }
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_HASH_AccumulateLast>:
  * @param  Timeout specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_AccumulateLast(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                          uint8_t *const pOutBuffer, uint32_t Timeout)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d101      	bne.n	8003ae0 <HAL_HASH_AccumulateLast+0x18>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e0c0      	b.n	8003c62 <HAL_HASH_AccumulateLast+0x19a>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ae6:	75fb      	strb	r3, [r7, #23]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d003      	beq.n	8003af6 <HAL_HASH_AccumulateLast+0x2e>
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	f040 80b5 	bne.w	8003c60 <HAL_HASH_AccumulateLast+0x198>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_HASH_AccumulateLast+0x3c>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0ae      	b.n	8003c62 <HAL_HASH_AccumulateLast+0x19a>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
    hhash->pHashInBuffPtr = pInBuffer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	615a      	str	r2, [r3, #20]
    hhash->pHashOutBuffPtr = pOutBuffer;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	619a      	str	r2, [r3, #24]
    hhash->HashInCount =  0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
    hhash->Size = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	621a      	str	r2, [r3, #32]

    if (hhash->Phase == HAL_HASH_PHASE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d113      	bne.n	8003b5e <HAL_HASH_AccumulateLast+0x96>
    {
      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b44:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0204 	orr.w	r2, r2, #4
 8003b54:	601a      	str	r2, [r3, #0]

      /* Set the phase */
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }
    /* Configure the number of valid bits in last word of the message */
    MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f023 011f 	bic.w	r1, r3, #31
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	00da      	lsls	r2, r3, #3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]


    HASH_WriteData(hhash, pInBuffer, Size);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f874 	bl	8003c6a <HASH_WriteData>

    /* Start the message padding then the Digest calculation */
    SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b90:	609a      	str	r2, [r3, #8]

    /* Wait for digest calculation completion status(DCIS) flag to be set */
    if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	2200      	movs	r2, #0
 8003b96:	2102      	movs	r1, #2
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fbef 	bl	800437c <HASH_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_HASH_AccumulateLast+0xe0>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e05c      	b.n	8003c62 <HAL_HASH_AccumulateLast+0x19a>
    }
    /* Read the message digest */
    HASH_GetDigest(hhash, pOutBuffer, HASH_DIGEST_LENGTH(hhash));
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03d      	beq.n	8003c32 <HAL_HASH_AccumulateLast+0x16a>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bc0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bc4:	d033      	beq.n	8003c2e <HAL_HASH_AccumulateLast+0x166>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bd0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8003bd4:	d029      	beq.n	8003c2a <HAL_HASH_AccumulateLast+0x162>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003be0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003be4:	d01f      	beq.n	8003c26 <HAL_HASH_AccumulateLast+0x15e>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003bf0:	f5b3 1fd0 	cmp.w	r3, #1703936	@ 0x1a0000
 8003bf4:	d015      	beq.n	8003c22 <HAL_HASH_AccumulateLast+0x15a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c00:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003c04:	d00b      	beq.n	8003c1e <HAL_HASH_AccumulateLast+0x156>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003c10:	f5b3 1ff0 	cmp.w	r3, #1966080	@ 0x1e0000
 8003c14:	d101      	bne.n	8003c1a <HAL_HASH_AccumulateLast+0x152>
 8003c16:	2340      	movs	r3, #64	@ 0x40
 8003c18:	e00c      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c1a:	2314      	movs	r3, #20
 8003c1c:	e00a      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e008      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c22:	231c      	movs	r3, #28
 8003c24:	e006      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c26:	2330      	movs	r3, #48	@ 0x30
 8003c28:	e004      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c2a:	2320      	movs	r3, #32
 8003c2c:	e002      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c2e:	231c      	movs	r3, #28
 8003c30:	e000      	b.n	8003c34 <HAL_HASH_AccumulateLast+0x16c>
 8003c32:	2314      	movs	r3, #20
 8003c34:	461a      	mov	r2, r3
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f89f 	bl	8003d7c <HASH_GetDigest>

    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Reset HASH state machine */
    hhash->Phase = HAL_HASH_PHASE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    hhash->Accumulation = 0;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	e000      	b.n	8003c62 <HAL_HASH_AccumulateLast+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HASH_WriteData>:
  * @param  pInBuffer pointer to input buffer.
  * @param  Size the size of input buffer in bytes.
  * @retval HAL status
  */
static void HASH_WriteData(HASH_HandleTypeDef *hhash, const uint8_t *pInBuffer, uint32_t Size)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b089      	sub	sp, #36	@ 0x24
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	617b      	str	r3, [r7, #20]
  uint8_t tmp1;
  uint8_t tmp2;
  uint8_t tmp3;

  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	e010      	b.n	8003ca2 <HASH_WriteData+0x38>
  {
    /* Write input data 4 bytes at a time */
    hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
    inputaddr += 4U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	617b      	str	r3, [r7, #20]
    hhash->HashInCount += 4U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	1d1a      	adds	r2, r3, #4
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	61da      	str	r2, [r3, #28]
  for (buffercounter = 0U; buffercounter < (Size / 4U) ; buffercounter++)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d3e9      	bcc.n	8003c80 <HASH_WriteData+0x16>
  }

  if ((Size % 4U) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d05c      	beq.n	8003d70 <HASH_WriteData+0x106>
  {
    if (hhash->Init.DataType == HASH_HALFWORD_SWAP)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b10      	cmp	r3, #16
 8003cbc:	d115      	bne.n	8003cea <HASH_WriteData+0x80>
    {
      /* Write remaining input data */
      if ((Size % 4U) <= 2U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d804      	bhi.n	8003cd2 <HASH_WriteData+0x68>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	881a      	ldrh	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d144      	bne.n	8003d66 <HASH_WriteData+0xfc>
      {
        hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6812      	ldr	r2, [r2, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	e03d      	b.n	8003d66 <HASH_WriteData+0xfc>
      }
    }
    else if ((hhash->Init.DataType == HASH_BYTE_SWAP)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	2b20      	cmp	r3, #32
 8003cf0:	d003      	beq.n	8003cfa <HASH_WriteData+0x90>
             || (hhash->Init.DataType == HASH_BIT_SWAP))  /* byte swap or bit swap or */
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b30      	cmp	r3, #48	@ 0x30
 8003cf8:	d12f      	bne.n	8003d5a <HASH_WriteData+0xf0>
    {
      /* Write remaining input data */
      if ((Size % 4U) == 1U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d104      	bne.n	8003d0e <HASH_WriteData+0xa4>
      {
        hhash->Instance->DIN = (uint32_t) * (uint8_t *)inputaddr;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 2U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d104      	bne.n	8003d22 <HASH_WriteData+0xb8>
      {
        hhash->Instance->DIN = (uint32_t) * (uint16_t *)inputaddr;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	881a      	ldrh	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
      }
      if ((Size % 4U) == 3U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d11c      	bne.n	8003d66 <HASH_WriteData+0xfc>
      {
        tmp1 = *(uint8_t *)inputaddr;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	76fb      	strb	r3, [r7, #27]
        tmp2 = *(((uint8_t *)inputaddr) + 1U);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	3301      	adds	r3, #1
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	76bb      	strb	r3, [r7, #26]
        tmp3 = *(((uint8_t *)inputaddr) + 2U);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	767b      	strb	r3, [r7, #25]
        hhash->Instance->DIN = ((uint32_t)tmp1) | ((uint32_t)tmp2 << 8U) | ((uint32_t)tmp3 << 16U);
 8003d42:	7efa      	ldrb	r2, [r7, #27]
 8003d44:	7ebb      	ldrb	r3, [r7, #26]
 8003d46:	021b      	lsls	r3, r3, #8
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	7e7b      	ldrb	r3, [r7, #25]
 8003d4e:	041a      	lsls	r2, r3, #16
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
      if ((Size % 4U) == 3U)
 8003d58:	e005      	b.n	8003d66 <HASH_WriteData+0xfc>
      }
    }
    else
    {
      hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	605a      	str	r2, [r3, #4]
    }
    hhash->HashInCount += 4U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	61da      	str	r2, [r3, #28]
  }
}
 8003d70:	bf00      	nop
 8003d72:	3724      	adds	r7, #36	@ 0x24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(const HASH_HandleTypeDef *hhash, const uint8_t *pMsgDigest, uint8_t Size)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b0b7      	sub	sp, #220	@ 0xdc
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71fb      	strb	r3, [r7, #7]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  switch (Size)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	dc44      	bgt.n	8003e20 <HASH_GetDigest+0xa4>
 8003d96:	2b14      	cmp	r3, #20
 8003d98:	f2c0 82e7 	blt.w	800436a <HASH_GetDigest+0x5ee>
 8003d9c:	3b14      	subs	r3, #20
 8003d9e:	2b1c      	cmp	r3, #28
 8003da0:	f200 82e3 	bhi.w	800436a <HASH_GetDigest+0x5ee>
 8003da4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dac <HASH_GetDigest+0x30>)
 8003da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003daa:	bf00      	nop
 8003dac:	08003e29 	.word	0x08003e29
 8003db0:	0800436b 	.word	0x0800436b
 8003db4:	0800436b 	.word	0x0800436b
 8003db8:	0800436b 	.word	0x0800436b
 8003dbc:	0800436b 	.word	0x0800436b
 8003dc0:	0800436b 	.word	0x0800436b
 8003dc4:	0800436b 	.word	0x0800436b
 8003dc8:	0800436b 	.word	0x0800436b
 8003dcc:	08003ec1 	.word	0x08003ec1
 8003dd0:	0800436b 	.word	0x0800436b
 8003dd4:	0800436b 	.word	0x0800436b
 8003dd8:	0800436b 	.word	0x0800436b
 8003ddc:	08003f95 	.word	0x08003f95
 8003de0:	0800436b 	.word	0x0800436b
 8003de4:	0800436b 	.word	0x0800436b
 8003de8:	0800436b 	.word	0x0800436b
 8003dec:	0800436b 	.word	0x0800436b
 8003df0:	0800436b 	.word	0x0800436b
 8003df4:	0800436b 	.word	0x0800436b
 8003df8:	0800436b 	.word	0x0800436b
 8003dfc:	0800436b 	.word	0x0800436b
 8003e00:	0800436b 	.word	0x0800436b
 8003e04:	0800436b 	.word	0x0800436b
 8003e08:	0800436b 	.word	0x0800436b
 8003e0c:	0800436b 	.word	0x0800436b
 8003e10:	0800436b 	.word	0x0800436b
 8003e14:	0800436b 	.word	0x0800436b
 8003e18:	0800436b 	.word	0x0800436b
 8003e1c:	08004087 	.word	0x08004087
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	f000 81d1 	beq.w	80041c8 <HASH_GetDigest+0x44c>
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);

      break;
#endif /* defined(HASH_ALGOSELECTION_SHA512)*/
    default:
      break;
 8003e26:	e2a0      	b.n	800436a <HASH_GetDigest+0x5ee>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e32:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
  return __builtin_bswap32(value);
 8003e36:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e3a:	ba12      	rev	r2, r2
 8003e3c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e42:	3304      	adds	r3, #4
 8003e44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e52:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003e5a:	ba12      	rev	r2, r2
 8003e5c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e62:	3304      	adds	r3, #4
 8003e64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695a      	ldr	r2, [r3, #20]
 8003e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e72:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8003e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e7a:	ba12      	rev	r2, r2
 8003e7c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e82:	3304      	adds	r3, #4
 8003e84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e92:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8003e96:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003e9a:	ba12      	rev	r2, r2
 8003e9c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb2:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8003eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eba:	ba12      	rev	r2, r2
 8003ebc:	601a      	str	r2, [r3, #0]
      break;
 8003ebe:	e255      	b.n	800436c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ece:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003ed2:	ba12      	rev	r2, r2
 8003ed4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eda:	3304      	adds	r3, #4
 8003edc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ef2:	ba12      	rev	r2, r2
 8003ef4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003efa:	3304      	adds	r3, #4
 8003efc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f0a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f12:	ba12      	rev	r2, r2
 8003f14:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003f16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f2a:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f32:	ba12      	rev	r2, r2
 8003f34:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f4a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f52:	ba12      	rev	r2, r2
 8003f54:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003f56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8003f60:	4b98      	ldr	r3, [pc, #608]	@ (80041c4 <HASH_GetDigest+0x448>)
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f68:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8003f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f70:	ba12      	rev	r2, r2
 8003f72:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f78:	3304      	adds	r3, #4
 8003f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8003f7e:	4b91      	ldr	r3, [pc, #580]	@ (80041c4 <HASH_GetDigest+0x448>)
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f86:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003f8e:	ba12      	rev	r2, r2
 8003f90:	601a      	str	r2, [r3, #0]
      break;
 8003f92:	e1eb      	b.n	800436c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f9e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003fa2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003fa6:	ba12      	rev	r2, r2
 8003fa8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fae:	3304      	adds	r3, #4
 8003fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fbe:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003fc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003fc6:	ba12      	rev	r2, r2
 8003fc8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fce:	3304      	adds	r3, #4
 8003fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695a      	ldr	r2, [r3, #20]
 8003fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fde:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fe2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003fe6:	ba12      	rev	r2, r2
 8003fe8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8003fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fee:	3304      	adds	r3, #4
 8003ff0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699a      	ldr	r2, [r3, #24]
 8003ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004002:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004006:	ba12      	rev	r2, r2
 8004008:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800400a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800400e:	3304      	adds	r3, #4
 8004010:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800401e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004022:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004026:	ba12      	rev	r2, r2
 8004028:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800402a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800402e:	3304      	adds	r3, #4
 8004030:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004034:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403c:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8004040:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004044:	ba12      	rev	r2, r2
 8004046:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800404c:	3304      	adds	r3, #4
 800404e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 8004052:	4b5c      	ldr	r3, [pc, #368]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800405a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800405e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8004062:	ba12      	rev	r2, r2
 8004064:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800406a:	3304      	adds	r3, #4
 800406c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004070:	4b54      	ldr	r3, [pc, #336]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004078:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800407c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8004080:	ba12      	rev	r2, r2
 8004082:	601a      	str	r2, [r3, #0]
      break;
 8004084:	e172      	b.n	800436c <HASH_GetDigest+0x5f0>
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004090:	657a      	str	r2, [r7, #84]	@ 0x54
 8004092:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004094:	ba12      	rev	r2, r2
 8004096:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800409c:	3304      	adds	r3, #4
 800409e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040b0:	ba12      	rev	r2, r2
 80040b2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040b8:	3304      	adds	r3, #4
 80040ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80040ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80040cc:	ba12      	rev	r2, r2
 80040ce:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040d4:	3304      	adds	r3, #4
 80040d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040e4:	663a      	str	r2, [r7, #96]	@ 0x60
 80040e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040e8:	ba12      	rev	r2, r2
 80040ea:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80040ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040f0:	3304      	adds	r3, #4
 80040f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004100:	667a      	str	r2, [r7, #100]	@ 0x64
 8004102:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004104:	ba12      	rev	r2, r2
 8004106:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004108:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800410c:	3304      	adds	r3, #4
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004112:	4b2c      	ldr	r3, [pc, #176]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800411a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800411c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800411e:	ba12      	rev	r2, r2
 8004120:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004126:	3304      	adds	r3, #4
 8004128:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HASH_GetDigest+0x448>)
 800412e:	699a      	ldr	r2, [r3, #24]
 8004130:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004134:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004136:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004138:	ba12      	rev	r2, r2
 800413a:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800413c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004140:	3304      	adds	r3, #4
 8004142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004146:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004148:	69da      	ldr	r2, [r3, #28]
 800414a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414e:	673a      	str	r2, [r7, #112]	@ 0x70
 8004150:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004152:	ba12      	rev	r2, r2
 8004154:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800415a:	3304      	adds	r3, #4
 800415c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 8004160:	4b18      	ldr	r3, [pc, #96]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004162:	6a1a      	ldr	r2, [r3, #32]
 8004164:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004168:	677a      	str	r2, [r7, #116]	@ 0x74
 800416a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800416c:	ba12      	rev	r2, r2
 800416e:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004174:	3304      	adds	r3, #4
 8004176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 800417a:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <HASH_GetDigest+0x448>)
 800417c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004182:	67ba      	str	r2, [r7, #120]	@ 0x78
 8004184:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004186:	ba12      	rev	r2, r2
 8004188:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800418a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800418e:	3304      	adds	r3, #4
 8004190:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 8004194:	4b0b      	ldr	r3, [pc, #44]	@ (80041c4 <HASH_GetDigest+0x448>)
 8004196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004198:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800419c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800419e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80041a0:	ba12      	rev	r2, r2
 80041a2:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a8:	3304      	adds	r3, #4
 80041aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80041ae:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <HASH_GetDigest+0x448>)
 80041b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041be:	ba12      	rev	r2, r2
 80041c0:	601a      	str	r2, [r3, #0]
      break;
 80041c2:	e0d3      	b.n	800436c <HASH_GetDigest+0x5f0>
 80041c4:	420c0710 	.word	0x420c0710
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[0]);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041d2:	617a      	str	r2, [r7, #20]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	ba12      	rev	r2, r2
 80041d8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041de:	3304      	adds	r3, #4
 80041e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[1]);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041ee:	61ba      	str	r2, [r7, #24]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	ba12      	rev	r2, r2
 80041f4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80041f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041fa:	3304      	adds	r3, #4
 80041fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[2]);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800420a:	61fa      	str	r2, [r7, #28]
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	ba12      	rev	r2, r2
 8004210:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004216:	3304      	adds	r3, #4
 8004218:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[3]);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004226:	623a      	str	r2, [r7, #32]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	ba12      	rev	r2, r2
 800422c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800422e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004232:	3304      	adds	r3, #4
 8004234:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(hhash->Instance->HR[4]);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004242:	627a      	str	r2, [r7, #36]	@ 0x24
 8004244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004246:	ba12      	rev	r2, r2
 8004248:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800424a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800424e:	3304      	adds	r3, #4
 8004250:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 8004254:	4b48      	ldr	r3, [pc, #288]	@ (8004378 <HASH_GetDigest+0x5fc>)
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800425c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800425e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004260:	ba12      	rev	r2, r2
 8004262:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004268:	3304      	adds	r3, #4
 800426a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 800426e:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <HASH_GetDigest+0x5fc>)
 8004270:	699a      	ldr	r2, [r3, #24]
 8004272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427a:	ba12      	rev	r2, r2
 800427c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800427e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004282:	3304      	adds	r3, #4
 8004284:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 8004288:	4b3b      	ldr	r3, [pc, #236]	@ (8004378 <HASH_GetDigest+0x5fc>)
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004290:	633a      	str	r2, [r7, #48]	@ 0x30
 8004292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004294:	ba12      	rev	r2, r2
 8004296:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429c:	3304      	adds	r3, #4
 800429e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[8]);
 80042a2:	4b35      	ldr	r3, [pc, #212]	@ (8004378 <HASH_GetDigest+0x5fc>)
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042aa:	637a      	str	r2, [r7, #52]	@ 0x34
 80042ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042ae:	ba12      	rev	r2, r2
 80042b0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042b6:	3304      	adds	r3, #4
 80042b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[9]);
 80042bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004378 <HASH_GetDigest+0x5fc>)
 80042be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042c8:	ba12      	rev	r2, r2
 80042ca:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042d0:	3304      	adds	r3, #4
 80042d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[10]);
 80042d6:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <HASH_GetDigest+0x5fc>)
 80042d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042de:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80042e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e2:	ba12      	rev	r2, r2
 80042e4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 80042e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042ea:	3304      	adds	r3, #4
 80042ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[11]);
 80042f0:	4b21      	ldr	r3, [pc, #132]	@ (8004378 <HASH_GetDigest+0x5fc>)
 80042f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80042fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042fc:	ba12      	rev	r2, r2
 80042fe:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004300:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004304:	3304      	adds	r3, #4
 8004306:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[12]);
 800430a:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HASH_GetDigest+0x5fc>)
 800430c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004312:	647a      	str	r2, [r7, #68]	@ 0x44
 8004314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004316:	ba12      	rev	r2, r2
 8004318:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800431a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800431e:	3304      	adds	r3, #4
 8004320:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[13]);
 8004324:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HASH_GetDigest+0x5fc>)
 8004326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004328:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800432c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800432e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004330:	ba12      	rev	r2, r2
 8004332:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 8004334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004338:	3304      	adds	r3, #4
 800433a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[14]);
 800433e:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <HASH_GetDigest+0x5fc>)
 8004340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004346:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004348:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800434a:	ba12      	rev	r2, r2
 800434c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 800434e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004352:	3304      	adds	r3, #4
 8004354:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[15]);
 8004358:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <HASH_GetDigest+0x5fc>)
 800435a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004360:	653a      	str	r2, [r7, #80]	@ 0x50
 8004362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004364:	ba12      	rev	r2, r2
 8004366:	601a      	str	r2, [r3, #0]
      break;
 8004368:	e000      	b.n	800436c <HASH_GetDigest+0x5f0>
      break;
 800436a:	bf00      	nop
  }
}
 800436c:	bf00      	nop
 800436e:	37dc      	adds	r7, #220	@ 0xdc
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	420c0710 	.word	0x420c0710

0800437c <HASH_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7fd fa2c 	bl	80017e8 <HAL_GetTick>
 8004390:	6178      	str	r0, [r7, #20]

  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 8004392:	e01e      	b.n	80043d2 <HASH_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d01a      	beq.n	80043d2 <HASH_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800439c:	f7fd fa24 	bl	80017e8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <HASH_WaitOnFlagUntilTimeout+0x36>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HASH_WaitOnFlagUntilTimeout+0x56>
      {
        /* Set State to Ready to be able to restart later on */
        hhash->State  = HAL_HASH_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043be:	f043 0204 	orr.w	r2, r3, #4
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* Process Unlocked */
        __HAL_UNLOCK(hhash);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e01f      	b.n	8004412 <HASH_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_HASH_GET_FLAG(hhash, Flag) == Status)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d90c      	bls.n	80043f2 <HASH_WaitOnFlagUntilTimeout+0x76>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	e00b      	b.n	800440a <HASH_WaitOnFlagUntilTimeout+0x8e>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	68ba      	ldr	r2, [r7, #8]
 80043fe:	429a      	cmp	r2, r3
 8004400:	bf0c      	ite	eq
 8004402:	2301      	moveq	r3, #1
 8004404:	2300      	movne	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	429a      	cmp	r2, r3
 800440e:	d0c1      	beq.n	8004394 <HASH_WaitOnFlagUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_ICACHE_Enable+0x1c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a04      	ldr	r2, [pc, #16]	@ (8004438 <HAL_ICACHE_Enable+0x1c>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40030400 	.word	0x40030400

0800443c <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d044      	beq.n	80044d8 <HAL_PKA_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	791b      	ldrb	r3, [r3, #4]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fc fe29 	bl	80010b0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	711a      	strb	r2, [r3, #4]

    /* Get current tick */
    tickstart = HAL_GetTick();
 8004464:	f7fd f9c0 	bl	80017e8 <HAL_GetTick>
 8004468:	60b8      	str	r0, [r7, #8]

    /* Reset the control register and enable the PKA (wait the end of PKA RAM erase) */
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
 800446a:	e00e      	b.n	800448a <HAL_PKA_Init+0x4e>
    {
      hpka->Instance->CR = PKA_CR_EN;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
 8004474:	f7fd f9b8 	bl	80017e8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004482:	d902      	bls.n	800448a <HAL_PKA_Init+0x4e>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	73fb      	strb	r3, [r7, #15]
        break;
 8004488:	e006      	b.n	8004498 <HAL_PKA_Init+0x5c>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d1e9      	bne.n	800446c <HAL_PKA_Init+0x30>
      }
    }

    /* Get current tick */
    tickstart = HAL_GetTick();
 8004498:	f7fd f9a6 	bl	80017e8 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]

    /* Wait the INITOK flag Setting */
    if (PKA_WaitOnFlagUntilTimeout(hpka, PKA_SR_INITOK, RESET, tickstart, 5000) != HAL_OK)
 800449e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2200      	movs	r2, #0
 80044a8:	2101      	movs	r1, #1
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f81b 	bl	80044e6 <PKA_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_PKA_Init+0x7e>
    {
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e011      	b.n	80044de <HAL_PKA_Init+0xa2>
    }

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC | PKA_CLRFR_OPERRFC);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 1268 	orr.w	r2, r2, #3801088	@ 0x3a0000
 80044c8:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	711a      	strb	r2, [r3, #4]
 80044d6:	e001      	b.n	80044dc <HAL_PKA_Init+0xa0>
  }
  else
  {
    err = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <PKA_WaitOnFlagUntilTimeout>:
  * @param  Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef PKA_WaitOnFlagUntilTimeout(PKA_HandleTypeDef *hpka, uint32_t Flag, FlagStatus Status,
                                             uint32_t Tickstart, uint32_t Timeout)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	603b      	str	r3, [r7, #0]
 80044f2:	4613      	mov	r3, r2
 80044f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_PKA_GET_FLAG(hpka, Flag) == Status)
 80044f6:	e016      	b.n	8004526 <PKA_WaitOnFlagUntilTimeout+0x40>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d012      	beq.n	8004526 <PKA_WaitOnFlagUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fd f972 	bl	80017e8 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <PKA_WaitOnFlagUntilTimeout+0x30>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <PKA_WaitOnFlagUntilTimeout+0x40>
      {
        /* Set the state to ready */
        hpka->State = HAL_PKA_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	711a      	strb	r2, [r3, #4]

        /* Set the error code to timeout error */
        hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2204      	movs	r2, #4
 8004520:	609a      	str	r2, [r3, #8]

        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e00f      	b.n	8004546 <PKA_WaitOnFlagUntilTimeout+0x60>
  while (__HAL_PKA_GET_FLAG(hpka, Flag) == Status)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	429a      	cmp	r2, r3
 8004534:	bf0c      	ite	eq
 8004536:	2301      	moveq	r3, #1
 8004538:	2300      	movne	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	79fb      	ldrb	r3, [r7, #7]
 8004540:	429a      	cmp	r2, r3
 8004542:	d0d9      	beq.n	80044f8 <PKA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f000 bc28 	b.w	8004db4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004564:	4b94      	ldr	r3, [pc, #592]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 0318 	and.w	r3, r3, #24
 800456c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800456e:	4b92      	ldr	r3, [pc, #584]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05b      	beq.n	800463c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b08      	cmp	r3, #8
 8004588:	d005      	beq.n	8004596 <HAL_RCC_OscConfig+0x46>
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b18      	cmp	r3, #24
 800458e:	d114      	bne.n	80045ba <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d111      	bne.n	80045ba <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f000 bc08 	b.w	8004db4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80045a4:	4b84      	ldr	r3, [pc, #528]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	4981      	ldr	r1, [pc, #516]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80045b8:	e040      	b.n	800463c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d023      	beq.n	800460a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045c2:	4b7d      	ldr	r3, [pc, #500]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7c      	ldr	r2, [pc, #496]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fd f90b 	bl	80017e8 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80045d6:	f7fd f907 	bl	80017e8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e3e5      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80045e8:	4b73      	ldr	r3, [pc, #460]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80045f4:	4b70      	ldr	r3, [pc, #448]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	041b      	lsls	r3, r3, #16
 8004602:	496d      	ldr	r1, [pc, #436]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004604:	4313      	orrs	r3, r2
 8004606:	618b      	str	r3, [r1, #24]
 8004608:	e018      	b.n	800463c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800460a:	4b6b      	ldr	r3, [pc, #428]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6a      	ldr	r2, [pc, #424]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd f8e7 	bl	80017e8 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800461e:	f7fd f8e3 	bl	80017e8 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e3c1      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004630:	4b61      	ldr	r3, [pc, #388]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a0 	beq.w	800478a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b10      	cmp	r3, #16
 800464e:	d005      	beq.n	800465c <HAL_RCC_OscConfig+0x10c>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b18      	cmp	r3, #24
 8004654:	d109      	bne.n	800466a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d106      	bne.n	800466a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f040 8092 	bne.w	800478a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e3a4      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004672:	d106      	bne.n	8004682 <HAL_RCC_OscConfig+0x132>
 8004674:	4b50      	ldr	r3, [pc, #320]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a4f      	ldr	r2, [pc, #316]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800467a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e058      	b.n	8004734 <HAL_RCC_OscConfig+0x1e4>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d112      	bne.n	80046b0 <HAL_RCC_OscConfig+0x160>
 800468a:	4b4b      	ldr	r3, [pc, #300]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a4a      	ldr	r2, [pc, #296]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a47      	ldr	r2, [pc, #284]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800469c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a44      	ldr	r2, [pc, #272]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e041      	b.n	8004734 <HAL_RCC_OscConfig+0x1e4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046b8:	d112      	bne.n	80046e0 <HAL_RCC_OscConfig+0x190>
 80046ba:	4b3f      	ldr	r3, [pc, #252]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a3e      	ldr	r2, [pc, #248]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b3c      	ldr	r3, [pc, #240]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b39      	ldr	r3, [pc, #228]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a38      	ldr	r2, [pc, #224]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e029      	b.n	8004734 <HAL_RCC_OscConfig+0x1e4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80046e8:	d112      	bne.n	8004710 <HAL_RCC_OscConfig+0x1c0>
 80046ea:	4b33      	ldr	r3, [pc, #204]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	4b30      	ldr	r3, [pc, #192]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a2f      	ldr	r2, [pc, #188]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 80046fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4b2d      	ldr	r3, [pc, #180]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	e011      	b.n	8004734 <HAL_RCC_OscConfig+0x1e4>
 8004710:	4b29      	ldr	r3, [pc, #164]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a28      	ldr	r2, [pc, #160]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004716:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004722:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a22      	ldr	r2, [pc, #136]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 800472e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d013      	beq.n	8004764 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473c:	f7fd f854 	bl	80017e8 <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004744:	f7fd f850 	bl	80017e8 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	@ 0x64
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e32e      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004756:	4b18      	ldr	r3, [pc, #96]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x1f4>
 8004762:	e012      	b.n	800478a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd f840 	bl	80017e8 <HAL_GetTick>
 8004768:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800476c:	f7fd f83c 	bl	80017e8 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e31a      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800477e:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <HAL_RCC_OscConfig+0x268>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 809a 	beq.w	80048cc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_RCC_OscConfig+0x25a>
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2b18      	cmp	r3, #24
 80047a2:	d149      	bne.n	8004838 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d146      	bne.n	8004838 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d104      	bne.n	80047bc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e2fe      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
 80047b6:	bf00      	nop
 80047b8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80047c2:	4b9a      	ldr	r3, [pc, #616]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0218 	and.w	r2, r3, #24
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d014      	beq.n	80047fc <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80047d2:	4b96      	ldr	r3, [pc, #600]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 0218 	bic.w	r2, r3, #24
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	4993      	ldr	r1, [pc, #588]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80047e4:	f000 fdd0 	bl	8005388 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80047e8:	4b91      	ldr	r3, [pc, #580]	@ (8004a30 <HAL_RCC_OscConfig+0x4e0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7fc ff71 	bl	80016d4 <HAL_InitTick>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e2db      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc fff4 	bl	80017e8 <HAL_GetTick>
 8004800:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004804:	f7fc fff0 	bl	80017e8 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e2ce      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004816:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0f0      	beq.n	8004804 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004822:	4b82      	ldr	r3, [pc, #520]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	497e      	ldr	r1, [pc, #504]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004836:	e049      	b.n	80048cc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d02c      	beq.n	800489a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004840:	4b7a      	ldr	r3, [pc, #488]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 0218 	bic.w	r2, r3, #24
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	4977      	ldr	r1, [pc, #476]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004852:	4b76      	ldr	r3, [pc, #472]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a75      	ldr	r2, [pc, #468]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fc ffc3 	bl	80017e8 <HAL_GetTick>
 8004862:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004866:	f7fc ffbf 	bl	80017e8 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e29d      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004878:	4b6c      	ldr	r3, [pc, #432]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004884:	4b69      	ldr	r3, [pc, #420]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	041b      	lsls	r3, r3, #16
 8004892:	4966      	ldr	r1, [pc, #408]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004894:	4313      	orrs	r3, r2
 8004896:	610b      	str	r3, [r1, #16]
 8004898:	e018      	b.n	80048cc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b64      	ldr	r3, [pc, #400]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a63      	ldr	r2, [pc, #396]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fc ff9f 	bl	80017e8 <HAL_GetTick>
 80048aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80048ae:	f7fc ff9b 	bl	80017e8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e279      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048c0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d03c      	beq.n	8004952 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01c      	beq.n	800491a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e0:	4b52      	ldr	r3, [pc, #328]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80048e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e6:	4a51      	ldr	r2, [pc, #324]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80048e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fc ff7a 	bl	80017e8 <HAL_GetTick>
 80048f4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80048f8:	f7fc ff76 	bl	80017e8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e254      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800490a:	4b48      	ldr	r3, [pc, #288]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 800490c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d0ef      	beq.n	80048f8 <HAL_RCC_OscConfig+0x3a8>
 8004918:	e01b      	b.n	8004952 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491a:	4b44      	ldr	r3, [pc, #272]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 800491c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004920:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004922:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fc ff5d 	bl	80017e8 <HAL_GetTick>
 800492e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004932:	f7fc ff59 	bl	80017e8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e237      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004944:	4b39      	ldr	r3, [pc, #228]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004946:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1ef      	bne.n	8004932 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0304 	and.w	r3, r3, #4
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80d2 	beq.w	8004b04 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004960:	4b34      	ldr	r3, [pc, #208]	@ (8004a34 <HAL_RCC_OscConfig+0x4e4>)
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d118      	bne.n	800499e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800496c:	4b31      	ldr	r3, [pc, #196]	@ (8004a34 <HAL_RCC_OscConfig+0x4e4>)
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	4a30      	ldr	r2, [pc, #192]	@ (8004a34 <HAL_RCC_OscConfig+0x4e4>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004978:	f7fc ff36 	bl	80017e8 <HAL_GetTick>
 800497c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004980:	f7fc ff32 	bl	80017e8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e210      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004992:	4b28      	ldr	r3, [pc, #160]	@ (8004a34 <HAL_RCC_OscConfig+0x4e4>)
 8004994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d108      	bne.n	80049b8 <HAL_RCC_OscConfig+0x468>
 80049a6:	4b21      	ldr	r3, [pc, #132]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049ac:	4a1f      	ldr	r2, [pc, #124]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049b6:	e074      	b.n	8004aa2 <HAL_RCC_OscConfig+0x552>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d118      	bne.n	80049f2 <HAL_RCC_OscConfig+0x4a2>
 80049c0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049c6:	4a19      	ldr	r2, [pc, #100]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049d0:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049d6:	4a15      	ldr	r2, [pc, #84]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049e0:	4b12      	ldr	r3, [pc, #72]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049e6:	4a11      	ldr	r2, [pc, #68]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049f0:	e057      	b.n	8004aa2 <HAL_RCC_OscConfig+0x552>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d11e      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4e8>
 80049fa:	4b0c      	ldr	r3, [pc, #48]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 80049fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a00:	4a0a      	ldr	r2, [pc, #40]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004a02:	f043 0304 	orr.w	r3, r3, #4
 8004a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a0a:	4b08      	ldr	r3, [pc, #32]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a10:	4a06      	ldr	r2, [pc, #24]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a1a:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a20:	4a02      	ldr	r2, [pc, #8]	@ (8004a2c <HAL_RCC_OscConfig+0x4dc>)
 8004a22:	f043 0301 	orr.w	r3, r3, #1
 8004a26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a2a:	e03a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x552>
 8004a2c:	44020c00 	.word	0x44020c00
 8004a30:	20000054 	.word	0x20000054
 8004a34:	44020800 	.word	0x44020800
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b85      	cmp	r3, #133	@ 0x85
 8004a3e:	d118      	bne.n	8004a72 <HAL_RCC_OscConfig+0x522>
 8004a40:	4ba2      	ldr	r3, [pc, #648]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a46:	4aa1      	ldr	r2, [pc, #644]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a50:	4b9e      	ldr	r3, [pc, #632]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a56:	4a9d      	ldr	r2, [pc, #628]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a60:	4b9a      	ldr	r3, [pc, #616]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a66:	4a99      	ldr	r2, [pc, #612]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a70:	e017      	b.n	8004aa2 <HAL_RCC_OscConfig+0x552>
 8004a72:	4b96      	ldr	r3, [pc, #600]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a78:	4a94      	ldr	r2, [pc, #592]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a7a:	f023 0301 	bic.w	r3, r3, #1
 8004a7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a82:	4b92      	ldr	r3, [pc, #584]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a88:	4a90      	ldr	r2, [pc, #576]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a8a:	f023 0304 	bic.w	r3, r3, #4
 8004a8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004a92:	4b8e      	ldr	r3, [pc, #568]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a98:	4a8c      	ldr	r2, [pc, #560]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aaa:	f7fc fe9d 	bl	80017e8 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab2:	f7fc fe99 	bl	80017e8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e175      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac8:	4b80      	ldr	r3, [pc, #512]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004aca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0ed      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x562>
 8004ad6:	e015      	b.n	8004b04 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad8:	f7fc fe86 	bl	80017e8 <HAL_GetTick>
 8004adc:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ade:	e00a      	b.n	8004af6 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae0:	f7fc fe82 	bl	80017e8 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e15e      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004af6:	4b75      	ldr	r3, [pc, #468]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004af8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ed      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d036      	beq.n	8004b7e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d019      	beq.n	8004b4c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b18:	4b6c      	ldr	r3, [pc, #432]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fc fe60 	bl	80017e8 <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004b2c:	f7fc fe5c 	bl	80017e8 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e13a      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004b3e:	4b63      	ldr	r3, [pc, #396]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x5dc>
 8004b4a:	e018      	b.n	8004b7e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b4c:	4b5f      	ldr	r3, [pc, #380]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a5e      	ldr	r2, [pc, #376]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b58:	f7fc fe46 	bl	80017e8 <HAL_GetTick>
 8004b5c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004b60:	f7fc fe42 	bl	80017e8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e120      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004b72:	4b56      	ldr	r3, [pc, #344]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8115 	beq.w	8004db2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b18      	cmp	r3, #24
 8004b8c:	f000 80af 	beq.w	8004cee <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	f040 8086 	bne.w	8004ca6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a4b      	ldr	r2, [pc, #300]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fc fe1f 	bl	80017e8 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004bae:	f7fc fe1b 	bl	80017e8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0f9      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bc0:	4b42      	ldr	r3, [pc, #264]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004bd4:	f023 0303 	bic.w	r3, r3, #3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004be0:	0212      	lsls	r2, r2, #8
 8004be2:	430a      	orrs	r2, r1
 8004be4:	4939      	ldr	r1, [pc, #228]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	025b      	lsls	r3, r3, #9
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	3b01      	subs	r3, #1
 8004c06:	041b      	lsls	r3, r3, #16
 8004c08:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c12:	3b01      	subs	r3, #1
 8004c14:	061b      	lsls	r3, r3, #24
 8004c16:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c1a:	492c      	ldr	r1, [pc, #176]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004c20:	4b2a      	ldr	r3, [pc, #168]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c24:	4a29      	ldr	r2, [pc, #164]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c26:	f023 0310 	bic.w	r3, r3, #16
 8004c2a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c30:	4a26      	ldr	r2, [pc, #152]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004c36:	4b25      	ldr	r3, [pc, #148]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3a:	4a24      	ldr	r2, [pc, #144]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c3c:	f043 0310 	orr.w	r3, r3, #16
 8004c40:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004c42:	4b22      	ldr	r3, [pc, #136]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c46:	f023 020c 	bic.w	r2, r3, #12
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c4e:	491f      	ldr	r1, [pc, #124]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004c54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	f023 0220 	bic.w	r2, r3, #32
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c60:	491a      	ldr	r1, [pc, #104]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c66:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	4a18      	ldr	r2, [pc, #96]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c70:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004c72:	4b16      	ldr	r3, [pc, #88]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a15      	ldr	r2, [pc, #84]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fc fdb3 	bl	80017e8 <HAL_GetTick>
 8004c82:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004c86:	f7fc fdaf 	bl	80017e8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e08d      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x736>
 8004ca4:	e085      	b.n	8004db2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <HAL_RCC_OscConfig+0x77c>)
 8004cac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fc fd99 	bl	80017e8 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004cba:	f7fc fd95 	bl	80017e8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d903      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e073      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
 8004ccc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ee      	bne.n	8004cba <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004cdc:	4b37      	ldr	r3, [pc, #220]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	4a36      	ldr	r2, [pc, #216]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004ce2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	6293      	str	r3, [r2, #40]	@ 0x28
 8004cec:	e061      	b.n	8004db2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004cee:	4b33      	ldr	r3, [pc, #204]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004cf4:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf8:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d031      	beq.n	8004d66 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d12a      	bne.n	8004d66 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	0a1b      	lsrs	r3, r3, #8
 8004d14:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d122      	bne.n	8004d66 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d11a      	bne.n	8004d66 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	0a5b      	lsrs	r3, r3, #9
 8004d34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d111      	bne.n	8004d66 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d4e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d108      	bne.n	8004d66 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	0e1b      	lsrs	r3, r3, #24
 8004d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e024      	b.n	8004db4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d6a:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d01a      	beq.n	8004db2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	4a0e      	ldr	r2, [pc, #56]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fc fd2e 	bl	80017e8 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004d8e:	bf00      	nop
 8004d90:	f7fc fd2a 	bl	80017e8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d0f9      	beq.n	8004d90 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da0:	4a06      	ldr	r2, [pc, #24]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004da6:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	4a04      	ldr	r2, [pc, #16]	@ (8004dbc <HAL_RCC_OscConfig+0x86c>)
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	44020c00 	.word	0x44020c00

08004dc0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e19e      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b83      	ldr	r3, [pc, #524]	@ (8004fe4 <HAL_RCC_ClockConfig+0x224>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d910      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b80      	ldr	r3, [pc, #512]	@ (8004fe4 <HAL_RCC_ClockConfig+0x224>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	497e      	ldr	r1, [pc, #504]	@ (8004fe4 <HAL_RCC_ClockConfig+0x224>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b7c      	ldr	r3, [pc, #496]	@ (8004fe4 <HAL_RCC_ClockConfig+0x224>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e186      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d012      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695a      	ldr	r2, [r3, #20]
 8004e14:	4b74      	ldr	r3, [pc, #464]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d909      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004e22:	4b71      	ldr	r3, [pc, #452]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	021b      	lsls	r3, r3, #8
 8004e30:	496d      	ldr	r1, [pc, #436]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	4b68      	ldr	r3, [pc, #416]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d909      	bls.n	8004e68 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004e54:	4b64      	ldr	r3, [pc, #400]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	4961      	ldr	r1, [pc, #388]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0304 	and.w	r3, r3, #4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d908      	bls.n	8004e96 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004e84:	4b58      	ldr	r3, [pc, #352]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	4955      	ldr	r1, [pc, #340]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	4b50      	ldr	r3, [pc, #320]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d908      	bls.n	8004ec4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 020f 	bic.w	r2, r3, #15
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	494a      	ldr	r1, [pc, #296]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8093 	beq.w	8004ff8 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d107      	bne.n	8004eea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004eda:	4b43      	ldr	r3, [pc, #268]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d121      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e113      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d115      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e107      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004f0a:	4b37      	ldr	r3, [pc, #220]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e0fb      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f1a:	4b33      	ldr	r3, [pc, #204]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e0f3      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f023 0203 	bic.w	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	492c      	ldr	r1, [pc, #176]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3c:	f7fc fc54 	bl	80017e8 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d112      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4c:	f7fc fc4c 	bl	80017e8 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e0d7      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f62:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f003 0318 	and.w	r3, r3, #24
 8004f6a:	2b18      	cmp	r3, #24
 8004f6c:	d1ee      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x18c>
 8004f6e:	e043      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d112      	bne.n	8004f9e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f78:	e00a      	b.n	8004f90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7a:	f7fc fc35 	bl	80017e8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d901      	bls.n	8004f90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e0c0      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f90:	4b15      	ldr	r3, [pc, #84]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0318 	and.w	r3, r3, #24
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d1ee      	bne.n	8004f7a <HAL_RCC_ClockConfig+0x1ba>
 8004f9c:	e02c      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d122      	bne.n	8004fec <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fc fc1e 	bl	80017e8 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e0a9      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_RCC_ClockConfig+0x228>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0318 	and.w	r3, r3, #24
 8004fc6:	2b08      	cmp	r3, #8
 8004fc8:	d1ee      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x1e8>
 8004fca:	e015      	b.n	8004ff8 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fc fc0c 	bl	80017e8 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d906      	bls.n	8004fec <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e097      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
 8004fe2:	bf00      	nop
 8004fe4:	40022000 	.word	0x40022000
 8004fe8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fec:	4b4b      	ldr	r3, [pc, #300]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f003 0318 	and.w	r3, r3, #24
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e9      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	4b44      	ldr	r3, [pc, #272]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	429a      	cmp	r2, r3
 8005012:	d208      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005014:	4b41      	ldr	r3, [pc, #260]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f023 020f 	bic.w	r2, r3, #15
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	493e      	ldr	r1, [pc, #248]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005026:	4b3e      	ldr	r3, [pc, #248]	@ (8005120 <HAL_RCC_ClockConfig+0x360>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d210      	bcs.n	8005056 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005034:	4b3a      	ldr	r3, [pc, #232]	@ (8005120 <HAL_RCC_ClockConfig+0x360>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f023 020f 	bic.w	r2, r3, #15
 800503c:	4938      	ldr	r1, [pc, #224]	@ (8005120 <HAL_RCC_ClockConfig+0x360>)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005044:	4b36      	ldr	r3, [pc, #216]	@ (8005120 <HAL_RCC_ClockConfig+0x360>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d001      	beq.n	8005056 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e05d      	b.n	8005112 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	4b2d      	ldr	r3, [pc, #180]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d208      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005072:	4b2a      	ldr	r3, [pc, #168]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	4927      	ldr	r1, [pc, #156]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005080:	4313      	orrs	r3, r2
 8005082:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d012      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	4b21      	ldr	r3, [pc, #132]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800509e:	429a      	cmp	r2, r3
 80050a0:	d209      	bcs.n	80050b6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80050a2:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	491a      	ldr	r1, [pc, #104]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d012      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	4b15      	ldr	r3, [pc, #84]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	0a1b      	lsrs	r3, r3, #8
 80050cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d209      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	490e      	ldr	r1, [pc, #56]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050e8:	f000 f822 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <HAL_RCC_ClockConfig+0x35c>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	490b      	ldr	r1, [pc, #44]	@ (8005124 <HAL_RCC_ClockConfig+0x364>)
 80050f8:	5ccb      	ldrb	r3, [r1, r3]
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005128 <HAL_RCC_ClockConfig+0x368>)
 8005100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005102:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <HAL_RCC_ClockConfig+0x36c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7fc fae4 	bl	80016d4 <HAL_InitTick>
 800510c:	4603      	mov	r3, r0
 800510e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005110:	7afb      	ldrb	r3, [r7, #11]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	44020c00 	.word	0x44020c00
 8005120:	40022000 	.word	0x40022000
 8005124:	0800c194 	.word	0x0800c194
 8005128:	20000050 	.word	0x20000050
 800512c:	20000054 	.word	0x20000054

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	b480      	push	{r7}
 8005132:	b089      	sub	sp, #36	@ 0x24
 8005134:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005136:	4b8c      	ldr	r3, [pc, #560]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f003 0318 	and.w	r3, r3, #24
 800513e:	2b08      	cmp	r3, #8
 8005140:	d102      	bne.n	8005148 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005142:	4b8a      	ldr	r3, [pc, #552]	@ (800536c <HAL_RCC_GetSysClockFreq+0x23c>)
 8005144:	61fb      	str	r3, [r7, #28]
 8005146:	e107      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005148:	4b87      	ldr	r3, [pc, #540]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 800514a:	69db      	ldr	r3, [r3, #28]
 800514c:	f003 0318 	and.w	r3, r3, #24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d112      	bne.n	800517a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005154:	4b84      	ldr	r3, [pc, #528]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0320 	and.w	r3, r3, #32
 800515c:	2b00      	cmp	r3, #0
 800515e:	d009      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005160:	4b81      	ldr	r3, [pc, #516]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	4a81      	ldr	r2, [pc, #516]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x240>)
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	e0f1      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005174:	4b7e      	ldr	r3, [pc, #504]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x240>)
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	e0ee      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800517a:	4b7b      	ldr	r3, [pc, #492]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0318 	and.w	r3, r3, #24
 8005182:	2b10      	cmp	r3, #16
 8005184:	d102      	bne.n	800518c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005186:	4b7b      	ldr	r3, [pc, #492]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x244>)
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	e0e5      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800518c:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f003 0318 	and.w	r3, r3, #24
 8005194:	2b18      	cmp	r3, #24
 8005196:	f040 80dd 	bne.w	8005354 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800519a:	4b73      	ldr	r3, [pc, #460]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519e:	f003 0303 	and.w	r3, r3, #3
 80051a2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80051a4:	4b70      	ldr	r3, [pc, #448]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051ae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80051b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80051bc:	4b6a      	ldr	r3, [pc, #424]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80051c0:	08db      	lsrs	r3, r3, #3
 80051c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80b7 	beq.w	800534e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d003      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0xbe>
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d056      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x16a>
 80051ec:	e077      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80051ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0320 	and.w	r3, r3, #32
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02d      	beq.n	8005256 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	08db      	lsrs	r3, r3, #3
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	4a5a      	ldr	r2, [pc, #360]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x240>)
 8005206:	fa22 f303 	lsr.w	r3, r2, r3
 800520a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005224:	4b50      	ldr	r3, [pc, #320]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 8005226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522c:	ee07 3a90 	vmov	s15, r3
 8005230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005234:	ed97 6a02 	vldr	s12, [r7, #8]
 8005238:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005378 <HAL_RCC_GetSysClockFreq+0x248>
 800523c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005244:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005248:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800524c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005250:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005254:	e065      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	ee07 3a90 	vmov	s15, r3
 800525c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005260:	eddf 6a46 	vldr	s13, [pc, #280]	@ 800537c <HAL_RCC_GetSysClockFreq+0x24c>
 8005264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005268:	4b3f      	ldr	r3, [pc, #252]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 800526a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005278:	ed97 6a02 	vldr	s12, [r7, #8]
 800527c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005378 <HAL_RCC_GetSysClockFreq+0x248>
 8005280:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005284:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800528c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005294:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005298:	e043      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005380 <HAL_RCC_GetSysClockFreq+0x250>
 80052a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ac:	4b2e      	ldr	r3, [pc, #184]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80052c0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005378 <HAL_RCC_GetSysClockFreq+0x248>
 80052c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80052cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80052dc:	e021      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005384 <HAL_RCC_GetSysClockFreq+0x254>
 80052ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 80052f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f8:	ee07 3a90 	vmov	s15, r3
 80052fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005300:	ed97 6a02 	vldr	s12, [r7, #8]
 8005304:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005378 <HAL_RCC_GetSysClockFreq+0x248>
 8005308:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800530c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005310:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005314:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005320:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005322:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <HAL_RCC_GetSysClockFreq+0x238>)
 8005324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005326:	0a5b      	lsrs	r3, r3, #9
 8005328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800532c:	3301      	adds	r3, #1
 800532e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800533a:	edd7 6a06 	vldr	s13, [r7, #24]
 800533e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005346:	ee17 3a90 	vmov	r3, s15
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	e004      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	e001      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005354:	4b06      	ldr	r3, [pc, #24]	@ (8005370 <HAL_RCC_GetSysClockFreq+0x240>)
 8005356:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005358:	69fb      	ldr	r3, [r7, #28]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	@ 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	44020c00 	.word	0x44020c00
 800536c:	003d0900 	.word	0x003d0900
 8005370:	03d09000 	.word	0x03d09000
 8005374:	017d7840 	.word	0x017d7840
 8005378:	46000000 	.word	0x46000000
 800537c:	4c742400 	.word	0x4c742400
 8005380:	4bbebc20 	.word	0x4bbebc20
 8005384:	4a742400 	.word	0x4a742400

08005388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800538c:	f7ff fed0 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b08      	ldr	r3, [pc, #32]	@ (80053b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005396:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800539a:	4907      	ldr	r1, [pc, #28]	@ (80053b8 <HAL_RCC_GetHCLKFreq+0x30>)
 800539c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800539e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80053a2:	fa22 f303 	lsr.w	r3, r2, r3
 80053a6:	4a05      	ldr	r2, [pc, #20]	@ (80053bc <HAL_RCC_GetHCLKFreq+0x34>)
 80053a8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80053aa:	4b04      	ldr	r3, [pc, #16]	@ (80053bc <HAL_RCC_GetHCLKFreq+0x34>)
 80053ac:	681b      	ldr	r3, [r3, #0]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	44020c00 	.word	0x44020c00
 80053b8:	0800c194 	.word	0x0800c194
 80053bc:	20000050 	.word	0x20000050

080053c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80053c4:	f7ff ffe0 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b06      	ldr	r3, [pc, #24]	@ (80053e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	4904      	ldr	r1, [pc, #16]	@ (80053e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	44020c00 	.word	0x44020c00
 80053e8:	0800c1a4 	.word	0x0800c1a4

080053ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80053f0:	f7ff ffca 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 80053f4:	4602      	mov	r2, r0
 80053f6:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 0307 	and.w	r3, r3, #7
 8005400:	4904      	ldr	r1, [pc, #16]	@ (8005414 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005402:	5ccb      	ldrb	r3, [r1, r3]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	44020c00 	.word	0x44020c00
 8005414:	0800c1a4 	.word	0x0800c1a4

08005418 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800541c:	f7ff ffb4 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_GetPCLK3Freq+0x24>)
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	0b1b      	lsrs	r3, r3, #12
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4904      	ldr	r1, [pc, #16]	@ (8005440 <HAL_RCC_GetPCLK3Freq+0x28>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	44020c00 	.word	0x44020c00
 8005440:	0800c1a4 	.word	0x0800c1a4

08005444 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005448:	b0d8      	sub	sp, #352	@ 0x160
 800544a:	af00      	add	r7, sp, #0
 800544c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005450:	2300      	movs	r3, #0
 8005452:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005456:	2300      	movs	r3, #0
 8005458:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800545c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005468:	2500      	movs	r5, #0
 800546a:	ea54 0305 	orrs.w	r3, r4, r5
 800546e:	d00b      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005470:	4bcd      	ldr	r3, [pc, #820]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005472:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005476:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 800547a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800547e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005480:	4ac9      	ldr	r2, [pc, #804]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005482:	430b      	orrs	r3, r1
 8005484:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005488:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f002 0801 	and.w	r8, r2, #1
 8005494:	f04f 0900 	mov.w	r9, #0
 8005498:	ea58 0309 	orrs.w	r3, r8, r9
 800549c:	d042      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800549e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d823      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054f9 	.word	0x080054f9
 80054c0:	080054f9 	.word	0x080054f9
 80054c4:	080054f9 	.word	0x080054f9
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054cc:	3308      	adds	r3, #8
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 fee0 	bl	800a294 <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80054da:	e00e      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80054dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054e0:	3330      	adds	r3, #48	@ 0x30
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 ff6e 	bl	800a3c4 <RCCEx_PLL3_Config>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80054ee:	e004      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80054f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10c      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005502:	4ba9      	ldr	r3, [pc, #676]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005508:	f023 0107 	bic.w	r1, r3, #7
 800550c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005512:	4aa5      	ldr	r2, [pc, #660]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005514:	430b      	orrs	r3, r1
 8005516:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005520:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005524:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 0a02 	and.w	sl, r2, #2
 8005530:	f04f 0b00 	mov.w	fp, #0
 8005534:	ea5a 030b 	orrs.w	r3, sl, fp
 8005538:	f000 8088 	beq.w	800564c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800553c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005542:	2b28      	cmp	r3, #40	@ 0x28
 8005544:	d868      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005621 	.word	0x08005621
 8005550:	08005619 	.word	0x08005619
 8005554:	08005619 	.word	0x08005619
 8005558:	08005619 	.word	0x08005619
 800555c:	08005619 	.word	0x08005619
 8005560:	08005619 	.word	0x08005619
 8005564:	08005619 	.word	0x08005619
 8005568:	08005619 	.word	0x08005619
 800556c:	080055f1 	.word	0x080055f1
 8005570:	08005619 	.word	0x08005619
 8005574:	08005619 	.word	0x08005619
 8005578:	08005619 	.word	0x08005619
 800557c:	08005619 	.word	0x08005619
 8005580:	08005619 	.word	0x08005619
 8005584:	08005619 	.word	0x08005619
 8005588:	08005619 	.word	0x08005619
 800558c:	08005605 	.word	0x08005605
 8005590:	08005619 	.word	0x08005619
 8005594:	08005619 	.word	0x08005619
 8005598:	08005619 	.word	0x08005619
 800559c:	08005619 	.word	0x08005619
 80055a0:	08005619 	.word	0x08005619
 80055a4:	08005619 	.word	0x08005619
 80055a8:	08005619 	.word	0x08005619
 80055ac:	08005621 	.word	0x08005621
 80055b0:	08005619 	.word	0x08005619
 80055b4:	08005619 	.word	0x08005619
 80055b8:	08005619 	.word	0x08005619
 80055bc:	08005619 	.word	0x08005619
 80055c0:	08005619 	.word	0x08005619
 80055c4:	08005619 	.word	0x08005619
 80055c8:	08005619 	.word	0x08005619
 80055cc:	08005621 	.word	0x08005621
 80055d0:	08005619 	.word	0x08005619
 80055d4:	08005619 	.word	0x08005619
 80055d8:	08005619 	.word	0x08005619
 80055dc:	08005619 	.word	0x08005619
 80055e0:	08005619 	.word	0x08005619
 80055e4:	08005619 	.word	0x08005619
 80055e8:	08005619 	.word	0x08005619
 80055ec:	08005621 	.word	0x08005621
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f4:	3308      	adds	r3, #8
 80055f6:	4618      	mov	r0, r3
 80055f8:	f004 fe4c 	bl	800a294 <RCCEx_PLL2_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005602:	e00e      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005604:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005608:	3330      	adds	r3, #48	@ 0x30
 800560a:	4618      	mov	r0, r3
 800560c:	f004 feda 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005616:	e004      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800561e:	e000      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005622:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800562a:	4b5f      	ldr	r3, [pc, #380]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800562c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005630:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005634:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005638:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563a:	4a5b      	ldr	r2, [pc, #364]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800563c:	430b      	orrs	r3, r1
 800563e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005642:	e003      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005648:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800564c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f002 0304 	and.w	r3, r2, #4
 8005658:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005662:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	d04e      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800566c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005670:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005672:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005676:	d02c      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005678:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800567c:	d825      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800567e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005682:	d028      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005684:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005688:	d81f      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800568a:	2bc0      	cmp	r3, #192	@ 0xc0
 800568c:	d025      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x296>
 800568e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005690:	d81b      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005692:	2b80      	cmp	r3, #128	@ 0x80
 8005694:	d00f      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005696:	2b80      	cmp	r3, #128	@ 0x80
 8005698:	d817      	bhi.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d01f      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800569e:	2b40      	cmp	r3, #64	@ 0x40
 80056a0:	d113      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a6:	3308      	adds	r3, #8
 80056a8:	4618      	mov	r0, r3
 80056aa:	f004 fdf3 	bl	800a294 <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80056b4:	e014      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ba:	3330      	adds	r3, #48	@ 0x30
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 fe81 	bl	800a3c4 <RCCEx_PLL3_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80056c8:	e00a      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056d0:	e006      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80056d2:	bf00      	nop
 80056d4:	e004      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80056d6:	bf00      	nop
 80056d8:	e002      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80056da:	bf00      	nop
 80056dc:	e000      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80056de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10c      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056e8:	4b2f      	ldr	r3, [pc, #188]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80056ee:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80056f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056f8:	4a2b      	ldr	r2, [pc, #172]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005706:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800570a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f002 0308 	and.w	r3, r2, #8
 8005716:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800571a:	2300      	movs	r3, #0
 800571c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005720:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005724:	460b      	mov	r3, r1
 8005726:	4313      	orrs	r3, r2
 8005728:	d056      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800572a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800572e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005730:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005734:	d031      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005736:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800573a:	d82a      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800573c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005740:	d02d      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005746:	d824      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005748:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800574c:	d029      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800574e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005752:	d81e      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005758:	d011      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800575a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800575e:	d818      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d023      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005768:	d113      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800576a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800576e:	3308      	adds	r3, #8
 8005770:	4618      	mov	r0, r3
 8005772:	f004 fd8f 	bl	800a294 <RCCEx_PLL2_Config>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800577c:	e017      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800577e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005782:	3330      	adds	r3, #48	@ 0x30
 8005784:	4618      	mov	r0, r3
 8005786:	f004 fe1d 	bl	800a3c4 <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005790:	e00d      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005798:	e009      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800579a:	bf00      	nop
 800579c:	e007      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800579e:	bf00      	nop
 80057a0:	e005      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80057a2:	bf00      	nop
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80057a6:	bf00      	nop
 80057a8:	44020c00 	.word	0x44020c00
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80057b6:	4bbb      	ldr	r3, [pc, #748]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057bc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80057c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057c6:	4ab7      	ldr	r2, [pc, #732]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057ce:	e003      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80057d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f002 0310 	and.w	r3, r2, #16
 80057e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80057ee:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d053      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80057f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057fe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005802:	d031      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005804:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005808:	d82a      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800580a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800580e:	d02d      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005810:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005814:	d824      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005816:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800581a:	d029      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800581c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005820:	d81e      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005826:	d011      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005828:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800582c:	d818      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d020      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005836:	d113      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800583c:	3308      	adds	r3, #8
 800583e:	4618      	mov	r0, r3
 8005840:	f004 fd28 	bl	800a294 <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800584a:	e014      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005850:	3330      	adds	r3, #48	@ 0x30
 8005852:	4618      	mov	r0, r3
 8005854:	f004 fdb6 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800585e:	e00a      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005868:	bf00      	nop
 800586a:	e004      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800586c:	bf00      	nop
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005870:	bf00      	nop
 8005872:	e000      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005876:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10c      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800587e:	4b89      	ldr	r3, [pc, #548]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005884:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005888:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800588c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800588e:	4a85      	ldr	r2, [pc, #532]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005890:	430b      	orrs	r3, r1
 8005892:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005896:	e003      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005898:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800589c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a8:	f002 0320 	and.w	r3, r2, #32
 80058ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80058b0:	2300      	movs	r3, #0
 80058b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80058b6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80058ba:	460b      	mov	r3, r1
 80058bc:	4313      	orrs	r3, r2
 80058be:	d053      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80058ca:	d031      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80058cc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80058d0:	d82a      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80058d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058d6:	d02d      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058dc:	d824      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80058de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80058e2:	d029      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80058e4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80058e8:	d81e      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80058ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058ee:	d011      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80058f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058f4:	d818      	bhi.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d020      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058fe:	d113      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005904:	3308      	adds	r3, #8
 8005906:	4618      	mov	r0, r3
 8005908:	f004 fcc4 	bl	800a294 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005912:	e014      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005914:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005918:	3330      	adds	r3, #48	@ 0x30
 800591a:	4618      	mov	r0, r3
 800591c:	f004 fd52 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005926:	e00a      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800592e:	e006      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005930:	bf00      	nop
 8005932:	e004      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005934:	bf00      	nop
 8005936:	e002      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800593c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800593e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10c      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005946:	4b57      	ldr	r3, [pc, #348]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005948:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800594c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005950:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	4a53      	ldr	r2, [pc, #332]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005958:	430b      	orrs	r3, r1
 800595a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800595e:	e003      	b.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005960:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005964:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005968:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005974:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800597e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005982:	460b      	mov	r3, r1
 8005984:	4313      	orrs	r3, r2
 8005986:	d053      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005992:	d031      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005994:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005998:	d82a      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800599a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800599e:	d02d      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80059a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a4:	d824      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059aa:	d029      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80059ac:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80059b0:	d81e      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059b6:	d011      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x598>
 80059b8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059bc:	d818      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d020      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80059c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059c6:	d113      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059cc:	3308      	adds	r3, #8
 80059ce:	4618      	mov	r0, r3
 80059d0:	f004 fc60 	bl	800a294 <RCCEx_PLL2_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80059da:	e014      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059e0:	3330      	adds	r3, #48	@ 0x30
 80059e2:	4618      	mov	r0, r3
 80059e4:	f004 fcee 	bl	800a3c4 <RCCEx_PLL3_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80059ee:	e00a      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059f6:	e006      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80059f8:	bf00      	nop
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80059fc:	bf00      	nop
 80059fe:	e002      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a00:	bf00      	nop
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005a0e:	4b25      	ldr	r3, [pc, #148]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a14:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	4a21      	ldr	r2, [pc, #132]	@ (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005a20:	430b      	orrs	r3, r1
 8005a22:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a26:	e003      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a2c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a38:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005a3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a46:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	d055      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a56:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a5a:	d033      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005a5c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005a60:	d82c      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a66:	d02f      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005a68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005a6c:	d826      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a72:	d02b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005a74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005a78:	d820      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a7e:	d013      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005a80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a84:	d81a      	bhi.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d022      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a8e:	d115      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a94:	3308      	adds	r3, #8
 8005a96:	4618      	mov	r0, r3
 8005a98:	f004 fbfc 	bl	800a294 <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005aa2:	e016      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005aa4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aac:	3330      	adds	r3, #48	@ 0x30
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f004 fc88 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ac2:	e006      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ac4:	bf00      	nop
 8005ac6:	e004      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ac8:	bf00      	nop
 8005aca:	e002      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005acc:	bf00      	nop
 8005ace:	e000      	b.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10c      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005ada:	4bbb      	ldr	r3, [pc, #748]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ae0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aea:	4ab7      	ldr	r2, [pc, #732]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005aec:	430b      	orrs	r3, r1
 8005aee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005af2:	e003      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005af8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005b08:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b12:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d053      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b26:	d031      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005b28:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b2c:	d82a      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b32:	d02d      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005b34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b38:	d824      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b3e:	d029      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005b40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b44:	d81e      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b4a:	d011      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b50:	d818      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b5a:	d113      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b60:	3308      	adds	r3, #8
 8005b62:	4618      	mov	r0, r3
 8005b64:	f004 fb96 	bl	800a294 <RCCEx_PLL2_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005b6e:	e014      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b74:	3330      	adds	r3, #48	@ 0x30
 8005b76:	4618      	mov	r0, r3
 8005b78:	f004 fc24 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005b82:	e00a      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b8a:	e006      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005b8c:	bf00      	nop
 8005b8e:	e004      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005b90:	bf00      	nop
 8005b92:	e002      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005b94:	bf00      	nop
 8005b96:	e000      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005ba2:	4b89      	ldr	r3, [pc, #548]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ba8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005bb2:	4a85      	ldr	r2, [pc, #532]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005bb4:	430b      	orrs	r3, r1
 8005bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005bba:	e003      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005bd0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005bda:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d055      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bec:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005bf0:	d031      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005bf2:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005bf6:	d82a      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfc:	d02d      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x816>
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c02:	d824      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c04:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c08:	d029      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005c0a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005c0e:	d81e      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c14:	d011      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005c16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1a:	d818      	bhi.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d020      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c24:	d113      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 fb31 	bl	800a294 <RCCEx_PLL2_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c38:	e014      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c3e:	3330      	adds	r3, #48	@ 0x30
 8005c40:	4618      	mov	r0, r3
 8005c42:	f004 fbbf 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c54:	e006      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c56:	bf00      	nop
 8005c58:	e004      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e002      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e000      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005c62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c64:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005c6c:	4b56      	ldr	r3, [pc, #344]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c72:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c7e:	4a52      	ldr	r2, [pc, #328]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005c80:	430b      	orrs	r3, r1
 8005c82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c86:	e003      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c88:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c8c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c98:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c9c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005ca6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005caa:	460b      	mov	r3, r1
 8005cac:	4313      	orrs	r3, r2
 8005cae:	d044      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cb8:	2b05      	cmp	r3, #5
 8005cba:	d823      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d0d 	.word	0x08005d0d
 8005cc8:	08005cdd 	.word	0x08005cdd
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005d0d 	.word	0x08005d0d
 8005cd4:	08005d0d 	.word	0x08005d0d
 8005cd8:	08005d0d 	.word	0x08005d0d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f004 fad6 	bl	800a294 <RCCEx_PLL2_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005cee:	e00e      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf4:	3330      	adds	r3, #48	@ 0x30
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f004 fb64 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005d02:	e004      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10d      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005d16:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d1c:	f023 0107 	bic.w	r1, r3, #7
 8005d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d28:	4a27      	ldr	r2, [pc, #156]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d30:	e003      	b.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d36:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005d46:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d50:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d54:	460b      	mov	r3, r1
 8005d56:	4313      	orrs	r3, r2
 8005d58:	d04f      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005d5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d62:	2b50      	cmp	r3, #80	@ 0x50
 8005d64:	d029      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005d66:	2b50      	cmp	r3, #80	@ 0x50
 8005d68:	d823      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d6a:	2b40      	cmp	r3, #64	@ 0x40
 8005d6c:	d027      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005d6e:	2b40      	cmp	r3, #64	@ 0x40
 8005d70:	d81f      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d72:	2b30      	cmp	r3, #48	@ 0x30
 8005d74:	d025      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005d76:	2b30      	cmp	r3, #48	@ 0x30
 8005d78:	d81b      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d00f      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d817      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d022      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d113      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d8e:	3308      	adds	r3, #8
 8005d90:	4618      	mov	r0, r3
 8005d92:	f004 fa7f 	bl	800a294 <RCCEx_PLL2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005d9c:	e017      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005da2:	3330      	adds	r3, #48	@ 0x30
 8005da4:	4618      	mov	r0, r3
 8005da6:	f004 fb0d 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005db0:	e00d      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005db8:	e009      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005dba:	bf00      	nop
 8005dbc:	e007      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005dbe:	bf00      	nop
 8005dc0:	e005      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005dc2:	bf00      	nop
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005dc6:	bf00      	nop
 8005dc8:	44020c00 	.word	0x44020c00
        break;
 8005dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005dd6:	4baf      	ldr	r3, [pc, #700]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005dd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ddc:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de8:	4aaa      	ldr	r2, [pc, #680]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005dea:	430b      	orrs	r3, r1
 8005dec:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005df6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005e06:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005e10:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4313      	orrs	r3, r2
 8005e18:	d055      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005e22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e26:	d031      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005e28:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005e2c:	d82a      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e32:	d02d      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005e34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e38:	d824      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e3e:	d029      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005e40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005e44:	d81e      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e4a:	d011      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005e4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e50:	d818      	bhi.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d020      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e5a:	d113      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e60:	3308      	adds	r3, #8
 8005e62:	4618      	mov	r0, r3
 8005e64:	f004 fa16 	bl	800a294 <RCCEx_PLL2_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005e6e:	e014      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e74:	3330      	adds	r3, #48	@ 0x30
 8005e76:	4618      	mov	r0, r3
 8005e78:	f004 faa4 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005e82:	e00a      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e8a:	e006      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005e8c:	bf00      	nop
 8005e8e:	e004      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005e90:	bf00      	nop
 8005e92:	e002      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005e94:	bf00      	nop
 8005e96:	e000      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ea8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005eac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005eb4:	4a77      	ldr	r2, [pc, #476]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ebc:	e003      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ec2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005edc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	d03d      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef2:	d01b      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005ef4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ef8:	d814      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005efa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005efe:	d017      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005f00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f04:	d80e      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d014      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f0e:	d109      	bne.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f14:	3330      	adds	r3, #48	@ 0x30
 8005f16:	4618      	mov	r0, r3
 8005f18:	f004 fa54 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005f22:	e008      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f2a:	e004      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f2c:	bf00      	nop
 8005f2e:	e002      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f30:	bf00      	nop
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10d      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005f3e:	4b55      	ldr	r3, [pc, #340]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f44:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f50:	4a50      	ldr	r2, [pc, #320]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005f52:	430b      	orrs	r3, r1
 8005f54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f58:	e003      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	d03d      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f8a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f8e:	d01b      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005f90:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005f94:	d814      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005f96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005f9a:	d017      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005f9c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005fa0:	d80e      	bhi.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d014      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005fa6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005faa:	d109      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb0:	3330      	adds	r3, #48	@ 0x30
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f004 fa06 	bl	800a3c4 <RCCEx_PLL3_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005fc8:	bf00      	nop
 8005fca:	e002      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10d      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005fda:	4b2e      	ldr	r3, [pc, #184]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005fdc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005fe0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fec:	4a29      	ldr	r2, [pc, #164]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ffa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800600a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800600e:	2300      	movs	r3, #0
 8006010:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006014:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d040      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800601e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006026:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800602a:	d01b      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800602c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006030:	d814      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006036:	d017      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006038:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800603c:	d80e      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d014      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006046:	d109      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800604c:	3330      	adds	r3, #48	@ 0x30
 800604e:	4618      	mov	r0, r3
 8006050:	f004 f9b8 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800605a:	e008      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006062:	e004      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006064:	bf00      	nop
 8006066:	e002      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006068:	bf00      	nop
 800606a:	e000      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800606c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006076:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800607c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006080:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006088:	4a02      	ldr	r2, [pc, #8]	@ (8006094 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800608a:	430b      	orrs	r3, r1
 800608c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006090:	e006      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006092:	bf00      	nop
 8006094:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006098:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800609c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	2100      	movs	r1, #0
 80060aa:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80060ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80060b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4313      	orrs	r3, r2
 80060be:	d03d      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80060c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060cc:	d01b      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80060ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060d2:	d814      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80060d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060d8:	d017      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80060da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060de:	d80e      	bhi.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d014      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80060e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060e8:	d109      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ee:	3330      	adds	r3, #48	@ 0x30
 80060f0:	4618      	mov	r0, r3
 80060f2:	f004 f967 	bl	800a3c4 <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006104:	e004      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006106:	bf00      	nop
 8006108:	e002      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800610a:	bf00      	nop
 800610c:	e000      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800610e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006110:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10d      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006118:	4bbe      	ldr	r3, [pc, #760]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800611a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800611e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800612a:	4aba      	ldr	r2, [pc, #744]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800612c:	430b      	orrs	r3, r1
 800612e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006132:	e003      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006134:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006138:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800613c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006144:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800614c:	2300      	movs	r3, #0
 800614e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006152:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006156:	460b      	mov	r3, r1
 8006158:	4313      	orrs	r3, r2
 800615a:	d035      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800615c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006160:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006164:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006168:	d015      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800616a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800616e:	d80e      	bhi.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006178:	d109      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800617a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800617e:	3330      	adds	r3, #48	@ 0x30
 8006180:	4618      	mov	r0, r3
 8006182:	f004 f91f 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006194:	e002      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006196:	bf00      	nop
 8006198:	e000      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800619a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10d      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80061a4:	4b9b      	ldr	r3, [pc, #620]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80061aa:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80061ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061b6:	4a97      	ldr	r2, [pc, #604]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061b8:	430b      	orrs	r3, r1
 80061ba:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80061be:	e003      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	2100      	movs	r1, #0
 80061d2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80061d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4313      	orrs	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80061e8:	4b8a      	ldr	r3, [pc, #552]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4a89      	ldr	r2, [pc, #548]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061f2:	61d3      	str	r3, [r2, #28]
 80061f4:	4b87      	ldr	r3, [pc, #540]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006200:	4a84      	ldr	r2, [pc, #528]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006202:	430b      	orrs	r3, r1
 8006204:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006206:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800620a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006212:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006216:	2300      	movs	r3, #0
 8006218:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800621c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006220:	460b      	mov	r3, r1
 8006222:	4313      	orrs	r3, r2
 8006224:	d055      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006226:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800622a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800622e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006232:	d031      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006234:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006238:	d82a      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800623a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800623e:	d02d      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d824      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624a:	d029      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800624c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006250:	d81e      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006256:	d011      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800625c:	d818      	bhi.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d020      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006266:	d113      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006268:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800626c:	3308      	adds	r3, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f004 f810 	bl	800a294 <RCCEx_PLL2_Config>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800627a:	e014      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800627c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006280:	3330      	adds	r3, #48	@ 0x30
 8006282:	4618      	mov	r0, r3
 8006284:	f004 f89e 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800628e:	e00a      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006296:	e006      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006298:	bf00      	nop
 800629a:	e004      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800629c:	bf00      	nop
 800629e:	e002      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062a0:	bf00      	nop
 80062a2:	e000      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80062a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10d      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80062ae:	4b59      	ldr	r3, [pc, #356]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80062b4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80062b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80062c0:	4a54      	ldr	r2, [pc, #336]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80062c8:	e003      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80062de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4313      	orrs	r3, r2
 80062f0:	d055      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80062f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80062fa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062fe:	d031      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006300:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006304:	d82a      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006306:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800630a:	d02d      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800630c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006310:	d824      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006312:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006316:	d029      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006318:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800631c:	d81e      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800631e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006322:	d011      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006328:	d818      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800632a:	2b00      	cmp	r3, #0
 800632c:	d020      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800632e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006332:	d113      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006334:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006338:	3308      	adds	r3, #8
 800633a:	4618      	mov	r0, r3
 800633c:	f003 ffaa 	bl	800a294 <RCCEx_PLL2_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006346:	e014      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006348:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800634c:	3330      	adds	r3, #48	@ 0x30
 800634e:	4618      	mov	r0, r3
 8006350:	f004 f838 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800635a:	e00a      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006362:	e006      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006372:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800637a:	4b26      	ldr	r3, [pc, #152]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800637c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006380:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006384:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800638c:	4a21      	ldr	r2, [pc, #132]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800638e:	430b      	orrs	r3, r1
 8006390:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006394:	e003      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006396:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800639a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800639e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	2100      	movs	r1, #0
 80063a8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80063b8:	460b      	mov	r3, r1
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d057      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80063be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063ca:	d033      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80063cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063d0:	d82c      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80063d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063d6:	d02f      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80063d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063dc:	d826      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80063de:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063e2:	d02b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80063e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80063e8:	d820      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80063ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063ee:	d013      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063f4:	d81a      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80063fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063fe:	d115      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006404:	3308      	adds	r3, #8
 8006406:	4618      	mov	r0, r3
 8006408:	f003 ff44 	bl	800a294 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006412:	e016      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006414:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006418:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800641c:	3330      	adds	r3, #48	@ 0x30
 800641e:	4618      	mov	r0, r3
 8006420:	f003 ffd0 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800642a:	e00a      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006432:	e006      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006434:	bf00      	nop
 8006436:	e004      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006438:	bf00      	nop
 800643a:	e002      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10d      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800644a:	4bbb      	ldr	r3, [pc, #748]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800644c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006450:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006454:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006458:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800645c:	4ab6      	ldr	r2, [pc, #728]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800645e:	430b      	orrs	r3, r1
 8006460:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006464:	e003      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800646a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800646e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	2100      	movs	r1, #0
 8006478:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800647c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006480:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006484:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006488:	460b      	mov	r3, r1
 800648a:	4313      	orrs	r3, r2
 800648c:	d055      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800648e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006496:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800649a:	d031      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800649c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80064a0:	d82a      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064a6:	d02d      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80064a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80064ac:	d824      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064b2:	d029      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80064b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064b8:	d81e      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064be:	d011      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80064c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064c4:	d818      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d020      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80064ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ce:	d113      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d4:	3308      	adds	r3, #8
 80064d6:	4618      	mov	r0, r3
 80064d8:	f003 fedc 	bl	800a294 <RCCEx_PLL2_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80064e2:	e014      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e8:	3330      	adds	r3, #48	@ 0x30
 80064ea:	4618      	mov	r0, r3
 80064ec:	f003 ff6a 	bl	800a3c4 <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80064f6:	e00a      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064fe:	e006      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006500:	bf00      	nop
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006516:	4b88      	ldr	r3, [pc, #544]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006518:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800651c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006524:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006528:	4a83      	ldr	r2, [pc, #524]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800652a:	430b      	orrs	r3, r1
 800652c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006530:	e003      	b.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006532:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006536:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800653a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	2100      	movs	r1, #0
 8006544:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800654c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006550:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006554:	460b      	mov	r3, r1
 8006556:	4313      	orrs	r3, r2
 8006558:	d055      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800655a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006562:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006566:	d031      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006568:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800656c:	d82a      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800656e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006572:	d02d      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8006574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006578:	d824      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800657a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800657e:	d029      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006580:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006584:	d81e      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800658a:	d011      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 800658c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006590:	d818      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d020      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8006596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800659a:	d113      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800659c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065a0:	3308      	adds	r3, #8
 80065a2:	4618      	mov	r0, r3
 80065a4:	f003 fe76 	bl	800a294 <RCCEx_PLL2_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80065ae:	e014      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b4:	3330      	adds	r3, #48	@ 0x30
 80065b6:	4618      	mov	r0, r3
 80065b8:	f003 ff04 	bl	800a3c4 <RCCEx_PLL3_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80065c2:	e00a      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065ca:	e006      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80065cc:	bf00      	nop
 80065ce:	e004      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80065d0:	bf00      	nop
 80065d2:	e002      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80065d4:	bf00      	nop
 80065d6:	e000      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80065d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80065e2:	4b55      	ldr	r3, [pc, #340]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80065e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80065e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80065ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065f4:	4a50      	ldr	r2, [pc, #320]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006602:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006606:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	2100      	movs	r1, #0
 8006610:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006618:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800661c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006620:	460b      	mov	r3, r1
 8006622:	4313      	orrs	r3, r2
 8006624:	d055      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800662a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800662e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006632:	d031      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006638:	d82a      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800663e:	d02d      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006644:	d824      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006646:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800664a:	d029      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800664c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006650:	d81e      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006656:	d011      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800665c:	d818      	bhi.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d020      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006666:	d113      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800666c:	3308      	adds	r3, #8
 800666e:	4618      	mov	r0, r3
 8006670:	f003 fe10 	bl	800a294 <RCCEx_PLL2_Config>
 8006674:	4603      	mov	r3, r0
 8006676:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800667a:	e014      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800667c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006680:	3330      	adds	r3, #48	@ 0x30
 8006682:	4618      	mov	r0, r3
 8006684:	f003 fe9e 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800668e:	e00a      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006696:	e006      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006698:	bf00      	nop
 800669a:	e004      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80066a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80066ae:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80066b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80066b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80066c8:	e003      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80066de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066e2:	2300      	movs	r3, #0
 80066e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066e8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d055      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80066f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80066fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066fe:	d035      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006704:	d82e      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006706:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800670a:	d031      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800670c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006710:	d828      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006716:	d01b      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800671c:	d822      	bhi.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006726:	d009      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006728:	e01c      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800672a:	4b03      	ldr	r3, [pc, #12]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	4a02      	ldr	r2, [pc, #8]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006734:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006736:	e01c      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006738:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800673c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006740:	3308      	adds	r3, #8
 8006742:	4618      	mov	r0, r3
 8006744:	f003 fda6 	bl	800a294 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800674e:	e010      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006750:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006754:	3330      	adds	r3, #48	@ 0x30
 8006756:	4618      	mov	r0, r3
 8006758:	f003 fe34 	bl	800a3c4 <RCCEx_PLL3_Config>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006762:	e006      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800676a:	e002      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006772:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800677a:	4bc3      	ldr	r3, [pc, #780]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800677c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006780:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006784:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800678c:	4abe      	ldr	r2, [pc, #760]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800678e:	430b      	orrs	r3, r1
 8006790:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006794:	e003      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006796:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800679a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800679e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067ae:	2300      	movs	r3, #0
 80067b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067b4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d051      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80067be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80067c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ca:	d033      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80067cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067d0:	d82c      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80067d2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80067d6:	d02d      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80067d8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80067dc:	d826      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e2:	d019      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80067e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e8:	d820      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80067ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80067f2:	d007      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80067f4:	e01a      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4ba4      	ldr	r3, [pc, #656]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	4aa3      	ldr	r2, [pc, #652]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006800:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006802:	e018      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006804:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006808:	3308      	adds	r3, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f003 fd42 	bl	800a294 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006816:	e00e      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006818:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800681c:	3330      	adds	r3, #48	@ 0x30
 800681e:	4618      	mov	r0, r3
 8006820:	f003 fdd0 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800682a:	e004      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006836:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10d      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800683e:	4b92      	ldr	r3, [pc, #584]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006844:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006848:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800684c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006850:	4a8d      	ldr	r2, [pc, #564]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006852:	430b      	orrs	r3, r1
 8006854:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800685e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006862:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800686e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006870:	2300      	movs	r3, #0
 8006872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006874:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006878:	460b      	mov	r3, r1
 800687a:	4313      	orrs	r3, r2
 800687c:	d032      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800687e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006882:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006886:	2b05      	cmp	r3, #5
 8006888:	d80f      	bhi.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800688a:	2b03      	cmp	r3, #3
 800688c:	d211      	bcs.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800688e:	2b01      	cmp	r3, #1
 8006890:	d911      	bls.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006892:	2b02      	cmp	r3, #2
 8006894:	d109      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800689a:	3308      	adds	r3, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f003 fcf9 	bl	800a294 <RCCEx_PLL2_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068a8:	e006      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068b0:	e002      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80068b2:	bf00      	nop
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80068b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80068c0:	4b71      	ldr	r3, [pc, #452]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80068c6:	f023 0107 	bic.w	r1, r3, #7
 80068ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80068d2:	4a6d      	ldr	r2, [pc, #436]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80068d4:	430b      	orrs	r3, r1
 80068d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80068e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	2100      	movs	r1, #0
 80068ee:	6739      	str	r1, [r7, #112]	@ 0x70
 80068f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80068f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d024      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006900:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006904:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006908:	2b00      	cmp	r3, #0
 800690a:	d005      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800690c:	2b08      	cmp	r3, #8
 800690e:	d005      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006916:	e002      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006918:	bf00      	nop
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800691c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800691e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10d      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006926:	4b58      	ldr	r3, [pc, #352]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800692c:	f023 0108 	bic.w	r1, r3, #8
 8006930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006938:	4a53      	ldr	r2, [pc, #332]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800693a:	430b      	orrs	r3, r1
 800693c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006940:	e003      	b.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006942:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006946:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800694a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006956:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006958:	2300      	movs	r3, #0
 800695a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800695c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006960:	460b      	mov	r3, r1
 8006962:	4313      	orrs	r3, r2
 8006964:	f000 80b9 	beq.w	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006968:	4b48      	ldr	r3, [pc, #288]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696c:	4a47      	ldr	r2, [pc, #284]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006974:	f7fa ff38 	bl	80017e8 <HAL_GetTick>
 8006978:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800697c:	e00b      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800697e:	f7fa ff33 	bl	80017e8 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d903      	bls.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006994:	e005      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006996:	4b3d      	ldr	r3, [pc, #244]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0ed      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80069a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 8093 	bne.w	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069ac:	4b36      	ldr	r3, [pc, #216]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80069ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d023      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80069c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80069ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01b      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069dc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069e0:	4b29      	ldr	r3, [pc, #164]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069e6:	4a28      	ldr	r2, [pc, #160]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069f0:	4b25      	ldr	r3, [pc, #148]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80069f6:	4a24      	ldr	r2, [pc, #144]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80069f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a00:	4a21      	ldr	r2, [pc, #132]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a02:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d019      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a16:	f7fa fee7 	bl	80017e8 <HAL_GetTick>
 8006a1a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a1e:	e00d      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a20:	f7fa fee2 	bl	80017e8 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006a2a:	1ad2      	subs	r2, r2, r3
 8006a2c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d903      	bls.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006a3a:	e006      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a3c:	4b12      	ldr	r3, [pc, #72]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a42:	f003 0302 	and.w	r3, r3, #2
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d0ea      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006a4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d13a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a56:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a62:	d115      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006a64:	4b08      	ldr	r3, [pc, #32]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a70:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006a74:	091b      	lsrs	r3, r3, #4
 8006a76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006a7a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006a7e:	4a02      	ldr	r2, [pc, #8]	@ (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006a80:	430b      	orrs	r3, r1
 8006a82:	61d3      	str	r3, [r2, #28]
 8006a84:	e00a      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006a86:	bf00      	nop
 8006a88:	44020c00 	.word	0x44020c00
 8006a8c:	44020800 	.word	0x44020800
 8006a90:	4b9f      	ldr	r3, [pc, #636]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	4a9e      	ldr	r2, [pc, #632]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a96:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a9a:	61d3      	str	r3, [r2, #28]
 8006a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa2:	4a9b      	ldr	r2, [pc, #620]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006aac:	4b98      	ldr	r3, [pc, #608]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006aae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ab6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006abe:	4a94      	ldr	r2, [pc, #592]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ac0:	430b      	orrs	r3, r1
 8006ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006ac6:	e008      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ac8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006acc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006ad0:	e003      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ad6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ae8:	2300      	movs	r3, #0
 8006aea:	667b      	str	r3, [r7, #100]	@ 0x64
 8006aec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006af0:	460b      	mov	r3, r1
 8006af2:	4313      	orrs	r3, r2
 8006af4:	d035      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006afe:	2b30      	cmp	r3, #48	@ 0x30
 8006b00:	d014      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006b02:	2b30      	cmp	r3, #48	@ 0x30
 8006b04:	d80e      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d012      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d80a      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d010      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d106      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b16:	4b7e      	ldr	r3, [pc, #504]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b20:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006b22:	e008      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b2a:	e004      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b2c:	bf00      	nop
 8006b2e:	e002      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b30:	bf00      	nop
 8006b32:	e000      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10d      	bne.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b3e:	4b74      	ldr	r3, [pc, #464]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b4c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006b50:	4a6f      	ldr	r2, [pc, #444]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b52:	430b      	orrs	r3, r1
 8006b54:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006b58:	e003      	b.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b5e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006b62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006b6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b70:	2300      	movs	r3, #0
 8006b72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b74:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	d033      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b82:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006b8a:	2b40      	cmp	r3, #64	@ 0x40
 8006b8c:	d007      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006b8e:	e010      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b90:	4b5f      	ldr	r3, [pc, #380]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	4a5e      	ldr	r2, [pc, #376]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b9a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006b9c:	e00d      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f003 fb75 	bl	800a294 <RCCEx_PLL2_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006bb0:	e003      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10d      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006bc2:	4b53      	ldr	r3, [pc, #332]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bc8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006bcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bd0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006be2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006bf8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	d033      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c06:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d002      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006c0e:	2b80      	cmp	r3, #128	@ 0x80
 8006c10:	d007      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006c12:	e010      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c14:	4b3e      	ldr	r3, [pc, #248]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c18:	4a3d      	ldr	r2, [pc, #244]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c1e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c20:	e00d      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c26:	3308      	adds	r3, #8
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f003 fb33 	bl	800a294 <RCCEx_PLL2_Config>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006c34:	e003      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006c46:	4b32      	ldr	r3, [pc, #200]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c4c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c54:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006c58:	4a2d      	ldr	r2, [pc, #180]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c66:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006c6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c78:	2300      	movs	r3, #0
 8006c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006c80:	460b      	mov	r3, r1
 8006c82:	4313      	orrs	r3, r2
 8006c84:	d04a      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	d827      	bhi.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006c92:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006cad 	.word	0x08006cad
 8006c9c:	08006cbb 	.word	0x08006cbb
 8006ca0:	08006ccf 	.word	0x08006ccf
 8006ca4:	08006ceb 	.word	0x08006ceb
 8006ca8:	08006ceb 	.word	0x08006ceb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b18      	ldr	r3, [pc, #96]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb0:	4a17      	ldr	r2, [pc, #92]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e018      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f003 fae7 	bl	800a294 <RCCEx_PLL2_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006ccc:	e00e      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006cce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd2:	3330      	adds	r3, #48	@ 0x30
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f003 fb75 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006ce0:	e004      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ce8:	e000      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8006cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10f      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006cf4:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cfa:	f023 0107 	bic.w	r1, r3, #7
 8006cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d06:	4a02      	ldr	r2, [pc, #8]	@ (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006d08:	430b      	orrs	r3, r1
 8006d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d0e:	e005      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006d10:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006d28:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006d32:	460b      	mov	r3, r1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	f000 8081 	beq.w	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d42:	2b20      	cmp	r3, #32
 8006d44:	d85f      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006d46:	a201      	add	r2, pc, #4	@ (adr r2, 8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006dd1 	.word	0x08006dd1
 8006d50:	08006e07 	.word	0x08006e07
 8006d54:	08006e07 	.word	0x08006e07
 8006d58:	08006e07 	.word	0x08006e07
 8006d5c:	08006e07 	.word	0x08006e07
 8006d60:	08006e07 	.word	0x08006e07
 8006d64:	08006e07 	.word	0x08006e07
 8006d68:	08006e07 	.word	0x08006e07
 8006d6c:	08006ddf 	.word	0x08006ddf
 8006d70:	08006e07 	.word	0x08006e07
 8006d74:	08006e07 	.word	0x08006e07
 8006d78:	08006e07 	.word	0x08006e07
 8006d7c:	08006e07 	.word	0x08006e07
 8006d80:	08006e07 	.word	0x08006e07
 8006d84:	08006e07 	.word	0x08006e07
 8006d88:	08006e07 	.word	0x08006e07
 8006d8c:	08006df3 	.word	0x08006df3
 8006d90:	08006e07 	.word	0x08006e07
 8006d94:	08006e07 	.word	0x08006e07
 8006d98:	08006e07 	.word	0x08006e07
 8006d9c:	08006e07 	.word	0x08006e07
 8006da0:	08006e07 	.word	0x08006e07
 8006da4:	08006e07 	.word	0x08006e07
 8006da8:	08006e07 	.word	0x08006e07
 8006dac:	08006e0f 	.word	0x08006e0f
 8006db0:	08006e07 	.word	0x08006e07
 8006db4:	08006e07 	.word	0x08006e07
 8006db8:	08006e07 	.word	0x08006e07
 8006dbc:	08006e07 	.word	0x08006e07
 8006dc0:	08006e07 	.word	0x08006e07
 8006dc4:	08006e07 	.word	0x08006e07
 8006dc8:	08006e07 	.word	0x08006e07
 8006dcc:	08006e0f 	.word	0x08006e0f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd0:	4bab      	ldr	r3, [pc, #684]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd4:	4aaa      	ldr	r2, [pc, #680]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dda:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ddc:	e018      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006de2:	3308      	adds	r3, #8
 8006de4:	4618      	mov	r0, r3
 8006de6:	f003 fa55 	bl	800a294 <RCCEx_PLL2_Config>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006df0:	e00e      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006df2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df6:	3330      	adds	r3, #48	@ 0x30
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f003 fae3 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006e04:	e004      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e10:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006e18:	4b99      	ldr	r3, [pc, #612]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e2a:	4a95      	ldr	r2, [pc, #596]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e32:	e003      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e38:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e4e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006e52:	460b      	mov	r3, r1
 8006e54:	4313      	orrs	r3, r2
 8006e56:	d04e      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e64:	d02e      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006e66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e6a:	d827      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006e6c:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e6e:	d02b      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006e70:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e72:	d823      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006e74:	2b80      	cmp	r3, #128	@ 0x80
 8006e76:	d017      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006e78:	2b80      	cmp	r3, #128	@ 0x80
 8006e7a:	d81f      	bhi.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	d007      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006e84:	e01a      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e86:	4b7e      	ldr	r3, [pc, #504]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8a:	4a7d      	ldr	r2, [pc, #500]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e90:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006e92:	e01a      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e98:	3308      	adds	r3, #8
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f003 f9fa 	bl	800a294 <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006ea6:	e010      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eac:	3330      	adds	r3, #48	@ 0x30
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f003 fa88 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006eba:	e006      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ec2:	e002      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ec4:	bf00      	nop
 8006ec6:	e000      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10d      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ed8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ee4:	4a66      	ldr	r2, [pc, #408]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ee6:	430b      	orrs	r3, r1
 8006ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006eec:	e003      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ef2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006ef6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f04:	2300      	movs	r3, #0
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f08:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d055      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006f12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006f1a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f1e:	d031      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006f20:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006f24:	d82a      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f2a:	d02d      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f30:	d824      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f32:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f36:	d029      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006f38:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006f3c:	d81e      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f42:	d011      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f48:	d818      	bhi.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d020      	beq.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f52:	d113      	bne.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f58:	3308      	adds	r3, #8
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f003 f99a 	bl	800a294 <RCCEx_PLL2_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006f66:	e014      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f6c:	3330      	adds	r3, #48	@ 0x30
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f003 fa28 	bl	800a3c4 <RCCEx_PLL3_Config>
 8006f74:	4603      	mov	r3, r0
 8006f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f82:	e006      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006f84:	bf00      	nop
 8006f86:	e004      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006f88:	bf00      	nop
 8006f8a:	e002      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006f8c:	bf00      	nop
 8006f8e:	e000      	b.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10d      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006f9a:	4b39      	ldr	r3, [pc, #228]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fa0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006fac:	4a34      	ldr	r2, [pc, #208]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006fae:	430b      	orrs	r3, r1
 8006fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006fb4:	e003      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fcc:	2300      	movs	r3, #0
 8006fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	d058      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006fda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006fe2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fe6:	d031      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006fe8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fec:	d82a      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ff2:	d02d      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ff8:	d824      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006ffa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ffe:	d029      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007000:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007004:	d81e      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800700a:	d011      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800700c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007010:	d818      	bhi.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d020      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800701a:	d113      	bne.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800701c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007020:	3308      	adds	r3, #8
 8007022:	4618      	mov	r0, r3
 8007024:	f003 f936 	bl	800a294 <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800702e:	e014      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007030:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007034:	3330      	adds	r3, #48	@ 0x30
 8007036:	4618      	mov	r0, r3
 8007038:	f003 f9c4 	bl	800a3c4 <RCCEx_PLL3_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007042:	e00a      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800704a:	e006      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800704c:	bf00      	nop
 800704e:	e004      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007050:	bf00      	nop
 8007052:	e002      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007054:	bf00      	nop
 8007056:	e000      	b.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800705a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800705e:	2b00      	cmp	r3, #0
 8007060:	d110      	bne.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007062:	4b07      	ldr	r3, [pc, #28]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007068:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800706c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007074:	4902      	ldr	r1, [pc, #8]	@ (8007080 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007076:	4313      	orrs	r3, r2
 8007078:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800707c:	e006      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800707e:	bf00      	nop
 8007080:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007084:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007088:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800708c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	2100      	movs	r1, #0
 8007096:	6239      	str	r1, [r7, #32]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
 800709e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80070a2:	460b      	mov	r3, r1
 80070a4:	4313      	orrs	r3, r2
 80070a6:	d055      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80070a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070b0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80070b4:	d031      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80070b6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80070ba:	d82a      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c0:	d02d      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80070c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c6:	d824      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070c8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80070cc:	d029      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80070ce:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80070d2:	d81e      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d011      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80070da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070de:	d818      	bhi.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80070e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e8:	d113      	bne.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80070ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070ee:	3308      	adds	r3, #8
 80070f0:	4618      	mov	r0, r3
 80070f2:	f003 f8cf 	bl	800a294 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070fc:	e014      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80070fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007102:	3330      	adds	r3, #48	@ 0x30
 8007104:	4618      	mov	r0, r3
 8007106:	f003 f95d 	bl	800a3c4 <RCCEx_PLL3_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007110:	e00a      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007118:	e006      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800711a:	bf00      	nop
 800711c:	e004      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800711e:	bf00      	nop
 8007120:	e002      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007128:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10d      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007130:	4b88      	ldr	r3, [pc, #544]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007136:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800713a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800713e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007142:	4984      	ldr	r1, [pc, #528]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800714c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007150:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715c:	2100      	movs	r1, #0
 800715e:	61b9      	str	r1, [r7, #24]
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	61fb      	str	r3, [r7, #28]
 8007166:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800716a:	460b      	mov	r3, r1
 800716c:	4313      	orrs	r3, r2
 800716e:	d03d      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007174:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007178:	2b03      	cmp	r3, #3
 800717a:	d81c      	bhi.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800717c:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	080071bf 	.word	0x080071bf
 8007188:	08007195 	.word	0x08007195
 800718c:	080071a3 	.word	0x080071a3
 8007190:	080071bf 	.word	0x080071bf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007194:	4b6f      	ldr	r3, [pc, #444]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	4a6e      	ldr	r2, [pc, #440]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800719a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800719e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80071a0:	e00e      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071a6:	3308      	adds	r3, #8
 80071a8:	4618      	mov	r0, r3
 80071aa:	f003 f873 	bl	800a294 <RCCEx_PLL2_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80071b4:	e004      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071bc:	e000      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80071be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80071c8:	4b62      	ldr	r3, [pc, #392]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071ce:	f023 0203 	bic.w	r2, r3, #3
 80071d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80071da:	495e      	ldr	r1, [pc, #376]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80071e8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	2100      	movs	r1, #0
 80071f6:	6139      	str	r1, [r7, #16]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	617b      	str	r3, [r7, #20]
 80071fe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007202:	460b      	mov	r3, r1
 8007204:	4313      	orrs	r3, r2
 8007206:	d03a      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800720c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007214:	d00e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800721a:	d815      	bhi.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800721c:	2b00      	cmp	r3, #0
 800721e:	d017      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007220:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007224:	d110      	bne.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007226:	4b4b      	ldr	r3, [pc, #300]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	4a4a      	ldr	r2, [pc, #296]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800722c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007230:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007232:	e00e      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007238:	3308      	adds	r3, #8
 800723a:	4618      	mov	r0, r3
 800723c:	f003 f82a 	bl	800a294 <RCCEx_PLL2_Config>
 8007240:	4603      	mov	r3, r0
 8007242:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007246:	e004      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800724e:	e000      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007252:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10d      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800725a:	4b3e      	ldr	r3, [pc, #248]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800725c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007260:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007268:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800726c:	4939      	ldr	r1, [pc, #228]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007274:	e003      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007276:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800727a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800727e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	2100      	movs	r1, #0
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007294:	460b      	mov	r3, r1
 8007296:	4313      	orrs	r3, r2
 8007298:	d038      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800729a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80072a2:	2b30      	cmp	r3, #48	@ 0x30
 80072a4:	d01b      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80072a6:	2b30      	cmp	r3, #48	@ 0x30
 80072a8:	d815      	bhi.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80072aa:	2b10      	cmp	r3, #16
 80072ac:	d002      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d007      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80072b2:	e010      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b4:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b8:	4a26      	ldr	r2, [pc, #152]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072be:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80072c0:	e00e      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072c6:	3330      	adds	r3, #48	@ 0x30
 80072c8:	4618      	mov	r0, r3
 80072ca:	f003 f87b 	bl	800a3c4 <RCCEx_PLL3_Config>
 80072ce:	4603      	mov	r3, r0
 80072d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80072d4:	e004      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072dc:	e000      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80072de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072e0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10d      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80072e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072ee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80072fa:	4916      	ldr	r1, [pc, #88]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007302:	e003      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007304:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007308:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800730c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007314:	2100      	movs	r1, #0
 8007316:	6039      	str	r1, [r7, #0]
 8007318:	f003 0308 	and.w	r3, r3, #8
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007322:	460b      	mov	r3, r1
 8007324:	4313      	orrs	r3, r2
 8007326:	d00c      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800732a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800732e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007336:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800733a:	4906      	ldr	r1, [pc, #24]	@ (8007354 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007342:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007346:	4618      	mov	r0, r3
 8007348:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 800734c:	46bd      	mov	sp, r7
 800734e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007352:	bf00      	nop
 8007354:	44020c00 	.word	0x44020c00

08007358 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007358:	b480      	push	{r7}
 800735a:	b08b      	sub	sp, #44	@ 0x2c
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007360:	4bae      	ldr	r3, [pc, #696]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007368:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800736a:	4bac      	ldr	r3, [pc, #688]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007374:	4ba9      	ldr	r3, [pc, #676]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007378:	0a1b      	lsrs	r3, r3, #8
 800737a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800737e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007380:	4ba6      	ldr	r3, [pc, #664]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800738c:	4ba3      	ldr	r3, [pc, #652]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	fb02 f303 	mul.w	r3, r2, r3
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8126 	beq.w	80075fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d053      	beq.n	800745e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d86f      	bhi.n	800749c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d003      	beq.n	80073ca <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d02b      	beq.n	8007420 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80073c8:	e068      	b.n	800749c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073ca:	4b94      	ldr	r3, [pc, #592]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	08db      	lsrs	r3, r3, #3
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	4a92      	ldr	r2, [pc, #584]	@ (8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80073d6:	fa22 f303 	lsr.w	r3, r2, r3
 80073da:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	ee07 3a90 	vmov	s15, r3
 80073ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8007402:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800740a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800741a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800741e:	e068      	b.n	80074f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800742e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007440:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007458:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800745c:	e049      	b.n	80074f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	ee07 3a90 	vmov	s15, r3
 8007464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007468:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800762c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 800746c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747a:	ed97 6a04 	vldr	s12, [r7, #16]
 800747e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800748e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007496:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800749a:	e02a      	b.n	80074f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800749c:	4b5f      	ldr	r3, [pc, #380]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	08db      	lsrs	r3, r3, #3
 80074a2:	f003 0303 	and.w	r3, r3, #3
 80074a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80074a8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ac:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	ee07 3a90 	vmov	s15, r3
 80074b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	ee07 3a90 	vmov	s15, r3
 80074cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80074d4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80074d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80074f0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074f2:	4b4a      	ldr	r3, [pc, #296]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074fe:	d121      	bne.n	8007544 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007500:	4b46      	ldr	r3, [pc, #280]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d017      	beq.n	800753c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800750c:	4b43      	ldr	r3, [pc, #268]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800750e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007510:	0a5b      	lsrs	r3, r3, #9
 8007512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800751e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007522:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007526:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800752a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800752e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007532:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	e006      	b.n	800754a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	e002      	b.n	800754a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800754a:	4b34      	ldr	r3, [pc, #208]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007552:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007556:	d121      	bne.n	800759c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007558:	4b30      	ldr	r3, [pc, #192]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800755a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800755c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d017      	beq.n	8007594 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007564:	4b2d      	ldr	r3, [pc, #180]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007568:	0c1b      	lsrs	r3, r3, #16
 800756a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800756e:	ee07 3a90 	vmov	s15, r3
 8007572:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007576:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800757a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800757e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800758a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	e006      	b.n	80075a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	e002      	b.n	80075a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075a2:	4b1e      	ldr	r3, [pc, #120]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075ae:	d121      	bne.n	80075f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80075b0:	4b1a      	ldr	r3, [pc, #104]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d017      	beq.n	80075ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80075bc:	4b17      	ldr	r3, [pc, #92]	@ (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80075be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c0:	0e1b      	lsrs	r3, r3, #24
 80075c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075c6:	ee07 3a90 	vmov	s15, r3
 80075ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80075ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075d2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80075d6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80075ea:	e010      	b.n	800760e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
}
 80075f2:	e00c      	b.n	800760e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	e008      	b.n	800760e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	609a      	str	r2, [r3, #8]
}
 800760e:	bf00      	nop
 8007610:	372c      	adds	r7, #44	@ 0x2c
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	44020c00 	.word	0x44020c00
 8007620:	03d09000 	.word	0x03d09000
 8007624:	46000000 	.word	0x46000000
 8007628:	4a742400 	.word	0x4a742400
 800762c:	4bbebc20 	.word	0x4bbebc20

08007630 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007630:	b480      	push	{r7}
 8007632:	b08b      	sub	sp, #44	@ 0x2c
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007638:	4bae      	ldr	r3, [pc, #696]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800763a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007640:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007642:	4bac      	ldr	r3, [pc, #688]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800764c:	4ba9      	ldr	r3, [pc, #676]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007656:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007658:	4ba6      	ldr	r3, [pc, #664]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	091b      	lsrs	r3, r3, #4
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007664:	4ba3      	ldr	r3, [pc, #652]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007668:	08db      	lsrs	r3, r3, #3
 800766a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8126 	beq.w	80078d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	2b03      	cmp	r3, #3
 800768c:	d053      	beq.n	8007736 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	2b03      	cmp	r3, #3
 8007692:	d86f      	bhi.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d003      	beq.n	80076a2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	2b02      	cmp	r3, #2
 800769e:	d02b      	beq.n	80076f8 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80076a0:	e068      	b.n	8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076a2:	4b94      	ldr	r3, [pc, #592]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	08db      	lsrs	r3, r3, #3
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	4a92      	ldr	r2, [pc, #584]	@ (80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	ee07 3a90 	vmov	s15, r3
 80076ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	ee07 3a90 	vmov	s15, r3
 80076c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	ee07 3a90 	vmov	s15, r3
 80076d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80076da:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80076de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076f2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80076f6:	e068      	b.n	80077ca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007702:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007900 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	ee07 3a90 	vmov	s15, r3
 8007710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007714:	ed97 6a04 	vldr	s12, [r7, #16]
 8007718:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800771c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007720:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007724:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007730:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007734:	e049      	b.n	80077ca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007740:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007904 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007752:	ed97 6a04 	vldr	s12, [r7, #16]
 8007756:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800775a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800775e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800776a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800776e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007772:	e02a      	b.n	80077ca <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007774:	4b5f      	ldr	r3, [pc, #380]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a5e      	ldr	r2, [pc, #376]	@ (80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	ee07 3a90 	vmov	s15, r3
 80077a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80077ac:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80077b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80077bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80077c8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80077ca:	4b4a      	ldr	r3, [pc, #296]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80077d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077d6:	d121      	bne.n	800781c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80077d8:	4b46      	ldr	r3, [pc, #280]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d017      	beq.n	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80077e4:	4b43      	ldr	r3, [pc, #268]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80077e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e8:	0a5b      	lsrs	r3, r3, #9
 80077ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80077f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077fa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80077fe:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	e006      	b.n	8007822 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007822:	4b34      	ldr	r3, [pc, #208]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800782a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800782e:	d121      	bne.n	8007874 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007830:	4b30      	ldr	r3, [pc, #192]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d017      	beq.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800783c:	4b2d      	ldr	r3, [pc, #180]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800783e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800784e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007852:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007856:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800785a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800785e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007862:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
 800786a:	e006      	b.n	800787a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	e002      	b.n	800787a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800787a:	4b1e      	ldr	r3, [pc, #120]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007886:	d121      	bne.n	80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007888:	4b1a      	ldr	r3, [pc, #104]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800788a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d017      	beq.n	80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007894:	4b17      	ldr	r3, [pc, #92]	@ (80078f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	0e1b      	lsrs	r3, r3, #24
 800789a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80078a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078aa:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80078ae:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80078b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ba:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80078c2:	e010      	b.n	80078e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	609a      	str	r2, [r3, #8]
}
 80078ca:	e00c      	b.n	80078e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	609a      	str	r2, [r3, #8]
}
 80078d2:	e008      	b.n	80078e6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	609a      	str	r2, [r3, #8]
}
 80078e6:	bf00      	nop
 80078e8:	372c      	adds	r7, #44	@ 0x2c
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	44020c00 	.word	0x44020c00
 80078f8:	03d09000 	.word	0x03d09000
 80078fc:	46000000 	.word	0x46000000
 8007900:	4a742400 	.word	0x4a742400
 8007904:	4bbebc20 	.word	0x4bbebc20

08007908 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007908:	b480      	push	{r7}
 800790a:	b08b      	sub	sp, #44	@ 0x2c
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007910:	4bae      	ldr	r3, [pc, #696]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007918:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800791a:	4bac      	ldr	r3, [pc, #688]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007924:	4ba9      	ldr	r3, [pc, #676]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007928:	0a1b      	lsrs	r3, r3, #8
 800792a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800792e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007930:	4ba6      	ldr	r3, [pc, #664]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007934:	091b      	lsrs	r3, r3, #4
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800793c:	4ba3      	ldr	r3, [pc, #652]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800793e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007940:	08db      	lsrs	r3, r3, #3
 8007942:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	ee07 3a90 	vmov	s15, r3
 8007950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007954:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 8126 	beq.w	8007bac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d053      	beq.n	8007a0e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d86f      	bhi.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d003      	beq.n	800797a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b02      	cmp	r3, #2
 8007976:	d02b      	beq.n	80079d0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007978:	e068      	b.n	8007a4c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800797a:	4b94      	ldr	r3, [pc, #592]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	08db      	lsrs	r3, r3, #3
 8007980:	f003 0303 	and.w	r3, r3, #3
 8007984:	4a92      	ldr	r2, [pc, #584]	@ (8007bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007986:	fa22 f303 	lsr.w	r3, r2, r3
 800798a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	ee07 3a90 	vmov	s15, r3
 80079aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80079b2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80079b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80079ce:	e068      	b.n	8007aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079da:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80079de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079e2:	6a3b      	ldr	r3, [r7, #32]
 80079e4:	ee07 3a90 	vmov	s15, r3
 80079e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80079f0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80079f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a08:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a0c:	e049      	b.n	8007aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	ee07 3a90 	vmov	s15, r3
 8007a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a18:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a2e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007a4a:	e02a      	b.n	8007aa2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a4c:	4b5f      	ldr	r3, [pc, #380]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	08db      	lsrs	r3, r3, #3
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	4a5e      	ldr	r2, [pc, #376]	@ (8007bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	ee07 3a90 	vmov	s15, r3
 8007a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a80:	ed97 6a04 	vldr	s12, [r7, #16]
 8007a84:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007aa0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007aae:	d121      	bne.n	8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007ab0:	4b46      	ldr	r3, [pc, #280]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d017      	beq.n	8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007abc:	4b43      	ldr	r3, [pc, #268]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ac0:	0a5b      	lsrs	r3, r3, #9
 8007ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007ad6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ae2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e006      	b.n	8007afa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	e002      	b.n	8007afa <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007afa:	4b34      	ldr	r3, [pc, #208]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b06:	d121      	bne.n	8007b4c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007b08:	4b30      	ldr	r3, [pc, #192]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d017      	beq.n	8007b44 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b14:	4b2d      	ldr	r3, [pc, #180]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b2e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	605a      	str	r2, [r3, #4]
 8007b42:	e006      	b.n	8007b52 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
 8007b4a:	e002      	b.n	8007b52 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007b52:	4b1e      	ldr	r3, [pc, #120]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b5e:	d121      	bne.n	8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007b60:	4b1a      	ldr	r3, [pc, #104]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d017      	beq.n	8007b9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007b6c:	4b17      	ldr	r3, [pc, #92]	@ (8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b70:	0e1b      	lsrs	r3, r3, #24
 8007b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007b7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007b82:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007b86:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b92:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007b9a:	e010      	b.n	8007bbe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	609a      	str	r2, [r3, #8]
}
 8007ba2:	e00c      	b.n	8007bbe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
}
 8007baa:	e008      	b.n	8007bbe <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
}
 8007bbe:	bf00      	nop
 8007bc0:	372c      	adds	r7, #44	@ 0x2c
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	44020c00 	.word	0x44020c00
 8007bd0:	03d09000 	.word	0x03d09000
 8007bd4:	46000000 	.word	0x46000000
 8007bd8:	4a742400 	.word	0x4a742400
 8007bdc:	4bbebc20 	.word	0x4bbebc20

08007be0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007be0:	b590      	push	{r4, r7, lr}
 8007be2:	b08f      	sub	sp, #60	@ 0x3c
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007bea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bee:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007bf2:	4321      	orrs	r1, r4
 8007bf4:	d150      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007bf6:	4b26      	ldr	r3, [pc, #152]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007bfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c00:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007c02:	4b23      	ldr	r3, [pc, #140]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d108      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c16:	d104      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1e:	f002 bb2a 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007c22:	4b1b      	ldr	r3, [pc, #108]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c30:	d108      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c38:	d104      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007c3a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c40:	f002 bb19 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007c44:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c50:	d119      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c58:	d115      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007c62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c66:	d30a      	bcc.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007c68:	4b09      	ldr	r3, [pc, #36]	@ (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	0a1b      	lsrs	r3, r3, #8
 8007c6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c72:	4a08      	ldr	r2, [pc, #32]	@ (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007c7a:	f002 bafc 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007c82:	f002 baf8 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c8a:	f002 baf4 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c8e:	bf00      	nop
 8007c90:	44020c00 	.word	0x44020c00
 8007c94:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c9c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007ca0:	ea50 0104 	orrs.w	r1, r0, r4
 8007ca4:	f001 8275 	beq.w	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007ca8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cac:	2801      	cmp	r0, #1
 8007cae:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007cb2:	f082 82dd 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cb6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cba:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8007cbe:	ea50 0104 	orrs.w	r1, r0, r4
 8007cc2:	f001 816c 	beq.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cca:	2801      	cmp	r0, #1
 8007ccc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007cd0:	f082 82ce 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cd8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8007cdc:	ea50 0104 	orrs.w	r1, r0, r4
 8007ce0:	f001 8602 	beq.w	80098e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ce8:	2801      	cmp	r0, #1
 8007cea:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8007cee:	f082 82bf 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cf6:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8007cfa:	ea50 0104 	orrs.w	r1, r0, r4
 8007cfe:	f001 854c 	beq.w	800979a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007d02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d06:	2801      	cmp	r0, #1
 8007d08:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007d0c:	f082 82b0 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d14:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007d18:	ea50 0104 	orrs.w	r1, r0, r4
 8007d1c:	f001 849e 	beq.w	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d24:	2801      	cmp	r0, #1
 8007d26:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007d2a:	f082 82a1 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d32:	f1a1 0420 	sub.w	r4, r1, #32
 8007d36:	ea50 0104 	orrs.w	r1, r0, r4
 8007d3a:	f001 83e8 	beq.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d42:	2801      	cmp	r0, #1
 8007d44:	f171 0120 	sbcs.w	r1, r1, #32
 8007d48:	f082 8292 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d50:	f1a1 0410 	sub.w	r4, r1, #16
 8007d54:	ea50 0104 	orrs.w	r1, r0, r4
 8007d58:	f002 8256 	beq.w	800a208 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d60:	2801      	cmp	r0, #1
 8007d62:	f171 0110 	sbcs.w	r1, r1, #16
 8007d66:	f082 8283 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d6e:	f1a1 0408 	sub.w	r4, r1, #8
 8007d72:	ea50 0104 	orrs.w	r1, r0, r4
 8007d76:	f002 81cc 	beq.w	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d7e:	2801      	cmp	r0, #1
 8007d80:	f171 0108 	sbcs.w	r1, r1, #8
 8007d84:	f082 8274 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	ea50 0104 	orrs.w	r1, r0, r4
 8007d92:	f001 8648 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d9a:	2801      	cmp	r0, #1
 8007d9c:	f171 0104 	sbcs.w	r1, r1, #4
 8007da0:	f082 8266 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007da8:	1e8c      	subs	r4, r1, #2
 8007daa:	ea50 0104 	orrs.w	r1, r0, r4
 8007dae:	f002 8143 	beq.w	800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007db6:	2801      	cmp	r0, #1
 8007db8:	f171 0102 	sbcs.w	r1, r1, #2
 8007dbc:	f082 8258 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dc4:	1e4c      	subs	r4, r1, #1
 8007dc6:	ea50 0104 	orrs.w	r1, r0, r4
 8007dca:	f002 80ce 	beq.w	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dd2:	2801      	cmp	r0, #1
 8007dd4:	f171 0101 	sbcs.w	r1, r1, #1
 8007dd8:	f082 824a 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ddc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007de0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007de4:	4321      	orrs	r1, r4
 8007de6:	f002 8059 	beq.w	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007dea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dee:	4cd9      	ldr	r4, [pc, #868]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007df0:	42a0      	cmp	r0, r4
 8007df2:	f171 0100 	sbcs.w	r1, r1, #0
 8007df6:	f082 823b 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dfe:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007e02:	4321      	orrs	r1, r4
 8007e04:	f001 87d9 	beq.w	8009dba <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007e08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e0c:	4cd2      	ldr	r4, [pc, #840]	@ (8008158 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007e0e:	42a0      	cmp	r0, r4
 8007e10:	f171 0100 	sbcs.w	r1, r1, #0
 8007e14:	f082 822c 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e1c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007e20:	4321      	orrs	r1, r4
 8007e22:	f001 8751 	beq.w	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007e26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e2a:	4ccc      	ldr	r4, [pc, #816]	@ (800815c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007e2c:	42a0      	cmp	r0, r4
 8007e2e:	f171 0100 	sbcs.w	r1, r1, #0
 8007e32:	f082 821d 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e3a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007e3e:	4321      	orrs	r1, r4
 8007e40:	f001 869a 	beq.w	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e48:	4cc5      	ldr	r4, [pc, #788]	@ (8008160 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007e4a:	42a0      	cmp	r0, r4
 8007e4c:	f171 0100 	sbcs.w	r1, r1, #0
 8007e50:	f082 820e 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e58:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007e5c:	4321      	orrs	r1, r4
 8007e5e:	f001 8612 	beq.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007e62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e66:	4cbf      	ldr	r4, [pc, #764]	@ (8008164 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	f171 0100 	sbcs.w	r1, r1, #0
 8007e6e:	f082 81ff 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e76:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007e7a:	4321      	orrs	r1, r4
 8007e7c:	f002 817e 	beq.w	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007e80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e84:	4cb8      	ldr	r4, [pc, #736]	@ (8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007e86:	42a0      	cmp	r0, r4
 8007e88:	f171 0100 	sbcs.w	r1, r1, #0
 8007e8c:	f082 81f0 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007e90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e94:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007e98:	4321      	orrs	r1, r4
 8007e9a:	f000 829e 	beq.w	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ea2:	4cb2      	ldr	r4, [pc, #712]	@ (800816c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007ea4:	42a0      	cmp	r0, r4
 8007ea6:	f171 0100 	sbcs.w	r1, r1, #0
 8007eaa:	f082 81e1 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eb2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007eb6:	4321      	orrs	r1, r4
 8007eb8:	f000 826d 	beq.w	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ec0:	4cab      	ldr	r4, [pc, #684]	@ (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007ec2:	42a0      	cmp	r0, r4
 8007ec4:	f171 0100 	sbcs.w	r1, r1, #0
 8007ec8:	f082 81d2 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ecc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ed0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007ed4:	4321      	orrs	r1, r4
 8007ed6:	f001 800d 	beq.w	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007eda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ede:	4ca5      	ldr	r4, [pc, #660]	@ (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007ee0:	42a0      	cmp	r0, r4
 8007ee2:	f171 0100 	sbcs.w	r1, r1, #0
 8007ee6:	f082 81c3 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007eee:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007ef2:	4321      	orrs	r1, r4
 8007ef4:	f000 81d0 	beq.w	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007ef8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007efc:	4c9e      	ldr	r4, [pc, #632]	@ (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007efe:	42a0      	cmp	r0, r4
 8007f00:	f171 0100 	sbcs.w	r1, r1, #0
 8007f04:	f082 81b4 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f0c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007f10:	4321      	orrs	r1, r4
 8007f12:	f000 8142 	beq.w	800819a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007f16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f1a:	4c98      	ldr	r4, [pc, #608]	@ (800817c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007f1c:	42a0      	cmp	r0, r4
 8007f1e:	f171 0100 	sbcs.w	r1, r1, #0
 8007f22:	f082 81a5 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f2a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007f2e:	4321      	orrs	r1, r4
 8007f30:	f001 824e 	beq.w	80093d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f38:	4c91      	ldr	r4, [pc, #580]	@ (8008180 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007f3a:	42a0      	cmp	r0, r4
 8007f3c:	f171 0100 	sbcs.w	r1, r1, #0
 8007f40:	f082 8196 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f48:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007f4c:	4321      	orrs	r1, r4
 8007f4e:	f001 8197 	beq.w	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f56:	4c8b      	ldr	r4, [pc, #556]	@ (8008184 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007f58:	42a0      	cmp	r0, r4
 8007f5a:	f171 0100 	sbcs.w	r1, r1, #0
 8007f5e:	f082 8187 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f66:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007f6a:	4321      	orrs	r1, r4
 8007f6c:	f001 8154 	beq.w	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007f70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f74:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007f78:	f171 0100 	sbcs.w	r1, r1, #0
 8007f7c:	f082 8178 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007f80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f84:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007f88:	4321      	orrs	r1, r4
 8007f8a:	f001 80b7 	beq.w	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007f92:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007f96:	42a0      	cmp	r0, r4
 8007f98:	f171 0100 	sbcs.w	r1, r1, #0
 8007f9c:	f082 8168 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fa4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007fa8:	4321      	orrs	r1, r4
 8007faa:	f001 8064 	beq.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fb2:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007fb6:	42a0      	cmp	r0, r4
 8007fb8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fbc:	f082 8158 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fc4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007fc8:	4321      	orrs	r1, r4
 8007fca:	f001 8011 	beq.w	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007fce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fd2:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007fd6:	42a0      	cmp	r0, r4
 8007fd8:	f171 0100 	sbcs.w	r1, r1, #0
 8007fdc:	f082 8148 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007fe0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007fe4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007fe8:	4321      	orrs	r1, r4
 8007fea:	f000 871e 	beq.w	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007fee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ff2:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007ff6:	42a0      	cmp	r0, r4
 8007ff8:	f171 0100 	sbcs.w	r1, r1, #0
 8007ffc:	f082 8138 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008000:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008004:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008008:	4321      	orrs	r1, r4
 800800a:	f000 86a8 	beq.w	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800800e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008012:	f640 0401 	movw	r4, #2049	@ 0x801
 8008016:	42a0      	cmp	r0, r4
 8008018:	f171 0100 	sbcs.w	r1, r1, #0
 800801c:	f082 8128 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008020:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008024:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008028:	4321      	orrs	r1, r4
 800802a:	f000 8632 	beq.w	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800802e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008032:	f240 4401 	movw	r4, #1025	@ 0x401
 8008036:	42a0      	cmp	r0, r4
 8008038:	f171 0100 	sbcs.w	r1, r1, #0
 800803c:	f082 8118 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008044:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008048:	4321      	orrs	r1, r4
 800804a:	f000 85b0 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800804e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008052:	f240 2401 	movw	r4, #513	@ 0x201
 8008056:	42a0      	cmp	r0, r4
 8008058:	f171 0100 	sbcs.w	r1, r1, #0
 800805c:	f082 8108 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008060:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008064:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008068:	4321      	orrs	r1, r4
 800806a:	f000 8535 	beq.w	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800806e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008072:	f240 1401 	movw	r4, #257	@ 0x101
 8008076:	42a0      	cmp	r0, r4
 8008078:	f171 0100 	sbcs.w	r1, r1, #0
 800807c:	f082 80f8 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008080:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008084:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008088:	4321      	orrs	r1, r4
 800808a:	f000 84ba 	beq.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800808e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008092:	2881      	cmp	r0, #129	@ 0x81
 8008094:	f171 0100 	sbcs.w	r1, r1, #0
 8008098:	f082 80ea 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800809c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080a0:	2821      	cmp	r0, #33	@ 0x21
 80080a2:	f171 0100 	sbcs.w	r1, r1, #0
 80080a6:	d26f      	bcs.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80080a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080ac:	4301      	orrs	r1, r0
 80080ae:	f002 80df 	beq.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080b6:	1e42      	subs	r2, r0, #1
 80080b8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80080bc:	2a20      	cmp	r2, #32
 80080be:	f173 0100 	sbcs.w	r1, r3, #0
 80080c2:	f082 80d5 	bcs.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080c6:	2a1f      	cmp	r2, #31
 80080c8:	f202 80d2 	bhi.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80080cc:	a101      	add	r1, pc, #4	@ (adr r1, 80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80080ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80080d2:	bf00      	nop
 80080d4:	08008435 	.word	0x08008435
 80080d8:	08008501 	.word	0x08008501
 80080dc:	0800a271 	.word	0x0800a271
 80080e0:	080085c1 	.word	0x080085c1
 80080e4:	0800a271 	.word	0x0800a271
 80080e8:	0800a271 	.word	0x0800a271
 80080ec:	0800a271 	.word	0x0800a271
 80080f0:	08008691 	.word	0x08008691
 80080f4:	0800a271 	.word	0x0800a271
 80080f8:	0800a271 	.word	0x0800a271
 80080fc:	0800a271 	.word	0x0800a271
 8008100:	0800a271 	.word	0x0800a271
 8008104:	0800a271 	.word	0x0800a271
 8008108:	0800a271 	.word	0x0800a271
 800810c:	0800a271 	.word	0x0800a271
 8008110:	08008773 	.word	0x08008773
 8008114:	0800a271 	.word	0x0800a271
 8008118:	0800a271 	.word	0x0800a271
 800811c:	0800a271 	.word	0x0800a271
 8008120:	0800a271 	.word	0x0800a271
 8008124:	0800a271 	.word	0x0800a271
 8008128:	0800a271 	.word	0x0800a271
 800812c:	0800a271 	.word	0x0800a271
 8008130:	0800a271 	.word	0x0800a271
 8008134:	0800a271 	.word	0x0800a271
 8008138:	0800a271 	.word	0x0800a271
 800813c:	0800a271 	.word	0x0800a271
 8008140:	0800a271 	.word	0x0800a271
 8008144:	0800a271 	.word	0x0800a271
 8008148:	0800a271 	.word	0x0800a271
 800814c:	0800a271 	.word	0x0800a271
 8008150:	08008849 	.word	0x08008849
 8008154:	80000001 	.word	0x80000001
 8008158:	40000001 	.word	0x40000001
 800815c:	20000001 	.word	0x20000001
 8008160:	10000001 	.word	0x10000001
 8008164:	08000001 	.word	0x08000001
 8008168:	04000001 	.word	0x04000001
 800816c:	00800001 	.word	0x00800001
 8008170:	00400001 	.word	0x00400001
 8008174:	00200001 	.word	0x00200001
 8008178:	00100001 	.word	0x00100001
 800817c:	00080001 	.word	0x00080001
 8008180:	00040001 	.word	0x00040001
 8008184:	00020001 	.word	0x00020001
 8008188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008190:	430b      	orrs	r3, r1
 8008192:	f000 83c4 	beq.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008196:	f002 b86b 	b.w	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800819a:	4ba1      	ldr	r3, [pc, #644]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800819c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081a0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80081a4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80081a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081ac:	d036      	beq.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80081ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081b4:	d86b      	bhi.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081bc:	d02b      	beq.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80081be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80081c4:	d863      	bhi.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081cc:	d01b      	beq.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d4:	d85b      	bhi.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80081d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80081dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081e2:	d008      	beq.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80081e4:	e053      	b.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081e6:	f107 0320 	add.w	r3, r7, #32
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff f8b4 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80081f4:	e04e      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff fa18 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008204:	e046      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fb7c 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008214:	e03e      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008216:	4b83      	ldr	r3, [pc, #524]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008218:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800821a:	e03b      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800821c:	4b80      	ldr	r3, [pc, #512]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800821e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008222:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008228:	4b7d      	ldr	r3, [pc, #500]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d10c      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800823a:	4b79      	ldr	r3, [pc, #484]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	08db      	lsrs	r3, r3, #3
 8008240:	f003 0303 	and.w	r3, r3, #3
 8008244:	4a78      	ldr	r2, [pc, #480]	@ (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008246:	fa22 f303 	lsr.w	r3, r2, r3
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
 800824c:	e01e      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800824e:	4b74      	ldr	r3, [pc, #464]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008256:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800825a:	d106      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800825c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800825e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008262:	d102      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008264:	4b71      	ldr	r3, [pc, #452]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
 8008268:	e010      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800826a:	4b6d      	ldr	r3, [pc, #436]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008272:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008276:	d106      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800827a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800827e:	d102      	bne.n	8008286 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008280:	4b6b      	ldr	r3, [pc, #428]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
 8008284:	e002      	b.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800828a:	e003      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800828c:	e002      	b.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008292:	bf00      	nop
          }
        }
        break;
 8008294:	f001 bfef 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008298:	4b61      	ldr	r3, [pc, #388]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800829a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800829e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80082a2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80082a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082aa:	d036      	beq.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082b2:	d86b      	bhi.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80082b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80082ba:	d02b      	beq.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80082bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082be:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80082c2:	d863      	bhi.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ca:	d01b      	beq.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d2:	d85b      	bhi.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80082d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80082e0:	d008      	beq.n	80082f4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80082e2:	e053      	b.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80082e4:	f107 0320 	add.w	r3, r7, #32
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff f835 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80082f2:	e04e      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082f4:	f107 0314 	add.w	r3, r7, #20
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7ff f999 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008302:	e046      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4618      	mov	r0, r3
 800830a:	f7ff fafd 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008312:	e03e      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008314:	4b43      	ldr	r3, [pc, #268]	@ (8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008316:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008318:	e03b      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800831a:	4b41      	ldr	r3, [pc, #260]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800831c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008320:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008324:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008326:	4b3e      	ldr	r3, [pc, #248]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b02      	cmp	r3, #2
 8008330:	d10c      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008334:	2b00      	cmp	r3, #0
 8008336:	d109      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008338:	4b39      	ldr	r3, [pc, #228]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	08db      	lsrs	r3, r3, #3
 800833e:	f003 0303 	and.w	r3, r3, #3
 8008342:	4a39      	ldr	r2, [pc, #228]	@ (8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008344:	fa22 f303 	lsr.w	r3, r2, r3
 8008348:	637b      	str	r3, [r7, #52]	@ 0x34
 800834a:	e01e      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800834c:	4b34      	ldr	r3, [pc, #208]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008358:	d106      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800835a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008360:	d102      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008362:	4b32      	ldr	r3, [pc, #200]	@ (800842c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008364:	637b      	str	r3, [r7, #52]	@ 0x34
 8008366:	e010      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008368:	4b2d      	ldr	r3, [pc, #180]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008374:	d106      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800837c:	d102      	bne.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800837e:	4b2c      	ldr	r3, [pc, #176]	@ (8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008380:	637b      	str	r3, [r7, #52]	@ 0x34
 8008382:	e002      	b.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008388:	e003      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800838a:	e002      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800838c:	2300      	movs	r3, #0
 800838e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008390:	bf00      	nop
          }
        }
        break;
 8008392:	f001 bf70 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008396:	4b22      	ldr	r3, [pc, #136]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008398:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800839c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d108      	bne.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083a8:	f107 0320 	add.w	r3, r7, #32
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fe ffd3 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083b6:	f001 bf5e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	2b40      	cmp	r3, #64	@ 0x40
 80083be:	d108      	bne.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c0:	f107 0314 	add.w	r3, r7, #20
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff f933 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083ce:	f001 bf52 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80083d2:	2300      	movs	r3, #0
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083d6:	f001 bf4e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80083da:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80083dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083e4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d108      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ec:	f107 0320 	add.w	r3, r7, #32
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fe ffb1 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80083fa:	f001 bf3c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	2b80      	cmp	r3, #128	@ 0x80
 8008402:	d108      	bne.n	8008416 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008404:	f107 0314 	add.w	r3, r7, #20
 8008408:	4618      	mov	r0, r3
 800840a:	f7ff f911 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008412:	f001 bf30 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800841a:	f001 bf2c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800841e:	bf00      	nop
 8008420:	44020c00 	.word	0x44020c00
 8008424:	00bb8000 	.word	0x00bb8000
 8008428:	03d09000 	.word	0x03d09000
 800842c:	003d0900 	.word	0x003d0900
 8008430:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008434:	4b9d      	ldr	r3, [pc, #628]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008436:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800843a:	f003 0307 	and.w	r3, r3, #7
 800843e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	2b00      	cmp	r3, #0
 8008444:	d104      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008446:	f7fc ffd1 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 800844a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800844c:	f001 bf13 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008450:	4b96      	ldr	r3, [pc, #600]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800845c:	d10a      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800845e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008460:	2b01      	cmp	r3, #1
 8008462:	d107      	bne.n	8008474 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008464:	f107 0314 	add.w	r3, r7, #20
 8008468:	4618      	mov	r0, r3
 800846a:	f7ff f8e1 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	637b      	str	r3, [r7, #52]	@ 0x34
 8008472:	e043      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008474:	4b8d      	ldr	r3, [pc, #564]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800847c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008480:	d10a      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008484:	2b02      	cmp	r3, #2
 8008486:	d107      	bne.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008488:	f107 0308 	add.w	r3, r7, #8
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff fa3b 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34
 8008496:	e031      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008498:	4b84      	ldr	r3, [pc, #528]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d10c      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d109      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084aa:	4b80      	ldr	r3, [pc, #512]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	08db      	lsrs	r3, r3, #3
 80084b0:	f003 0303 	and.w	r3, r3, #3
 80084b4:	4a7e      	ldr	r2, [pc, #504]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80084b6:	fa22 f303 	lsr.w	r3, r2, r3
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80084bc:	e01e      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80084be:	4b7b      	ldr	r3, [pc, #492]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80084c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ca:	d105      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	2b04      	cmp	r3, #4
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80084d2:	4b78      	ldr	r3, [pc, #480]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d6:	e011      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80084d8:	4b74      	ldr	r3, [pc, #464]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80084da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	2b05      	cmp	r3, #5
 80084ea:	d103      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80084ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084f8:	f001 bebd 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084fc:	f001 bebb 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008500:	4b6a      	ldr	r3, [pc, #424]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008502:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008506:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800850a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008512:	f7fc ff55 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008516:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008518:	f001 bead 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800851c:	4b63      	ldr	r3, [pc, #396]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008528:	d10a      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800852a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852c:	2b08      	cmp	r3, #8
 800852e:	d107      	bne.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff f87b 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	637b      	str	r3, [r7, #52]	@ 0x34
 800853e:	e03d      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	2b10      	cmp	r3, #16
 8008544:	d108      	bne.n	8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f9dc 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008554:	f001 be8f 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008558:	4b54      	ldr	r3, [pc, #336]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	2b02      	cmp	r3, #2
 8008562:	d10c      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	2b18      	cmp	r3, #24
 8008568:	d109      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800856a:	4b50      	ldr	r3, [pc, #320]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	08db      	lsrs	r3, r3, #3
 8008570:	f003 0303 	and.w	r3, r3, #3
 8008574:	4a4e      	ldr	r2, [pc, #312]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008576:	fa22 f303 	lsr.w	r3, r2, r3
 800857a:	637b      	str	r3, [r7, #52]	@ 0x34
 800857c:	e01e      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800857e:	4b4b      	ldr	r3, [pc, #300]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008586:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800858a:	d105      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	2b20      	cmp	r3, #32
 8008590:	d102      	bne.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8008592:	4b48      	ldr	r3, [pc, #288]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008594:	637b      	str	r3, [r7, #52]	@ 0x34
 8008596:	e011      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008598:	4b44      	ldr	r3, [pc, #272]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800859a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800859e:	f003 0302 	and.w	r3, r3, #2
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d106      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80085a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a8:	2b28      	cmp	r3, #40	@ 0x28
 80085aa:	d103      	bne.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80085ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80085b2:	e003      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085b8:	f001 be5d 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085bc:	f001 be5b 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80085c0:	4b3a      	ldr	r3, [pc, #232]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80085c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80085ca:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80085cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d104      	bne.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80085d2:	f7fc fef5 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80085d6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80085d8:	f001 be4d 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80085dc:	4b33      	ldr	r3, [pc, #204]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e8:	d10a      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ec:	2b40      	cmp	r3, #64	@ 0x40
 80085ee:	d107      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085f0:	f107 0314 	add.w	r3, r7, #20
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff f81b 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80085fe:	e045      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008600:	4b2a      	ldr	r3, [pc, #168]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008608:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800860c:	d10a      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008610:	2b80      	cmp	r3, #128	@ 0x80
 8008612:	d107      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008614:	f107 0308 	add.w	r3, r7, #8
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff f975 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	637b      	str	r3, [r7, #52]	@ 0x34
 8008622:	e033      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008624:	4b21      	ldr	r3, [pc, #132]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0302 	and.w	r3, r3, #2
 800862c:	2b02      	cmp	r3, #2
 800862e:	d10c      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	2bc0      	cmp	r3, #192	@ 0xc0
 8008634:	d109      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008636:	4b1d      	ldr	r3, [pc, #116]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	08db      	lsrs	r3, r3, #3
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	4a1b      	ldr	r2, [pc, #108]	@ (80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
 8008648:	e020      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800864a:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008652:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008656:	d106      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800865e:	d102      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008660:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e012      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008666:	4b11      	ldr	r3, [pc, #68]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b02      	cmp	r3, #2
 8008672:	d107      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800867a:	d103      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800867c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
 8008682:	e003      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008688:	f001 bdf5 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800868c:	f001 bdf3 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008690:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008692:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008696:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d10a      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086a2:	f7fc fe8d 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 80086a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80086a8:	f001 bde5 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086ac:	44020c00 	.word	0x44020c00
 80086b0:	03d09000 	.word	0x03d09000
 80086b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80086b8:	4ba0      	ldr	r3, [pc, #640]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086c4:	d10b      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086cc:	d107      	bne.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ce:	f107 0314 	add.w	r3, r7, #20
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe ffac 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	637b      	str	r3, [r7, #52]	@ 0x34
 80086dc:	e047      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80086de:	4b97      	ldr	r3, [pc, #604]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086ea:	d10b      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80086ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086f2:	d107      	bne.n	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086f4:	f107 0308 	add.w	r3, r7, #8
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff f905 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	637b      	str	r3, [r7, #52]	@ 0x34
 8008702:	e034      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008704:	4b8d      	ldr	r3, [pc, #564]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0302 	and.w	r3, r3, #2
 800870c:	2b02      	cmp	r3, #2
 800870e:	d10d      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008716:	d109      	bne.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008718:	4b88      	ldr	r3, [pc, #544]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	08db      	lsrs	r3, r3, #3
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	4a87      	ldr	r2, [pc, #540]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008724:	fa22 f303 	lsr.w	r3, r2, r3
 8008728:	637b      	str	r3, [r7, #52]	@ 0x34
 800872a:	e020      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800872c:	4b83      	ldr	r3, [pc, #524]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008738:	d106      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800873a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800873c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008740:	d102      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008742:	4b80      	ldr	r3, [pc, #512]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
 8008746:	e012      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008748:	4b7c      	ldr	r3, [pc, #496]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800874a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b02      	cmp	r3, #2
 8008754:	d107      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800875c:	d103      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800875e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008762:	637b      	str	r3, [r7, #52]	@ 0x34
 8008764:	e003      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800876a:	f001 bd84 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800876e:	f001 bd82 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008772:	4b72      	ldr	r3, [pc, #456]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008778:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800877c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800877e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008784:	f7fc fe1c 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008788:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800878a:	f001 bd74 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800878e:	4b6b      	ldr	r3, [pc, #428]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800879a:	d10b      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800879c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087a2:	d107      	bne.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087a4:	f107 0314 	add.w	r3, r7, #20
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe ff41 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087b2:	e047      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80087b4:	4b61      	ldr	r3, [pc, #388]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087c0:	d10b      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087c8:	d107      	bne.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff f89a 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d8:	e034      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80087da:	4b58      	ldr	r3, [pc, #352]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d10d      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087ec:	d109      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087ee:	4b53      	ldr	r3, [pc, #332]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a51      	ldr	r2, [pc, #324]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008800:	e020      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008802:	4b4e      	ldr	r3, [pc, #312]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800880a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800880e:	d106      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008816:	d102      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008818:	4b4a      	ldr	r3, [pc, #296]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
 800881c:	e012      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800881e:	4b47      	ldr	r3, [pc, #284]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008824:	f003 0302 	and.w	r3, r3, #2
 8008828:	2b02      	cmp	r3, #2
 800882a:	d107      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008832:	d103      	bne.n	800883c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008834:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008838:	637b      	str	r3, [r7, #52]	@ 0x34
 800883a:	e003      	b.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800883c:	2300      	movs	r3, #0
 800883e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008840:	f001 bd19 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008844:	f001 bd17 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008848:	4b3c      	ldr	r3, [pc, #240]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800884a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800884e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008852:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	2b00      	cmp	r3, #0
 8008858:	d104      	bne.n	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800885a:	f7fc fdb1 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 800885e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008860:	f001 bd09 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008864:	4b35      	ldr	r3, [pc, #212]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800886c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008870:	d10b      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008878:	d107      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887a:	f107 0314 	add.w	r3, r7, #20
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fed6 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	637b      	str	r3, [r7, #52]	@ 0x34
 8008888:	e047      	b.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800888a:	4b2c      	ldr	r3, [pc, #176]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008896:	d10b      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800889e:	d107      	bne.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a0:	f107 0308 	add.w	r3, r7, #8
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7ff f82f 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ae:	e034      	b.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80088b0:	4b22      	ldr	r3, [pc, #136]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0302 	and.w	r3, r3, #2
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d10d      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80088c2:	d109      	bne.n	80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088c4:	4b1d      	ldr	r3, [pc, #116]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	08db      	lsrs	r3, r3, #3
 80088ca:	f003 0303 	and.w	r3, r3, #3
 80088ce:	4a1c      	ldr	r2, [pc, #112]	@ (8008940 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80088d0:	fa22 f303 	lsr.w	r3, r2, r3
 80088d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088d6:	e020      	b.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80088d8:	4b18      	ldr	r3, [pc, #96]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088e4:	d106      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088ec:	d102      	bne.n	80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80088f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f2:	e012      	b.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80088f4:	4b11      	ldr	r3, [pc, #68]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80088f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d107      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008904:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008908:	d103      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800890a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800890e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008910:	e003      	b.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008916:	f001 bcae 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800891a:	f001 bcac 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800891e:	4b07      	ldr	r3, [pc, #28]	@ (800893c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008924:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008928:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10b      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008930:	f7fc fd46 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008934:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008936:	f001 bc9e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800893a:	bf00      	nop
 800893c:	44020c00 	.word	0x44020c00
 8008940:	03d09000 	.word	0x03d09000
 8008944:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008948:	4ba0      	ldr	r3, [pc, #640]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008954:	d10b      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800895c:	d107      	bne.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895e:	f107 0314 	add.w	r3, r7, #20
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fe64 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	637b      	str	r3, [r7, #52]	@ 0x34
 800896c:	e047      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800896e:	4b97      	ldr	r3, [pc, #604]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800897a:	d10b      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800897c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe ffbd 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e034      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008994:	4b8d      	ldr	r3, [pc, #564]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b02      	cmp	r3, #2
 800899e:	d10d      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80089a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80089a6:	d109      	bne.n	80089bc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089a8:	4b88      	ldr	r3, [pc, #544]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	4a87      	ldr	r2, [pc, #540]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80089b4:	fa22 f303 	lsr.w	r3, r2, r3
 80089b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ba:	e020      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80089bc:	4b83      	ldr	r3, [pc, #524]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c8:	d106      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089d0:	d102      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80089d2:	4b80      	ldr	r3, [pc, #512]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d6:	e012      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80089d8:	4b7c      	ldr	r3, [pc, #496]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80089da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d107      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80089ec:	d103      	bne.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80089ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f4:	e003      	b.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089fa:	f001 bc3c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80089fe:	f001 bc3a 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008a02:	4b72      	ldr	r3, [pc, #456]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a08:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008a0c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d104      	bne.n	8008a1e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a14:	f7fc fcd4 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008a18:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a1a:	f001 bc2c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008a1e:	4b6b      	ldr	r3, [pc, #428]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a2a:	d10b      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a32:	d107      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe fdf9 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a42:	e047      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008a44:	4b61      	ldr	r3, [pc, #388]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a50:	d10b      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a58:	d107      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a5a:	f107 0308 	add.w	r3, r7, #8
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe ff52 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a68:	e034      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008a6a:	4b58      	ldr	r3, [pc, #352]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 0302 	and.w	r3, r3, #2
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d10d      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a7c:	d109      	bne.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a7e:	4b53      	ldr	r3, [pc, #332]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	08db      	lsrs	r3, r3, #3
 8008a84:	f003 0303 	and.w	r3, r3, #3
 8008a88:	4a51      	ldr	r2, [pc, #324]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a90:	e020      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008a92:	4b4e      	ldr	r3, [pc, #312]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a9e:	d106      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008aa6:	d102      	bne.n	8008aae <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aac:	e012      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008aae:	4b47      	ldr	r3, [pc, #284]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ab0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008abe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ac2:	d103      	bne.n	8008acc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008ac4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aca:	e003      	b.n	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ad0:	f001 bbd1 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ad4:	f001 bbcf 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ada:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ade:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008ae2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008aea:	f7fc fc69 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008aee:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008af0:	f001 bbc1 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008af4:	4b35      	ldr	r3, [pc, #212]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b00:	d10b      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b08:	d107      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fe fd8e 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b18:	e047      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b26:	d10b      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b30:	f107 0308 	add.w	r3, r7, #8
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fee7 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b3e:	e034      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008b40:	4b22      	ldr	r3, [pc, #136]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d10d      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b52:	d109      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b54:	4b1d      	ldr	r3, [pc, #116]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b66:	e020      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008b68:	4b18      	ldr	r3, [pc, #96]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b74:	d106      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b7c:	d102      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008b7e:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b82:	e012      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008b84:	4b11      	ldr	r3, [pc, #68]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d107      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b98:	d103      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008b9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ba6:	f001 bb66 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008baa:	f001 bb64 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008bb4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008bb8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bc0:	f7fc fbfe 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008bc4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bc6:	f001 bb56 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bca:	bf00      	nop
 8008bcc:	44020c00 	.word	0x44020c00
 8008bd0:	03d09000 	.word	0x03d09000
 8008bd4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008bd8:	4ba1      	ldr	r3, [pc, #644]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008be0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008be4:	d10b      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bec:	d107      	bne.n	8008bfe <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bee:	f107 0314 	add.w	r3, r7, #20
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7fe fd1c 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfc:	e047      	b.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008bfe:	4b98      	ldr	r3, [pc, #608]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c0a:	d10b      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c12:	d107      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c14:	f107 0308 	add.w	r3, r7, #8
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fe75 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c22:	e034      	b.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008c24:	4b8e      	ldr	r3, [pc, #568]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d10d      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008c36:	d109      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c38:	4b89      	ldr	r3, [pc, #548]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	08db      	lsrs	r3, r3, #3
 8008c3e:	f003 0303 	and.w	r3, r3, #3
 8008c42:	4a88      	ldr	r2, [pc, #544]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008c44:	fa22 f303 	lsr.w	r3, r2, r3
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4a:	e020      	b.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008c4c:	4b84      	ldr	r3, [pc, #528]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c58:	d106      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c60:	d102      	bne.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008c62:	4b81      	ldr	r3, [pc, #516]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c66:	e012      	b.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008c68:	4b7d      	ldr	r3, [pc, #500]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d107      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008c7c:	d103      	bne.n	8008c86 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c84:	e003      	b.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c8a:	f001 baf4 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c8e:	f001 baf2 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008c92:	4b73      	ldr	r3, [pc, #460]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008c94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008ca4:	f7fc fb8c 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008ca8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8008caa:	f001 bae4 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008cae:	4b6c      	ldr	r3, [pc, #432]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cba:	d10a      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d107      	bne.n	8008cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cc2:	f107 0314 	add.w	r3, r7, #20
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fcb2 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd0:	e043      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008cd2:	4b63      	ldr	r3, [pc, #396]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cde:	d10a      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d107      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ce6:	f107 0308 	add.w	r3, r7, #8
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fe0c 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cf4:	e031      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d10c      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d109      	bne.n	8008d1c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d08:	4b55      	ldr	r3, [pc, #340]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	08db      	lsrs	r3, r3, #3
 8008d0e:	f003 0303 	and.w	r3, r3, #3
 8008d12:	4a54      	ldr	r2, [pc, #336]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008d14:	fa22 f303 	lsr.w	r3, r2, r3
 8008d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1a:	e01e      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008d1c:	4b50      	ldr	r3, [pc, #320]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d28:	d105      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008d30:	4b4d      	ldr	r3, [pc, #308]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d34:	e011      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008d36:	4b4a      	ldr	r3, [pc, #296]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	2b05      	cmp	r3, #5
 8008d48:	d103      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d50:	e003      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d56:	f001 ba8e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d5a:	f001 ba8c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008d5e:	4b40      	ldr	r3, [pc, #256]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d68:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d70:	f7fc fb26 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8008d74:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d76:	f001 ba7e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008d7a:	4b39      	ldr	r3, [pc, #228]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d86:	d10a      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	2b10      	cmp	r3, #16
 8008d8c:	d107      	bne.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d8e:	f107 0314 	add.w	r3, r7, #20
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fe fc4c 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d9c:	e043      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008d9e:	4b30      	ldr	r3, [pc, #192]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008daa:	d10a      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	2b20      	cmp	r3, #32
 8008db0:	d107      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db2:	f107 0308 	add.w	r3, r7, #8
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fda6 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc0:	e031      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008dc2:	4b27      	ldr	r3, [pc, #156]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d10c      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd0:	2b30      	cmp	r3, #48	@ 0x30
 8008dd2:	d109      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dd4:	4b22      	ldr	r3, [pc, #136]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	08db      	lsrs	r3, r3, #3
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	4a21      	ldr	r2, [pc, #132]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de6:	e01e      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008de8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008df4:	d105      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2b40      	cmp	r3, #64	@ 0x40
 8008dfa:	d102      	bne.n	8008e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e00:	e011      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008e02:	4b17      	ldr	r3, [pc, #92]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d106      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e12:	2b50      	cmp	r3, #80	@ 0x50
 8008e14:	d103      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1c:	e003      	b.n	8008e26 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e22:	f001 ba28 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e26:	f001 ba26 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e30:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e3c:	f7fc faec 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 8008e40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e42:	f001 ba18 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e4c:	d10e      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e4e:	f107 0314 	add.w	r3, r7, #20
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fbec 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e5c:	f001 ba0b 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e60:	44020c00 	.word	0x44020c00
 8008e64:	03d09000 	.word	0x03d09000
 8008e68:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e72:	d108      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e74:	f107 0308 	add.w	r3, r7, #8
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fd45 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e82:	f001 b9f8 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008e86:	4ba4      	ldr	r3, [pc, #656]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0302 	and.w	r3, r3, #2
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d10d      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e98:	d109      	bne.n	8008eae <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e9a:	4b9f      	ldr	r3, [pc, #636]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	08db      	lsrs	r3, r3, #3
 8008ea0:	f003 0303 	and.w	r3, r3, #3
 8008ea4:	4a9d      	ldr	r2, [pc, #628]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8008eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008eac:	e020      	b.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008eae:	4b9a      	ldr	r3, [pc, #616]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008eb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eba:	d106      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ec2:	d102      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008ec4:	4b96      	ldr	r3, [pc, #600]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ec8:	e012      	b.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008eca:	4b93      	ldr	r3, [pc, #588]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d107      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eda:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008ede:	d103      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee6:	e003      	b.n	8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008eec:	f001 b9c3 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ef0:	f001 b9c1 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008ef4:	4b88      	ldr	r3, [pc, #544]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d104      	bne.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008f06:	f7fc fa3f 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 8008f0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008f0c:	f001 b9b3 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d104      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008f16:	f7fc f90b 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8008f1a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008f1c:	f001 b9ab 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d108      	bne.n	8008f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f26:	f107 0314 	add.w	r3, r7, #20
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fe fb80 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f34:	f001 b99f 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008f38:	4b77      	ldr	r3, [pc, #476]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f44:	d105      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d102      	bne.n	8008f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008f4c:	4b75      	ldr	r3, [pc, #468]	@ (8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f50:	e023      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008f52:	4b71      	ldr	r3, [pc, #452]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0302 	and.w	r3, r3, #2
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d10c      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f64:	4b6c      	ldr	r3, [pc, #432]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	08db      	lsrs	r3, r3, #3
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	4a6b      	ldr	r2, [pc, #428]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f76:	e010      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008f78:	4b67      	ldr	r3, [pc, #412]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f84:	d105      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f88:	2b05      	cmp	r3, #5
 8008f8a:	d102      	bne.n	8008f92 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008f8c:	4b64      	ldr	r3, [pc, #400]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f90:	e003      	b.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f96:	f001 b96e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f9a:	f001 b96c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008fa4:	f003 0308 	and.w	r3, r3, #8
 8008fa8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008faa:	4b5b      	ldr	r3, [pc, #364]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d106      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d103      	bne.n	8008fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc4:	e012      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008fc6:	4b54      	ldr	r3, [pc, #336]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fd4:	d106      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d103      	bne.n	8008fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008fdc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fe2:	e003      	b.n	8008fec <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008fe8:	f001 b945 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fec:	f001 b943 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008ff0:	4b49      	ldr	r3, [pc, #292]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ff2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008ff6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008ffa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009002:	f7fc f9dd 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8009006:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009008:	f001 b935 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800900c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009012:	d108      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009014:	f107 0308 	add.w	r3, r7, #8
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fc75 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009022:	f001 b928 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009026:	4b3c      	ldr	r3, [pc, #240]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b02      	cmp	r3, #2
 8009030:	d10d      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009034:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009038:	d109      	bne.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800903a:	4b37      	ldr	r3, [pc, #220]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	08db      	lsrs	r3, r3, #3
 8009040:	f003 0303 	and.w	r3, r3, #3
 8009044:	4a35      	ldr	r2, [pc, #212]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009046:	fa22 f303 	lsr.w	r3, r2, r3
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
 800904c:	e011      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800904e:	4b32      	ldr	r3, [pc, #200]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009056:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800905a:	d106      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800905c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009062:	d102      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009064:	4b2e      	ldr	r3, [pc, #184]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009066:	637b      	str	r3, [r7, #52]	@ 0x34
 8009068:	e003      	b.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800906e:	f001 b902 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009072:	f001 b900 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009076:	4b28      	ldr	r3, [pc, #160]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009078:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800907c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009080:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d104      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009088:	f7fc f99a 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 800908c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800908e:	f001 b8f2 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009098:	d108      	bne.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800909a:	f107 0308 	add.w	r3, r7, #8
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fe fc32 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090a8:	f001 b8e5 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0302 	and.w	r3, r3, #2
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d10d      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80090be:	d109      	bne.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090c0:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	08db      	lsrs	r3, r3, #3
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	4a14      	ldr	r2, [pc, #80]	@ (800911c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80090cc:	fa22 f303 	lsr.w	r3, r2, r3
 80090d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d2:	e011      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80090d4:	4b10      	ldr	r3, [pc, #64]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090e0:	d106      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80090e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80090e8:	d102      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80090ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80090ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ee:	e003      	b.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 80090f0:	2300      	movs	r3, #0
 80090f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090f4:	f001 b8bf 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090f8:	f001 b8bd 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80090fc:	4b06      	ldr	r3, [pc, #24]	@ (8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80090fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009102:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10c      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800910e:	f7fc f983 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 8009112:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009114:	f001 b8af 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009118:	44020c00 	.word	0x44020c00
 800911c:	03d09000 	.word	0x03d09000
 8009120:	003d0900 	.word	0x003d0900
 8009124:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800912e:	d108      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009130:	f107 0308 	add.w	r3, r7, #8
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fbe7 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913e:	f001 b89a 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009142:	4b9f      	ldr	r3, [pc, #636]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b02      	cmp	r3, #2
 800914c:	d10d      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009154:	d109      	bne.n	800916a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009156:	4b9a      	ldr	r3, [pc, #616]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	08db      	lsrs	r3, r3, #3
 800915c:	f003 0303 	and.w	r3, r3, #3
 8009160:	4a98      	ldr	r2, [pc, #608]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009162:	fa22 f303 	lsr.w	r3, r2, r3
 8009166:	637b      	str	r3, [r7, #52]	@ 0x34
 8009168:	e011      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800916a:	4b95      	ldr	r3, [pc, #596]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009176:	d106      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800917e:	d102      	bne.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009180:	4b91      	ldr	r3, [pc, #580]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009182:	637b      	str	r3, [r7, #52]	@ 0x34
 8009184:	e003      	b.n	800918e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800918a:	f001 b874 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800918e:	f001 b872 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009192:	4b8b      	ldr	r3, [pc, #556]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009198:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800919c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80091a4:	f7fc f938 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 80091a8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80091aa:	f001 b864 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091b4:	d108      	bne.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fe fba4 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091c4:	f001 b857 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80091c8:	4b7d      	ldr	r3, [pc, #500]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0302 	and.w	r3, r3, #2
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	d10d      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091da:	d109      	bne.n	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091dc:	4b78      	ldr	r3, [pc, #480]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	08db      	lsrs	r3, r3, #3
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	4a77      	ldr	r2, [pc, #476]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ee:	e011      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80091f0:	4b73      	ldr	r3, [pc, #460]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091fc:	d106      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009204:	d102      	bne.n	800920c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009206:	4b70      	ldr	r3, [pc, #448]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009208:	637b      	str	r3, [r7, #52]	@ 0x34
 800920a:	e003      	b.n	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009210:	f001 b831 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009214:	f001 b82f 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009218:	4b69      	ldr	r3, [pc, #420]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800921a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800921e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009222:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	2b00      	cmp	r3, #0
 8009228:	d104      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800922a:	f7fc f8c9 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 800922e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009230:	f001 b821 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009236:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800923a:	d108      	bne.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	4618      	mov	r0, r3
 8009242:	f7fe fb61 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800924a:	f001 b814 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800924e:	4b5c      	ldr	r3, [pc, #368]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0302 	and.w	r3, r3, #2
 8009256:	2b02      	cmp	r3, #2
 8009258:	d10e      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009260:	d10a      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009262:	4b57      	ldr	r3, [pc, #348]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	08db      	lsrs	r3, r3, #3
 8009268:	f003 0303 	and.w	r3, r3, #3
 800926c:	4a55      	ldr	r2, [pc, #340]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800926e:	fa22 f303 	lsr.w	r3, r2, r3
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009274:	f000 bfff 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009278:	2300      	movs	r3, #0
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800927c:	f000 bffb 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009280:	4b4f      	ldr	r3, [pc, #316]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009282:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009286:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800928a:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800928c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009292:	d056      	beq.n	8009342 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800929a:	f200 808b 	bhi.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800929e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092a4:	d03e      	beq.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80092a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ac:	f200 8082 	bhi.w	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092b6:	d027      	beq.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80092b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092be:	d879      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c6:	d017      	beq.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ce:	d871      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d004      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80092d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092dc:	d004      	beq.n	80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80092de:	e069      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80092e0:	f7fc f89a 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 80092e4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80092e6:	e068      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092e8:	f107 0314 	add.w	r3, r7, #20
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fe f99f 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f6:	e060      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092f8:	f107 0308 	add.w	r3, r7, #8
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7fe fb03 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009306:	e058      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009308:	4b2d      	ldr	r3, [pc, #180]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800930a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b02      	cmp	r3, #2
 8009314:	d103      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800931c:	e04d      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009322:	e04a      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009324:	4b26      	ldr	r3, [pc, #152]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800932a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800932e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009332:	d103      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009334:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800933a:	e03e      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009340:	e03b      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009342:	4b1f      	ldr	r3, [pc, #124]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009348:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800934c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934e:	4b1c      	ldr	r3, [pc, #112]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d10c      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009360:	4b17      	ldr	r3, [pc, #92]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	08db      	lsrs	r3, r3, #3
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	4a16      	ldr	r2, [pc, #88]	@ (80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
 8009372:	e01e      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009374:	4b12      	ldr	r3, [pc, #72]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800937c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009380:	d106      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009388:	d102      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800938a:	4b0f      	ldr	r3, [pc, #60]	@ (80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
 800938e:	e010      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009390:	4b0b      	ldr	r3, [pc, #44]	@ (80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800939c:	d106      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a4:	d102      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80093a6:	4b09      	ldr	r3, [pc, #36]	@ (80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80093a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80093b2:	e002      	b.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093b8:	bf00      	nop
          }
        }
        break;
 80093ba:	f000 bf5c 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093be:	bf00      	nop
 80093c0:	44020c00 	.word	0x44020c00
 80093c4:	03d09000 	.word	0x03d09000
 80093c8:	003d0900 	.word	0x003d0900
 80093cc:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80093d0:	4b9e      	ldr	r3, [pc, #632]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80093d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80093d6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80093da:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80093dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80093e2:	d056      	beq.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80093e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80093ea:	f200 808b 	bhi.w	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80093ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093f4:	d03e      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80093f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80093fc:	f200 8082 	bhi.w	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009406:	d027      	beq.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800940e:	d879      	bhi.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009416:	d017      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800941e:	d871      	bhi.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	2b00      	cmp	r3, #0
 8009424:	d004      	beq.n	8009430 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009428:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800942c:	d004      	beq.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800942e:	e069      	b.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009430:	f7fb ffc6 	bl	80053c0 <HAL_RCC_GetPCLK1Freq>
 8009434:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009436:	e068      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009438:	f107 0314 	add.w	r3, r7, #20
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe f8f7 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009446:	e060      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	4618      	mov	r0, r3
 800944e:	f7fe fa5b 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009456:	e058      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009458:	4b7c      	ldr	r3, [pc, #496]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800945a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800945e:	f003 0302 	and.w	r3, r3, #2
 8009462:	2b02      	cmp	r3, #2
 8009464:	d103      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800946c:	e04d      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009472:	e04a      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009474:	4b75      	ldr	r3, [pc, #468]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800947a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009482:	d103      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009484:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800948a:	e03e      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009490:	e03b      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009492:	4b6e      	ldr	r3, [pc, #440]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009498:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800949c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800949e:	4b6b      	ldr	r3, [pc, #428]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d10c      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d109      	bne.n	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094b0:	4b66      	ldr	r3, [pc, #408]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	08db      	lsrs	r3, r3, #3
 80094b6:	f003 0303 	and.w	r3, r3, #3
 80094ba:	4a65      	ldr	r2, [pc, #404]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80094bc:	fa22 f303 	lsr.w	r3, r2, r3
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c2:	e01e      	b.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094c4:	4b61      	ldr	r3, [pc, #388]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d0:	d106      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80094d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094d8:	d102      	bne.n	80094e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094da:	4b5e      	ldr	r3, [pc, #376]	@ (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80094dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094de:	e010      	b.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e0:	4b5a      	ldr	r3, [pc, #360]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094ec:	d106      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094f4:	d102      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094f6:	4b58      	ldr	r3, [pc, #352]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fa:	e002      	b.n	8009502 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094fc:	2300      	movs	r3, #0
 80094fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009500:	e003      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009502:	e002      	b.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009504:	2300      	movs	r3, #0
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009508:	bf00      	nop
          }
        }
        break;
 800950a:	f000 beb4 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800950e:	4b4f      	ldr	r3, [pc, #316]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009510:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009514:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009518:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009520:	d056      	beq.n	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009528:	f200 808b 	bhi.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800952c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009532:	d03e      	beq.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009536:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800953a:	f200 8082 	bhi.w	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009544:	d027      	beq.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800954c:	d879      	bhi.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009554:	d017      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800955c:	d871      	bhi.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800955e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800956a:	d004      	beq.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800956c:	e069      	b.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800956e:	f7fb ff53 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 8009572:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009574:	e068      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009576:	f107 0314 	add.w	r3, r7, #20
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe f858 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009584:	e060      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009586:	f107 0308 	add.w	r3, r7, #8
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe f9bc 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009594:	e058      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009596:	4b2d      	ldr	r3, [pc, #180]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800959c:	f003 0302 	and.w	r3, r3, #2
 80095a0:	2b02      	cmp	r3, #2
 80095a2:	d103      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80095a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80095a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095aa:	e04d      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095b0:	e04a      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80095b2:	4b26      	ldr	r3, [pc, #152]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095c0:	d103      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80095c2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80095c8:	e03e      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095ce:	e03b      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095d0:	4b1e      	ldr	r3, [pc, #120]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80095d6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80095da:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095dc:	4b1b      	ldr	r3, [pc, #108]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d10c      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80095e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d109      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095ee:	4b17      	ldr	r3, [pc, #92]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	08db      	lsrs	r3, r3, #3
 80095f4:	f003 0303 	and.w	r3, r3, #3
 80095f8:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80095fa:	fa22 f303 	lsr.w	r3, r2, r3
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	e01e      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009602:	4b12      	ldr	r3, [pc, #72]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800960a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800960e:	d106      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009616:	d102      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009618:	4b0e      	ldr	r3, [pc, #56]	@ (8009654 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800961a:	637b      	str	r3, [r7, #52]	@ 0x34
 800961c:	e010      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800961e:	4b0b      	ldr	r3, [pc, #44]	@ (800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009626:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800962a:	d106      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009632:	d102      	bne.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009634:	4b08      	ldr	r3, [pc, #32]	@ (8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009636:	637b      	str	r3, [r7, #52]	@ 0x34
 8009638:	e002      	b.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800963e:	e003      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009640:	e002      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009646:	bf00      	nop
          }
        }
        break;
 8009648:	f000 be15 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800964c:	44020c00 	.word	0x44020c00
 8009650:	03d09000 	.word	0x03d09000
 8009654:	003d0900 	.word	0x003d0900
 8009658:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800965c:	4b9e      	ldr	r3, [pc, #632]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800965e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009662:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009666:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 8009668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800966e:	d056      	beq.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009672:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009676:	f200 808b 	bhi.w	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009680:	d03e      	beq.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009688:	f200 8082 	bhi.w	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009692:	d027      	beq.n	80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800969a:	d879      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800969c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096a2:	d017      	beq.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096aa:	d871      	bhi.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80096ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d004      	beq.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096b8:	d004      	beq.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80096ba:	e069      	b.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80096bc:	f7fb feac 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 80096c0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80096c2:	e068      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096c4:	f107 0314 	add.w	r3, r7, #20
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd ffb1 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096d2:	e060      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe f915 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096e2:	e058      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80096e4:	4b7c      	ldr	r3, [pc, #496]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80096e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d103      	bne.n	80096fa <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80096f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80096f8:	e04d      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096fe:	e04a      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009700:	4b75      	ldr	r3, [pc, #468]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009706:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800970a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800970e:	d103      	bne.n	8009718 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009710:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009714:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009716:	e03e      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800971c:	e03b      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800971e:	4b6e      	ldr	r3, [pc, #440]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009724:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009728:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800972a:	4b6b      	ldr	r3, [pc, #428]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b02      	cmp	r3, #2
 8009734:	d10c      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800973c:	4b66      	ldr	r3, [pc, #408]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	08db      	lsrs	r3, r3, #3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	4a65      	ldr	r2, [pc, #404]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009748:	fa22 f303 	lsr.w	r3, r2, r3
 800974c:	637b      	str	r3, [r7, #52]	@ 0x34
 800974e:	e01e      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009750:	4b61      	ldr	r3, [pc, #388]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975c:	d106      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800975e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009764:	d102      	bne.n	800976c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009766:	4b5e      	ldr	r3, [pc, #376]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009768:	637b      	str	r3, [r7, #52]	@ 0x34
 800976a:	e010      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800976c:	4b5a      	ldr	r3, [pc, #360]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009778:	d106      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800977a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009780:	d102      	bne.n	8009788 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009782:	4b58      	ldr	r3, [pc, #352]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34
 8009786:	e002      	b.n	800978e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800978c:	e003      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800978e:	e002      	b.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009790:	2300      	movs	r3, #0
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009794:	bf00      	nop
          }
        }
        break;
 8009796:	f000 bd6e 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800979a:	4b4f      	ldr	r3, [pc, #316]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800979c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80097a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80097a4:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80097a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097ac:	d056      	beq.n	800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80097b4:	f200 808b 	bhi.w	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097be:	d03e      	beq.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80097c6:	f200 8082 	bhi.w	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097d0:	d027      	beq.n	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80097d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80097d8:	d879      	bhi.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097e0:	d017      	beq.n	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80097e8:	d871      	bhi.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80097f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097f6:	d004      	beq.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80097f8:	e069      	b.n	80098ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80097fa:	f7fb fe0d 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 80097fe:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009800:	e068      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009802:	f107 0314 	add.w	r3, r7, #20
 8009806:	4618      	mov	r0, r3
 8009808:	f7fd ff12 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009810:	e060      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009812:	f107 0308 	add.w	r3, r7, #8
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe f876 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009820:	e058      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009822:	4b2d      	ldr	r3, [pc, #180]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009828:	f003 0302 	and.w	r3, r3, #2
 800982c:	2b02      	cmp	r3, #2
 800982e:	d103      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009830:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009834:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009836:	e04d      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800983c:	e04a      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800983e:	4b26      	ldr	r3, [pc, #152]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009844:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009848:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800984c:	d103      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800984e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009852:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009854:	e03e      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800985a:	e03b      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800985c:	4b1e      	ldr	r3, [pc, #120]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800985e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009862:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009866:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009868:	4b1b      	ldr	r3, [pc, #108]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b02      	cmp	r3, #2
 8009872:	d10c      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800987a:	4b17      	ldr	r3, [pc, #92]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	08db      	lsrs	r3, r3, #3
 8009880:	f003 0303 	and.w	r3, r3, #3
 8009884:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009886:	fa22 f303 	lsr.w	r3, r2, r3
 800988a:	637b      	str	r3, [r7, #52]	@ 0x34
 800988c:	e01e      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800988e:	4b12      	ldr	r3, [pc, #72]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800989a:	d106      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800989c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a2:	d102      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098a4:	4b0e      	ldr	r3, [pc, #56]	@ (80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80098a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098a8:	e010      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098aa:	4b0b      	ldr	r3, [pc, #44]	@ (80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098b6:	d106      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80098b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098be:	d102      	bne.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098c0:	4b08      	ldr	r3, [pc, #32]	@ (80098e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098c4:	e002      	b.n	80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098ca:	e003      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80098cc:	e002      	b.n	80098d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098d2:	bf00      	nop
          }
        }
        break;
 80098d4:	f000 bccf 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098d8:	44020c00 	.word	0x44020c00
 80098dc:	03d09000 	.word	0x03d09000
 80098e0:	003d0900 	.word	0x003d0900
 80098e4:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80098e8:	4b9e      	ldr	r3, [pc, #632]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80098ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80098ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80098f2:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098fa:	d056      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80098fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009902:	f200 808b 	bhi.w	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990c:	d03e      	beq.n	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009914:	f200 8082 	bhi.w	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800991e:	d027      	beq.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009926:	d879      	bhi.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800992e:	d017      	beq.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009936:	d871      	bhi.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800993e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009940:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009944:	d004      	beq.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009946:	e069      	b.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009948:	f7fb fd66 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 800994c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800994e:	e068      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd fe6b 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800995e:	e060      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009960:	f107 0308 	add.w	r3, r7, #8
 8009964:	4618      	mov	r0, r3
 8009966:	f7fd ffcf 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800996e:	e058      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009970:	4b7c      	ldr	r3, [pc, #496]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009976:	f003 0302 	and.w	r3, r3, #2
 800997a:	2b02      	cmp	r3, #2
 800997c:	d103      	bne.n	8009986 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800997e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009982:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009984:	e04d      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009986:	2300      	movs	r3, #0
 8009988:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800998a:	e04a      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800998c:	4b75      	ldr	r3, [pc, #468]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800998e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009992:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800999a:	d103      	bne.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800999c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80099a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099a2:	e03e      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099a8:	e03b      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099aa:	4b6e      	ldr	r3, [pc, #440]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099b0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80099b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099b6:	4b6b      	ldr	r3, [pc, #428]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d10c      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80099c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d109      	bne.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099c8:	4b66      	ldr	r3, [pc, #408]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	08db      	lsrs	r3, r3, #3
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	4a65      	ldr	r2, [pc, #404]	@ (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80099d4:	fa22 f303 	lsr.w	r3, r2, r3
 80099d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099da:	e01e      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099dc:	4b61      	ldr	r3, [pc, #388]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099e8:	d106      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80099ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099f0:	d102      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099f2:	4b5e      	ldr	r3, [pc, #376]	@ (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80099f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f6:	e010      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a04:	d106      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a0c:	d102      	bne.n	8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a0e:	4b58      	ldr	r3, [pc, #352]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a12:	e002      	b.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a14:	2300      	movs	r3, #0
 8009a16:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a18:	e003      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009a1a:	e002      	b.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a20:	bf00      	nop
          }
        }
        break;
 8009a22:	f000 bc28 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009a26:	4b4f      	ldr	r3, [pc, #316]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a30:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009a32:	4b4c      	ldr	r3, [pc, #304]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a3e:	d106      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d103      	bne.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009a46:	4b4a      	ldr	r3, [pc, #296]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009a48:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009a4a:	f000 bc14 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a54:	d108      	bne.n	8009a68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a56:	f107 0320 	add.w	r3, r7, #32
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fd fc7c 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a64:	f000 bc07 	b.w	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a6e:	d107      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a70:	f107 0314 	add.w	r3, r7, #20
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fd fddb 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a7e:	e3fa      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a84:	e3f7      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009a86:	4b37      	ldr	r3, [pc, #220]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009a8c:	f003 0307 	and.w	r3, r3, #7
 8009a90:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d861      	bhi.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009a98:	a201      	add	r2, pc, #4	@ (adr r2, 8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ab5 	.word	0x08009ab5
 8009aa4:	08009ac5 	.word	0x08009ac5
 8009aa8:	08009ad5 	.word	0x08009ad5
 8009aac:	08009ae5 	.word	0x08009ae5
 8009ab0:	08009aeb 	.word	0x08009aeb
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ab4:	f107 0320 	add.w	r3, r7, #32
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fd fc4d 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ac2:	e04e      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ac4:	f107 0314 	add.w	r3, r7, #20
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fd fdb1 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ad2:	e046      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ad4:	f107 0308 	add.w	r3, r7, #8
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fd ff15 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ae2:	e03e      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009ae4:	4b23      	ldr	r3, [pc, #140]	@ (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009ae6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009ae8:	e03b      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009aea:	4b1e      	ldr	r3, [pc, #120]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009af0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009af4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009af6:	4b1b      	ldr	r3, [pc, #108]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d10c      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d109      	bne.n	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	08db      	lsrs	r3, r3, #3
 8009b0e:	f003 0303 	and.w	r3, r3, #3
 8009b12:	4a15      	ldr	r2, [pc, #84]	@ (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009b14:	fa22 f303 	lsr.w	r3, r2, r3
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b1a:	e01e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b1c:	4b11      	ldr	r3, [pc, #68]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b28:	d106      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b30:	d102      	bne.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009b32:	4b0e      	ldr	r3, [pc, #56]	@ (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b36:	e010      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b38:	4b0a      	ldr	r3, [pc, #40]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b44:	d106      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b4c:	d102      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009b4e:	4b08      	ldr	r3, [pc, #32]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b52:	e002      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009b58:	e003      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009b5a:	e002      	b.n	8009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b60:	bf00      	nop
          }
        }
        break;
 8009b62:	e388      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b64:	44020c00 	.word	0x44020c00
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	017d7840 	.word	0x017d7840
 8009b74:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009b78:	4ba9      	ldr	r3, [pc, #676]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b82:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8009b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	f200 809a 	bhi.w	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b92:	bf00      	nop
 8009b94:	08009c19 	.word	0x08009c19
 8009b98:	08009cc1 	.word	0x08009cc1
 8009b9c:	08009cc1 	.word	0x08009cc1
 8009ba0:	08009cc1 	.word	0x08009cc1
 8009ba4:	08009cc1 	.word	0x08009cc1
 8009ba8:	08009cc1 	.word	0x08009cc1
 8009bac:	08009cc1 	.word	0x08009cc1
 8009bb0:	08009cc1 	.word	0x08009cc1
 8009bb4:	08009c29 	.word	0x08009c29
 8009bb8:	08009cc1 	.word	0x08009cc1
 8009bbc:	08009cc1 	.word	0x08009cc1
 8009bc0:	08009cc1 	.word	0x08009cc1
 8009bc4:	08009cc1 	.word	0x08009cc1
 8009bc8:	08009cc1 	.word	0x08009cc1
 8009bcc:	08009cc1 	.word	0x08009cc1
 8009bd0:	08009cc1 	.word	0x08009cc1
 8009bd4:	08009c39 	.word	0x08009c39
 8009bd8:	08009cc1 	.word	0x08009cc1
 8009bdc:	08009cc1 	.word	0x08009cc1
 8009be0:	08009cc1 	.word	0x08009cc1
 8009be4:	08009cc1 	.word	0x08009cc1
 8009be8:	08009cc1 	.word	0x08009cc1
 8009bec:	08009cc1 	.word	0x08009cc1
 8009bf0:	08009cc1 	.word	0x08009cc1
 8009bf4:	08009c49 	.word	0x08009c49
 8009bf8:	08009cc1 	.word	0x08009cc1
 8009bfc:	08009cc1 	.word	0x08009cc1
 8009c00:	08009cc1 	.word	0x08009cc1
 8009c04:	08009cc1 	.word	0x08009cc1
 8009c08:	08009cc1 	.word	0x08009cc1
 8009c0c:	08009cc1 	.word	0x08009cc1
 8009c10:	08009cc1 	.word	0x08009cc1
 8009c14:	08009c4f 	.word	0x08009c4f
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c18:	f107 0320 	add.w	r3, r7, #32
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fd fb9b 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c26:	e04e      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c28:	f107 0314 	add.w	r3, r7, #20
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fd fcff 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c36:	e046      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fd fe63 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c46:	e03e      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009c48:	4b76      	ldr	r3, [pc, #472]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009c4a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c4c:	e03b      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009c4e:	4b74      	ldr	r3, [pc, #464]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009c54:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009c58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009c5a:	4b71      	ldr	r3, [pc, #452]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d10c      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c6c:	4b6c      	ldr	r3, [pc, #432]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	08db      	lsrs	r3, r3, #3
 8009c72:	f003 0303 	and.w	r3, r3, #3
 8009c76:	4a6c      	ldr	r2, [pc, #432]	@ (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009c78:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c7e:	e01e      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009c80:	4b67      	ldr	r3, [pc, #412]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c8c:	d106      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c94:	d102      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009c96:	4b65      	ldr	r3, [pc, #404]	@ (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c9a:	e010      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009c9c:	4b60      	ldr	r3, [pc, #384]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ca4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ca8:	d106      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8009caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cb0:	d102      	bne.n	8009cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb6:	e002      	b.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009cbc:	e003      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8009cbe:	e002      	b.n	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cc4:	bf00      	nop
          }
        }
        break;
 8009cc6:	e2d6      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009cc8:	4b55      	ldr	r3, [pc, #340]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009cd2:	633b      	str	r3, [r7, #48]	@ 0x30
        switch (srcclk)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cda:	d031      	beq.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce2:	d866      	bhi.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ce8:	d027      	beq.n	8009d3a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	2bc0      	cmp	r3, #192	@ 0xc0
 8009cee:	d860      	bhi.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf2:	2b80      	cmp	r3, #128	@ 0x80
 8009cf4:	d019      	beq.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf8:	2b80      	cmp	r3, #128	@ 0x80
 8009cfa:	d85a      	bhi.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	2b40      	cmp	r3, #64	@ 0x40
 8009d06:	d008      	beq.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009d08:	e053      	b.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d0a:	f107 0320 	add.w	r3, r7, #32
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7fd fb22 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d18:	e04e      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d1a:	f107 0314 	add.w	r3, r7, #20
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fd fc86 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d28:	e046      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fd fdea 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d38:	e03e      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d3e:	e03b      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d40:	4b37      	ldr	r3, [pc, #220]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d46:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d4c:	4b34      	ldr	r3, [pc, #208]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0302 	and.w	r3, r3, #2
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d10c      	bne.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d5e:	4b30      	ldr	r3, [pc, #192]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	08db      	lsrs	r3, r3, #3
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	4a2f      	ldr	r2, [pc, #188]	@ (8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d70:	e01e      	b.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d72:	4b2b      	ldr	r3, [pc, #172]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d7e:	d106      	bne.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d86:	d102      	bne.n	8009d8e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009d88:	4b28      	ldr	r3, [pc, #160]	@ (8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d8c:	e010      	b.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d8e:	4b24      	ldr	r3, [pc, #144]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d9a:	d106      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009da2:	d102      	bne.n	8009daa <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009da4:	4b22      	ldr	r3, [pc, #136]	@ (8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009da8:	e002      	b.n	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dae:	e003      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009db0:	e002      	b.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009db2:	2300      	movs	r3, #0
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009db6:	bf00      	nop
          }
        }
        break;
 8009db8:	e25d      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009dba:	4b19      	ldr	r3, [pc, #100]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dc0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009dc4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d103      	bne.n	8009dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009dcc:	f7fb fb0e 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8009dd0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009dd2:	e250      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009dd4:	4b12      	ldr	r3, [pc, #72]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009de0:	d10b      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de8:	d107      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dea:	f107 0314 	add.w	r3, r7, #20
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fd fc1e 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df8:	e04f      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009dfa:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e06:	d115      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e0e:	d111      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e10:	f107 0308 	add.w	r3, r7, #8
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fd fd77 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1e:	e03c      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009e20:	44020c00 	.word	0x44020c00
 8009e24:	00bb8000 	.word	0x00bb8000
 8009e28:	03d09000 	.word	0x03d09000
 8009e2c:	003d0900 	.word	0x003d0900
 8009e30:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009e34:	4b94      	ldr	r3, [pc, #592]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d10d      	bne.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e42:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e46:	d109      	bne.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e48:	4b8f      	ldr	r3, [pc, #572]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	08db      	lsrs	r3, r3, #3
 8009e4e:	f003 0303 	and.w	r3, r3, #3
 8009e52:	4a8e      	ldr	r2, [pc, #568]	@ (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009e54:	fa22 f303 	lsr.w	r3, r2, r3
 8009e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5a:	e01e      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009e5c:	4b8a      	ldr	r3, [pc, #552]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e68:	d106      	bne.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e70:	d102      	bne.n	8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009e72:	4b87      	ldr	r3, [pc, #540]	@ (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e76:	e010      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009e78:	4b83      	ldr	r3, [pc, #524]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e84:	d106      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e88:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009e8c:	d102      	bne.n	8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009e8e:	4b81      	ldr	r3, [pc, #516]	@ (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e92:	e002      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009e94:	2300      	movs	r3, #0
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009e98:	e1ed      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e9a:	e1ec      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009e9c:	4b7a      	ldr	r3, [pc, #488]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ea2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009ea6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009eae:	f7fb fab3 	bl	8005418 <HAL_RCC_GetPCLK3Freq>
 8009eb2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009eb4:	e1df      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009eb6:	4b74      	ldr	r3, [pc, #464]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ec2:	d10b      	bne.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eca:	d107      	bne.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ecc:	f107 0314 	add.w	r3, r7, #20
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fd fbad 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eda:	e045      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009edc:	4b6a      	ldr	r3, [pc, #424]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ef0:	d107      	bne.n	8009f02 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fd fd06 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f00:	e032      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009f02:	4b61      	ldr	r3, [pc, #388]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d10d      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009f14:	d109      	bne.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f16:	4b5c      	ldr	r3, [pc, #368]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	08db      	lsrs	r3, r3, #3
 8009f1c:	f003 0303 	and.w	r3, r3, #3
 8009f20:	4a5a      	ldr	r2, [pc, #360]	@ (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f28:	e01e      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009f2a:	4b57      	ldr	r3, [pc, #348]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f36:	d106      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009f3e:	d102      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009f40:	4b53      	ldr	r3, [pc, #332]	@ (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f44:	e010      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009f46:	4b50      	ldr	r3, [pc, #320]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f52:	d106      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009f5a:	d102      	bne.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009f5c:	4b4d      	ldr	r3, [pc, #308]	@ (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f60:	e002      	b.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f66:	e186      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f68:	e185      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009f6a:	4b47      	ldr	r3, [pc, #284]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f70:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009f74:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d103      	bne.n	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009f7c:	f7fb fa36 	bl	80053ec <HAL_RCC_GetPCLK2Freq>
 8009f80:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009f82:	e178      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009f84:	4b40      	ldr	r3, [pc, #256]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f90:	d10b      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f98:	d107      	bne.n	8009faa <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f9a:	f107 0314 	add.w	r3, r7, #20
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fd fb46 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa8:	e045      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009faa:	4b37      	ldr	r3, [pc, #220]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fb6:	d10b      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fbe:	d107      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc0:	f107 0308 	add.w	r3, r7, #8
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f7fd fc9f 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fce:	e032      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009fd0:	4b2d      	ldr	r3, [pc, #180]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0302 	and.w	r3, r3, #2
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d10d      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fde:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009fe2:	d109      	bne.n	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fe4:	4b28      	ldr	r3, [pc, #160]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	08db      	lsrs	r3, r3, #3
 8009fea:	f003 0303 	and.w	r3, r3, #3
 8009fee:	4a27      	ldr	r2, [pc, #156]	@ (800a08c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ff6:	e01e      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009ff8:	4b23      	ldr	r3, [pc, #140]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a004:	d106      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a00c:	d102      	bne.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a00e:	4b20      	ldr	r3, [pc, #128]	@ (800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a010:	637b      	str	r3, [r7, #52]	@ 0x34
 800a012:	e010      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a014:	4b1c      	ldr	r3, [pc, #112]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a01c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a020:	d106      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a028:	d102      	bne.n	800a030 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a02a:	4b1a      	ldr	r3, [pc, #104]	@ (800a094 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02e:	e002      	b.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a030:	2300      	movs	r3, #0
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a034:	e11f      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a036:	e11e      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a038:	4b13      	ldr	r3, [pc, #76]	@ (800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a03a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a03e:	f003 0303 	and.w	r3, r3, #3
 800a042:	633b      	str	r3, [r7, #48]	@ 0x30

        switch (srcclk)
 800a044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a046:	2b03      	cmp	r3, #3
 800a048:	d85f      	bhi.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a04a:	a201      	add	r2, pc, #4	@ (adr r2, 800a050 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a069 	.word	0x0800a069
 800a058:	0800a079 	.word	0x0800a079
 800a05c:	0800a099 	.word	0x0800a099
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a060:	f7fb f992 	bl	8005388 <HAL_RCC_GetHCLKFreq>
 800a064:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a066:	e053      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a068:	f107 0320 	add.w	r3, r7, #32
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fd f973 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a076:	e04b      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a078:	f107 0314 	add.w	r3, r7, #20
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fd fad7 	bl	8007630 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a086:	e043      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a088:	44020c00 	.word	0x44020c00
 800a08c:	03d09000 	.word	0x03d09000
 800a090:	003d0900 	.word	0x003d0900
 800a094:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a098:	4b79      	ldr	r3, [pc, #484]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a09a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a09e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0a4:	4b76      	ldr	r3, [pc, #472]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0302 	and.w	r3, r3, #2
 800a0ac:	2b02      	cmp	r3, #2
 800a0ae:	d10c      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d109      	bne.n	800a0ca <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0b6:	4b72      	ldr	r3, [pc, #456]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	08db      	lsrs	r3, r3, #3
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	4a70      	ldr	r2, [pc, #448]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0c8:	e01e      	b.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0ca:	4b6d      	ldr	r3, [pc, #436]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d6:	d106      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0de:	d102      	bne.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0e0:	4b69      	ldr	r3, [pc, #420]	@ (800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e4:	e010      	b.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0e6:	4b66      	ldr	r3, [pc, #408]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0f2:	d106      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0fa:	d102      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0fc:	4b63      	ldr	r3, [pc, #396]	@ (800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a100:	e002      	b.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a102:	2300      	movs	r3, #0
 800a104:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a106:	e003      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a108:	e002      	b.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a10e:	bf00      	nop
          }
        }
        break;
 800a110:	e0b1      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a112:	4b5b      	ldr	r3, [pc, #364]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a118:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a11c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a11e:	4b58      	ldr	r3, [pc, #352]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d106      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d103      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a136:	637b      	str	r3, [r7, #52]	@ 0x34
 800a138:	e01f      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a13a:	4b51      	ldr	r3, [pc, #324]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a13c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a140:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a144:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a148:	d106      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	2b40      	cmp	r3, #64	@ 0x40
 800a14e:	d103      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a150:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a154:	637b      	str	r3, [r7, #52]	@ 0x34
 800a156:	e010      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a158:	4b49      	ldr	r3, [pc, #292]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a164:	d106      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	2b80      	cmp	r3, #128	@ 0x80
 800a16a:	d103      	bne.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a16c:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
 800a172:	e002      	b.n	800a17a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a178:	e07d      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a17a:	e07c      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a17c:	4b40      	ldr	r3, [pc, #256]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a17e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a182:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a186:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a188:	4b3d      	ldr	r3, [pc, #244]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a194:	d105      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d102      	bne.n	800a1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a19c:	4b3c      	ldr	r3, [pc, #240]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a19e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a0:	e031      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a1a2:	4b37      	ldr	r3, [pc, #220]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ae:	d10a      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b2:	2b10      	cmp	r3, #16
 800a1b4:	d107      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1b6:	f107 0320 	add.w	r3, r7, #32
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fd f8cc 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c4:	e01f      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a1c6:	4b2e      	ldr	r3, [pc, #184]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1cc:	f003 0302 	and.w	r3, r3, #2
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d106      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	d103      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a1da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e0:	e011      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a1e2:	4b27      	ldr	r3, [pc, #156]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a1e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f0:	d106      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	2b30      	cmp	r3, #48	@ 0x30
 800a1f6:	d103      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a1f8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1fe:	e002      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a204:	e037      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a206:	e036      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a208:	4b1d      	ldr	r3, [pc, #116]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a20a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a20e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a212:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	2b10      	cmp	r3, #16
 800a218:	d107      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a21a:	f107 0320 	add.w	r3, r7, #32
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fd f89a 	bl	8007358 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a226:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a228:	e025      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a22a:	4b15      	ldr	r3, [pc, #84]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a236:	d10a      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23a:	2b20      	cmp	r3, #32
 800a23c:	d107      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a23e:	f107 0308 	add.w	r3, r7, #8
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd fb60 	bl	8007908 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24c:	e00f      	b.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a24e:	4b0c      	ldr	r3, [pc, #48]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a256:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a25a:	d105      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	2b30      	cmp	r3, #48	@ 0x30
 800a260:	d102      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a262:	4b0b      	ldr	r3, [pc, #44]	@ (800a290 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34
 800a266:	e002      	b.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a268:	2300      	movs	r3, #0
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a26c:	e003      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a26e:	e002      	b.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a270:	2300      	movs	r3, #0
 800a272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a274:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a278:	4618      	mov	r0, r3
 800a27a:	373c      	adds	r7, #60	@ 0x3c
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd90      	pop	{r4, r7, pc}
 800a280:	44020c00 	.word	0x44020c00
 800a284:	03d09000 	.word	0x03d09000
 800a288:	003d0900 	.word	0x003d0900
 800a28c:	017d7840 	.word	0x017d7840
 800a290:	02dc6c00 	.word	0x02dc6c00

0800a294 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a29c:	4b48      	ldr	r3, [pc, #288]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a47      	ldr	r2, [pc, #284]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a2a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a2a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a2a8:	f7f7 fa9e 	bl	80017e8 <HAL_GetTick>
 800a2ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2ae:	e008      	b.n	800a2c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a2b0:	f7f7 fa9a 	bl	80017e8 <HAL_GetTick>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d901      	bls.n	800a2c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e07a      	b.n	800a3b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a2c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1f0      	bne.n	800a2b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a2ce:	4b3c      	ldr	r3, [pc, #240]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a2d6:	f023 0303 	bic.w	r3, r3, #3
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6811      	ldr	r1, [r2, #0]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6852      	ldr	r2, [r2, #4]
 800a2e2:	0212      	lsls	r2, r2, #8
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	4936      	ldr	r1, [pc, #216]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68db      	ldr	r3, [r3, #12]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	025b      	lsls	r3, r3, #9
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	431a      	orrs	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	3b01      	subs	r3, #1
 800a308:	041b      	lsls	r3, r3, #16
 800a30a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	3b01      	subs	r3, #1
 800a316:	061b      	lsls	r3, r3, #24
 800a318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a31c:	4928      	ldr	r1, [pc, #160]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a322:	4b27      	ldr	r3, [pc, #156]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a326:	f023 020c 	bic.w	r2, r3, #12
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	4924      	ldr	r1, [pc, #144]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a330:	4313      	orrs	r3, r2
 800a332:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a334:	4b22      	ldr	r3, [pc, #136]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a338:	f023 0220 	bic.w	r2, r3, #32
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	69db      	ldr	r3, [r3, #28]
 800a340:	491f      	ldr	r1, [pc, #124]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a342:	4313      	orrs	r3, r2
 800a344:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a346:	4b1e      	ldr	r3, [pc, #120]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	491c      	ldr	r1, [pc, #112]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a350:	4313      	orrs	r3, r2
 800a352:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a354:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	4a19      	ldr	r2, [pc, #100]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a35a:	f023 0310 	bic.w	r3, r3, #16
 800a35e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a360:	4b17      	ldr	r3, [pc, #92]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a364:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a368:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	6a12      	ldr	r2, [r2, #32]
 800a370:	00d2      	lsls	r2, r2, #3
 800a372:	4913      	ldr	r1, [pc, #76]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a374:	4313      	orrs	r3, r2
 800a376:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a378:	4b11      	ldr	r3, [pc, #68]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	4a10      	ldr	r2, [pc, #64]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a37e:	f043 0310 	orr.w	r3, r3, #16
 800a382:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a384:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a0d      	ldr	r2, [pc, #52]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a38a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a38e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a390:	f7f7 fa2a 	bl	80017e8 <HAL_GetTick>
 800a394:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a396:	e008      	b.n	800a3aa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a398:	f7f7 fa26 	bl	80017e8 <HAL_GetTick>
 800a39c:	4602      	mov	r2, r0
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d901      	bls.n	800a3aa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e006      	b.n	800a3b8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a3aa:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <RCCEx_PLL2_Config+0x12c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0f0      	beq.n	800a398 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0

}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	44020c00 	.word	0x44020c00

0800a3c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a3cc:	4b48      	ldr	r3, [pc, #288]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a47      	ldr	r2, [pc, #284]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a3d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a3d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3d8:	f7f7 fa06 	bl	80017e8 <HAL_GetTick>
 800a3dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3de:	e008      	b.n	800a3f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3e0:	f7f7 fa02 	bl	80017e8 <HAL_GetTick>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	1ad3      	subs	r3, r2, r3
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d901      	bls.n	800a3f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e07a      	b.n	800a4e8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3f2:	4b3f      	ldr	r3, [pc, #252]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1f0      	bne.n	800a3e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a3fe:	4b3c      	ldr	r3, [pc, #240]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a402:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a406:	f023 0303 	bic.w	r3, r3, #3
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	6811      	ldr	r1, [r2, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6852      	ldr	r2, [r2, #4]
 800a412:	0212      	lsls	r2, r2, #8
 800a414:	430a      	orrs	r2, r1
 800a416:	4936      	ldr	r1, [pc, #216]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a418:	4313      	orrs	r3, r2
 800a41a:	630b      	str	r3, [r1, #48]	@ 0x30
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	3b01      	subs	r3, #1
 800a422:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	3b01      	subs	r3, #1
 800a42c:	025b      	lsls	r3, r3, #9
 800a42e:	b29b      	uxth	r3, r3
 800a430:	431a      	orrs	r2, r3
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	3b01      	subs	r3, #1
 800a438:	041b      	lsls	r3, r3, #16
 800a43a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	695b      	ldr	r3, [r3, #20]
 800a444:	3b01      	subs	r3, #1
 800a446:	061b      	lsls	r3, r3, #24
 800a448:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a44c:	4928      	ldr	r1, [pc, #160]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a452:	4b27      	ldr	r3, [pc, #156]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a456:	f023 020c 	bic.w	r2, r3, #12
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	4924      	ldr	r1, [pc, #144]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a460:	4313      	orrs	r3, r2
 800a462:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a464:	4b22      	ldr	r3, [pc, #136]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a468:	f023 0220 	bic.w	r2, r3, #32
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	491f      	ldr	r1, [pc, #124]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a472:	4313      	orrs	r3, r2
 800a474:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a476:	4b1e      	ldr	r3, [pc, #120]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47e:	491c      	ldr	r1, [pc, #112]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a480:	4313      	orrs	r3, r2
 800a482:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a484:	4b1a      	ldr	r3, [pc, #104]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a488:	4a19      	ldr	r2, [pc, #100]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a48a:	f023 0310 	bic.w	r3, r3, #16
 800a48e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a490:	4b17      	ldr	r3, [pc, #92]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a494:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a498:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	6a12      	ldr	r2, [r2, #32]
 800a4a0:	00d2      	lsls	r2, r2, #3
 800a4a2:	4913      	ldr	r1, [pc, #76]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a4a8:	4b11      	ldr	r3, [pc, #68]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ac:	4a10      	ldr	r2, [pc, #64]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4ae:	f043 0310 	orr.w	r3, r3, #16
 800a4b2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a0d      	ldr	r2, [pc, #52]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4be:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4c0:	f7f7 f992 	bl	80017e8 <HAL_GetTick>
 800a4c4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4c6:	e008      	b.n	800a4da <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4c8:	f7f7 f98e 	bl	80017e8 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d901      	bls.n	800a4da <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e006      	b.n	800a4e8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4da:	4b05      	ldr	r3, [pc, #20]	@ (800a4f0 <RCCEx_PLL3_Config+0x12c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f0      	beq.n	800a4c8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	44020c00 	.word	0x44020c00

0800a4f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d101      	bne.n	800a506 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e08c      	b.n	800a620 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7a5b      	ldrb	r3, [r3, #9]
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d105      	bne.n	800a51c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7f6 fe02 	bl	8001120 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f022 0204 	bic.w	r2, r2, #4
 800a530:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6859      	ldr	r1, [r3, #4]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	4b3b      	ldr	r3, [pc, #236]	@ (800a628 <HAL_RNG_Init+0x134>)
 800a53c:	430b      	orrs	r3, r1
 800a53e:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a548:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a37      	ldr	r2, [pc, #220]	@ (800a62c <HAL_RNG_Init+0x138>)
 800a550:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a560:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a562:	f7f7 f941 	bl	80017e8 <HAL_GetTick>
 800a566:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a568:	e016      	b.n	800a598 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a56a:	f7f7 f93d 	bl	80017e8 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	2b04      	cmp	r3, #4
 800a576:	d90f      	bls.n	800a598 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a586:	d107      	bne.n	800a598 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e043      	b.n	800a620 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5a6:	d0e0      	beq.n	800a56a <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0204 	orr.w	r2, r2, #4
 800a5b6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c2:	2b40      	cmp	r3, #64	@ 0x40
 800a5c4:	d104      	bne.n	800a5d0 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e027      	b.n	800a620 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a5d0:	f7f7 f90a 	bl	80017e8 <HAL_GetTick>
 800a5d4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a5d6:	e015      	b.n	800a604 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a5d8:	f7f7 f906 	bl	80017e8 <HAL_GetTick>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	1ad3      	subs	r3, r2, r3
 800a5e2:	2b04      	cmp	r3, #4
 800a5e4:	d90e      	bls.n	800a604 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f003 0301 	and.w	r3, r3, #1
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d007      	beq.n	800a604 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2204      	movs	r2, #4
 800a5f8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	e00d      	b.n	800a620 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d1e2      	bne.n	800a5d8 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	40f00e00 	.word	0x40f00e00
 800a62c:	0003af66 	.word	0x0003af66

0800a630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d101      	bne.n	800a642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e042      	b.n	800a6c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7f6 fee1 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2224      	movs	r2, #36	@ 0x24
 800a65e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fab4 	bl	800abe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f8c3 	bl	800a80c <UART_SetConfig>
 800a686:	4603      	mov	r3, r0
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d101      	bne.n	800a690 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e01b      	b.n	800a6c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a69e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	689a      	ldr	r2, [r3, #8]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a6ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0201 	orr.w	r2, r2, #1
 800a6be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fb33 	bl	800ad2c <UART_CheckIdleState>
 800a6c6:	4603      	mov	r3, r0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b08a      	sub	sp, #40	@ 0x28
 800a6d4:	af02      	add	r7, sp, #8
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	603b      	str	r3, [r7, #0]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	f040 808b 	bne.w	800a802 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <HAL_UART_Transmit+0x28>
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e083      	b.n	800a804 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a706:	2b80      	cmp	r3, #128	@ 0x80
 800a708:	d107      	bne.n	800a71a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a718:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2221      	movs	r2, #33	@ 0x21
 800a726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a72a:	f7f7 f85d 	bl	80017e8 <HAL_GetTick>
 800a72e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	88fa      	ldrh	r2, [r7, #6]
 800a734:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	88fa      	ldrh	r2, [r7, #6]
 800a73c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a748:	d108      	bne.n	800a75c <HAL_UART_Transmit+0x8c>
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	691b      	ldr	r3, [r3, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a752:	2300      	movs	r3, #0
 800a754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	61bb      	str	r3, [r7, #24]
 800a75a:	e003      	b.n	800a764 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a760:	2300      	movs	r3, #0
 800a762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a764:	e030      	b.n	800a7c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2200      	movs	r2, #0
 800a76e:	2180      	movs	r1, #128	@ 0x80
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fb85 	bl	800ae80 <UART_WaitOnFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2220      	movs	r2, #32
 800a780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e03d      	b.n	800a804 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10b      	bne.n	800a7a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a79c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	61bb      	str	r3, [r7, #24]
 800a7a4:	e007      	b.n	800a7b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	781a      	ldrb	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a7b0:	69fb      	ldr	r3, [r7, #28]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1c8      	bne.n	800a766 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2140      	movs	r1, #64	@ 0x40
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fb4e 	bl	800ae80 <UART_WaitOnFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d005      	beq.n	800a7f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2220      	movs	r2, #32
 800a7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e006      	b.n	800a804 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2220      	movs	r2, #32
 800a7fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	e000      	b.n	800a804 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a802:	2302      	movs	r3, #2
  }
}
 800a804:	4618      	mov	r0, r3
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a80c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a810:	b094      	sub	sp, #80	@ 0x50
 800a812:	af00      	add	r7, sp, #0
 800a814:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	681a      	ldr	r2, [r3, #0]
 800a820:	4b78      	ldr	r3, [pc, #480]	@ (800aa04 <UART_SetConfig+0x1f8>)
 800a822:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	431a      	orrs	r2, r3
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	4313      	orrs	r3, r2
 800a83a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a83c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4971      	ldr	r1, [pc, #452]	@ (800aa08 <UART_SetConfig+0x1fc>)
 800a844:	4019      	ands	r1, r3
 800a846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a84c:	430b      	orrs	r3, r1
 800a84e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a85c:	68d9      	ldr	r1, [r3, #12]
 800a85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	ea40 0301 	orr.w	r3, r0, r1
 800a866:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	4b64      	ldr	r3, [pc, #400]	@ (800aa04 <UART_SetConfig+0x1f8>)
 800a874:	429a      	cmp	r2, r3
 800a876:	d009      	beq.n	800a88c <UART_SetConfig+0x80>
 800a878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	4b63      	ldr	r3, [pc, #396]	@ (800aa0c <UART_SetConfig+0x200>)
 800a87e:	429a      	cmp	r2, r3
 800a880:	d004      	beq.n	800a88c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a884:	6a1a      	ldr	r2, [r3, #32]
 800a886:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a888:	4313      	orrs	r3, r2
 800a88a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a896:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8aa:	f023 000f 	bic.w	r0, r3, #15
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a8b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	ea40 0301 	orr.w	r3, r0, r1
 800a8ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	4b53      	ldr	r3, [pc, #332]	@ (800aa10 <UART_SetConfig+0x204>)
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d102      	bne.n	800a8cc <UART_SetConfig+0xc0>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ca:	e066      	b.n	800a99a <UART_SetConfig+0x18e>
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	4b50      	ldr	r3, [pc, #320]	@ (800aa14 <UART_SetConfig+0x208>)
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d102      	bne.n	800a8dc <UART_SetConfig+0xd0>
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8da:	e05e      	b.n	800a99a <UART_SetConfig+0x18e>
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4b4d      	ldr	r3, [pc, #308]	@ (800aa18 <UART_SetConfig+0x20c>)
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d102      	bne.n	800a8ec <UART_SetConfig+0xe0>
 800a8e6:	2304      	movs	r3, #4
 800a8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8ea:	e056      	b.n	800a99a <UART_SetConfig+0x18e>
 800a8ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4b4a      	ldr	r3, [pc, #296]	@ (800aa1c <UART_SetConfig+0x210>)
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d102      	bne.n	800a8fc <UART_SetConfig+0xf0>
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8fa:	e04e      	b.n	800a99a <UART_SetConfig+0x18e>
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	4b47      	ldr	r3, [pc, #284]	@ (800aa20 <UART_SetConfig+0x214>)
 800a902:	429a      	cmp	r2, r3
 800a904:	d102      	bne.n	800a90c <UART_SetConfig+0x100>
 800a906:	2310      	movs	r3, #16
 800a908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a90a:	e046      	b.n	800a99a <UART_SetConfig+0x18e>
 800a90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	4b44      	ldr	r3, [pc, #272]	@ (800aa24 <UART_SetConfig+0x218>)
 800a912:	429a      	cmp	r2, r3
 800a914:	d102      	bne.n	800a91c <UART_SetConfig+0x110>
 800a916:	2320      	movs	r3, #32
 800a918:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a91a:	e03e      	b.n	800a99a <UART_SetConfig+0x18e>
 800a91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	4b41      	ldr	r3, [pc, #260]	@ (800aa28 <UART_SetConfig+0x21c>)
 800a922:	429a      	cmp	r2, r3
 800a924:	d102      	bne.n	800a92c <UART_SetConfig+0x120>
 800a926:	2340      	movs	r3, #64	@ 0x40
 800a928:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a92a:	e036      	b.n	800a99a <UART_SetConfig+0x18e>
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	4b3e      	ldr	r3, [pc, #248]	@ (800aa2c <UART_SetConfig+0x220>)
 800a932:	429a      	cmp	r2, r3
 800a934:	d102      	bne.n	800a93c <UART_SetConfig+0x130>
 800a936:	2380      	movs	r3, #128	@ 0x80
 800a938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a93a:	e02e      	b.n	800a99a <UART_SetConfig+0x18e>
 800a93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4b3b      	ldr	r3, [pc, #236]	@ (800aa30 <UART_SetConfig+0x224>)
 800a942:	429a      	cmp	r2, r3
 800a944:	d103      	bne.n	800a94e <UART_SetConfig+0x142>
 800a946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a94a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a94c:	e025      	b.n	800a99a <UART_SetConfig+0x18e>
 800a94e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	4b38      	ldr	r3, [pc, #224]	@ (800aa34 <UART_SetConfig+0x228>)
 800a954:	429a      	cmp	r2, r3
 800a956:	d103      	bne.n	800a960 <UART_SetConfig+0x154>
 800a958:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a95c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a95e:	e01c      	b.n	800a99a <UART_SetConfig+0x18e>
 800a960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	4b34      	ldr	r3, [pc, #208]	@ (800aa38 <UART_SetConfig+0x22c>)
 800a966:	429a      	cmp	r2, r3
 800a968:	d103      	bne.n	800a972 <UART_SetConfig+0x166>
 800a96a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a96e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a970:	e013      	b.n	800a99a <UART_SetConfig+0x18e>
 800a972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	4b31      	ldr	r3, [pc, #196]	@ (800aa3c <UART_SetConfig+0x230>)
 800a978:	429a      	cmp	r2, r3
 800a97a:	d103      	bne.n	800a984 <UART_SetConfig+0x178>
 800a97c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a980:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a982:	e00a      	b.n	800a99a <UART_SetConfig+0x18e>
 800a984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4b1e      	ldr	r3, [pc, #120]	@ (800aa04 <UART_SetConfig+0x1f8>)
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d103      	bne.n	800a996 <UART_SetConfig+0x18a>
 800a98e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a992:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a994:	e001      	b.n	800a99a <UART_SetConfig+0x18e>
 800a996:	2300      	movs	r3, #0
 800a998:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b19      	ldr	r3, [pc, #100]	@ (800aa04 <UART_SetConfig+0x1f8>)
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d005      	beq.n	800a9b0 <UART_SetConfig+0x1a4>
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	4b18      	ldr	r3, [pc, #96]	@ (800aa0c <UART_SetConfig+0x200>)
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	f040 8094 	bne.w	800aad8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a9b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	623b      	str	r3, [r7, #32]
 800a9b6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a9b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a9bc:	f7fd f910 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a9c0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80f7 	beq.w	800abb8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	4a1c      	ldr	r2, [pc, #112]	@ (800aa40 <UART_SetConfig+0x234>)
 800a9d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9dc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9e0:	685a      	ldr	r2, [r3, #4]
 800a9e2:	4613      	mov	r3, r2
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	4413      	add	r3, r2
 800a9e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d305      	bcc.n	800a9fa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d924      	bls.n	800aa44 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800aa00:	e069      	b.n	800aad6 <UART_SetConfig+0x2ca>
 800aa02:	bf00      	nop
 800aa04:	44002400 	.word	0x44002400
 800aa08:	cfff69f3 	.word	0xcfff69f3
 800aa0c:	54002400 	.word	0x54002400
 800aa10:	40013800 	.word	0x40013800
 800aa14:	40004400 	.word	0x40004400
 800aa18:	40004800 	.word	0x40004800
 800aa1c:	40004c00 	.word	0x40004c00
 800aa20:	40005000 	.word	0x40005000
 800aa24:	40006400 	.word	0x40006400
 800aa28:	40007800 	.word	0x40007800
 800aa2c:	40007c00 	.word	0x40007c00
 800aa30:	40008000 	.word	0x40008000
 800aa34:	40006800 	.word	0x40006800
 800aa38:	40006c00 	.word	0x40006c00
 800aa3c:	40008400 	.word	0x40008400
 800aa40:	0800c1ac 	.word	0x0800c1ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa46:	2200      	movs	r2, #0
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	61fa      	str	r2, [r7, #28]
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa50:	4a64      	ldr	r2, [pc, #400]	@ (800abe4 <UART_SetConfig+0x3d8>)
 800aa52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	2200      	movs	r2, #0
 800aa5a:	613b      	str	r3, [r7, #16]
 800aa5c:	617a      	str	r2, [r7, #20]
 800aa5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800aa66:	f7f5 fc19 	bl	800029c <__aeabi_uldivmod>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4610      	mov	r0, r2
 800aa70:	4619      	mov	r1, r3
 800aa72:	f04f 0200 	mov.w	r2, #0
 800aa76:	f04f 0300 	mov.w	r3, #0
 800aa7a:	020b      	lsls	r3, r1, #8
 800aa7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa80:	0202      	lsls	r2, r0, #8
 800aa82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa84:	6849      	ldr	r1, [r1, #4]
 800aa86:	0849      	lsrs	r1, r1, #1
 800aa88:	2000      	movs	r0, #0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	eb12 0804 	adds.w	r8, r2, r4
 800aa92:	eb43 0905 	adc.w	r9, r3, r5
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	60bb      	str	r3, [r7, #8]
 800aa9e:	60fa      	str	r2, [r7, #12]
 800aaa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	f7f5 fbf8 	bl	800029c <__aeabi_uldivmod>
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	4613      	mov	r3, r2
 800aab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaba:	d308      	bcc.n	800aace <UART_SetConfig+0x2c2>
 800aabc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aabe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aac2:	d204      	bcs.n	800aace <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800aac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aaca:	60da      	str	r2, [r3, #12]
 800aacc:	e003      	b.n	800aad6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800aad4:	e070      	b.n	800abb8 <UART_SetConfig+0x3ac>
 800aad6:	e06f      	b.n	800abb8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aae0:	d13c      	bne.n	800ab5c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aae4:	2200      	movs	r2, #0
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	607a      	str	r2, [r7, #4]
 800aaea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aaee:	f7fd f877 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
 800aaf2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aaf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d05e      	beq.n	800abb8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafe:	4a39      	ldr	r2, [pc, #228]	@ (800abe4 <UART_SetConfig+0x3d8>)
 800ab00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab04:	461a      	mov	r2, r3
 800ab06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab0c:	005a      	lsls	r2, r3, #1
 800ab0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	085b      	lsrs	r3, r3, #1
 800ab14:	441a      	add	r2, r3
 800ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab22:	2b0f      	cmp	r3, #15
 800ab24:	d916      	bls.n	800ab54 <UART_SetConfig+0x348>
 800ab26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab2c:	d212      	bcs.n	800ab54 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	f023 030f 	bic.w	r3, r3, #15
 800ab36:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	f003 0307 	and.w	r3, r3, #7
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ab46:	4313      	orrs	r3, r2
 800ab48:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ab4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ab50:	60da      	str	r2, [r3, #12]
 800ab52:	e031      	b.n	800abb8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ab5a:	e02d      	b.n	800abb8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ab5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab5e:	2200      	movs	r2, #0
 800ab60:	469a      	mov	sl, r3
 800ab62:	4693      	mov	fp, r2
 800ab64:	4650      	mov	r0, sl
 800ab66:	4659      	mov	r1, fp
 800ab68:	f7fd f83a 	bl	8007be0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ab6c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d021      	beq.n	800abb8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab78:	4a1a      	ldr	r2, [pc, #104]	@ (800abe4 <UART_SetConfig+0x3d8>)
 800ab7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	085b      	lsrs	r3, r3, #1
 800ab8c:	441a      	add	r2, r3
 800ab8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab9a:	2b0f      	cmp	r3, #15
 800ab9c:	d909      	bls.n	800abb2 <UART_SetConfig+0x3a6>
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aba4:	d205      	bcs.n	800abb2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	60da      	str	r2, [r3, #12]
 800abb0:	e002      	b.n	800abb8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abba:	2201      	movs	r2, #1
 800abbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc2:	2201      	movs	r2, #1
 800abc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abca:	2200      	movs	r2, #0
 800abcc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800abce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd0:	2200      	movs	r2, #0
 800abd2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800abd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3750      	adds	r7, #80	@ 0x50
 800abdc:	46bd      	mov	sp, r7
 800abde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abe2:	bf00      	nop
 800abe4:	0800c1ac 	.word	0x0800c1ac

0800abe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00a      	beq.n	800ac12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	430a      	orrs	r2, r1
 800ac10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00a      	beq.n	800ac34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00a      	beq.n	800ac56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	430a      	orrs	r2, r1
 800ac54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5a:	f003 0304 	and.w	r3, r3, #4
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d00a      	beq.n	800ac78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac7c:	f003 0310 	and.w	r3, r3, #16
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00a      	beq.n	800ac9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	430a      	orrs	r2, r1
 800ac98:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9e:	f003 0320 	and.w	r3, r3, #32
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	430a      	orrs	r2, r1
 800acba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d01a      	beq.n	800acfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	430a      	orrs	r2, r1
 800acdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ace6:	d10a      	bne.n	800acfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	430a      	orrs	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	430a      	orrs	r2, r1
 800ad1e:	605a      	str	r2, [r3, #4]
  }
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b098      	sub	sp, #96	@ 0x60
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad3c:	f7f6 fd54 	bl	80017e8 <HAL_GetTick>
 800ad40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 0308 	and.w	r3, r3, #8
 800ad4c:	2b08      	cmp	r3, #8
 800ad4e:	d12f      	bne.n	800adb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f88e 	bl	800ae80 <UART_WaitOnFlagUntilTimeout>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d022      	beq.n	800adb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad88:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e063      	b.n	800ae78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0304 	and.w	r3, r3, #4
 800adba:	2b04      	cmp	r3, #4
 800adbc:	d149      	bne.n	800ae52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adbe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adc6:	2200      	movs	r2, #0
 800adc8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f857 	bl	800ae80 <UART_WaitOnFlagUntilTimeout>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d03c      	beq.n	800ae52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	623b      	str	r3, [r7, #32]
   return(result);
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	461a      	mov	r2, r3
 800adf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800adf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e6      	bne.n	800add8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	e853 3f00 	ldrex	r3, [r3]
 800ae18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3308      	adds	r3, #8
 800ae28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae2a:	61fa      	str	r2, [r7, #28]
 800ae2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	69b9      	ldr	r1, [r7, #24]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	617b      	str	r3, [r7, #20]
   return(result);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e5      	bne.n	800ae0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae4e:	2303      	movs	r3, #3
 800ae50:	e012      	b.n	800ae78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2220      	movs	r2, #32
 800ae56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3758      	adds	r7, #88	@ 0x58
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	603b      	str	r3, [r7, #0]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae90:	e04f      	b.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae98:	d04b      	beq.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae9a:	f7f6 fca5 	bl	80017e8 <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d302      	bcc.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x30>
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d101      	bne.n	800aeb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e04e      	b.n	800af52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0304 	and.w	r3, r3, #4
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d037      	beq.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2b80      	cmp	r3, #128	@ 0x80
 800aec6:	d034      	beq.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b40      	cmp	r3, #64	@ 0x40
 800aecc:	d031      	beq.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	69db      	ldr	r3, [r3, #28]
 800aed4:	f003 0308 	and.w	r3, r3, #8
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d110      	bne.n	800aefe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2208      	movs	r2, #8
 800aee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f838 	bl	800af5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2208      	movs	r2, #8
 800aeee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e029      	b.n	800af52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af0c:	d111      	bne.n	800af32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f000 f81e 	bl	800af5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2220      	movs	r2, #32
 800af22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af2e:	2303      	movs	r3, #3
 800af30:	e00f      	b.n	800af52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	69da      	ldr	r2, [r3, #28]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	4013      	ands	r3, r2
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	429a      	cmp	r2, r3
 800af40:	bf0c      	ite	eq
 800af42:	2301      	moveq	r3, #1
 800af44:	2300      	movne	r3, #0
 800af46:	b2db      	uxtb	r3, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	79fb      	ldrb	r3, [r7, #7]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d0a0      	beq.n	800ae92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af5a:	b480      	push	{r7}
 800af5c:	b095      	sub	sp, #84	@ 0x54
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af80:	643b      	str	r3, [r7, #64]	@ 0x40
 800af82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e6      	bne.n	800af62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9c:	6a3b      	ldr	r3, [r7, #32]
 800af9e:	e853 3f00 	ldrex	r3, [r3]
 800afa2:	61fb      	str	r3, [r7, #28]
   return(result);
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afaa:	f023 0301 	bic.w	r3, r3, #1
 800afae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3308      	adds	r3, #8
 800afb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800afb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800afba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e3      	bne.n	800af94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d118      	bne.n	800b006 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f023 0310 	bic.w	r3, r3, #16
 800afe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	461a      	mov	r2, r3
 800aff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aff2:	61bb      	str	r3, [r7, #24]
 800aff4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff6:	6979      	ldr	r1, [r7, #20]
 800aff8:	69ba      	ldr	r2, [r7, #24]
 800affa:	e841 2300 	strex	r3, r2, [r1]
 800affe:	613b      	str	r3, [r7, #16]
   return(result);
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1e6      	bne.n	800afd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b01a:	bf00      	nop
 800b01c:	3754      	adds	r7, #84	@ 0x54
 800b01e:	46bd      	mov	sp, r7
 800b020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b024:	4770      	bx	lr

0800b026 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b026:	b480      	push	{r7}
 800b028:	b085      	sub	sp, #20
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b034:	2b01      	cmp	r3, #1
 800b036:	d101      	bne.n	800b03c <HAL_UARTEx_DisableFifoMode+0x16>
 800b038:	2302      	movs	r3, #2
 800b03a:	e027      	b.n	800b08c <HAL_UARTEx_DisableFifoMode+0x66>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2224      	movs	r2, #36	@ 0x24
 800b048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f022 0201 	bic.w	r2, r2, #1
 800b062:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b06a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e02d      	b.n	800b10c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2224      	movs	r2, #36	@ 0x24
 800b0bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f022 0201 	bic.w	r2, r2, #1
 800b0d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f84f 	bl	800b190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b124:	2b01      	cmp	r3, #1
 800b126:	d101      	bne.n	800b12c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b128:	2302      	movs	r3, #2
 800b12a:	e02d      	b.n	800b188 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2224      	movs	r2, #36	@ 0x24
 800b138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f022 0201 	bic.w	r2, r2, #1
 800b152:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 f811 	bl	800b190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b190:	b480      	push	{r7}
 800b192:	b085      	sub	sp, #20
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d108      	bne.n	800b1b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1b0:	e031      	b.n	800b216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1b6:	2308      	movs	r3, #8
 800b1b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	0e5b      	lsrs	r3, r3, #25
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	0f5b      	lsrs	r3, r3, #29
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1da:	7bbb      	ldrb	r3, [r7, #14]
 800b1dc:	7b3a      	ldrb	r2, [r7, #12]
 800b1de:	4911      	ldr	r1, [pc, #68]	@ (800b224 <UARTEx_SetNbDataToProcess+0x94>)
 800b1e0:	5c8a      	ldrb	r2, [r1, r2]
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1e6:	7b3a      	ldrb	r2, [r7, #12]
 800b1e8:	490f      	ldr	r1, [pc, #60]	@ (800b228 <UARTEx_SetNbDataToProcess+0x98>)
 800b1ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1f8:	7bfb      	ldrb	r3, [r7, #15]
 800b1fa:	7b7a      	ldrb	r2, [r7, #13]
 800b1fc:	4909      	ldr	r1, [pc, #36]	@ (800b224 <UARTEx_SetNbDataToProcess+0x94>)
 800b1fe:	5c8a      	ldrb	r2, [r1, r2]
 800b200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b204:	7b7a      	ldrb	r2, [r7, #13]
 800b206:	4908      	ldr	r1, [pc, #32]	@ (800b228 <UARTEx_SetNbDataToProcess+0x98>)
 800b208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b20a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b20e:	b29a      	uxth	r2, r3
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b216:	bf00      	nop
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop
 800b224:	0800c1c4 	.word	0x0800c1c4
 800b228:	0800c1cc 	.word	0x0800c1cc

0800b22c <sbrk_aligned>:
 800b22c:	b570      	push	{r4, r5, r6, lr}
 800b22e:	4e0f      	ldr	r6, [pc, #60]	@ (800b26c <sbrk_aligned+0x40>)
 800b230:	460c      	mov	r4, r1
 800b232:	4605      	mov	r5, r0
 800b234:	6831      	ldr	r1, [r6, #0]
 800b236:	b911      	cbnz	r1, 800b23e <sbrk_aligned+0x12>
 800b238:	f000 fa98 	bl	800b76c <_sbrk_r>
 800b23c:	6030      	str	r0, [r6, #0]
 800b23e:	4621      	mov	r1, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 fa93 	bl	800b76c <_sbrk_r>
 800b246:	1c43      	adds	r3, r0, #1
 800b248:	d103      	bne.n	800b252 <sbrk_aligned+0x26>
 800b24a:	f04f 34ff 	mov.w	r4, #4294967295
 800b24e:	4620      	mov	r0, r4
 800b250:	bd70      	pop	{r4, r5, r6, pc}
 800b252:	1cc4      	adds	r4, r0, #3
 800b254:	f024 0403 	bic.w	r4, r4, #3
 800b258:	42a0      	cmp	r0, r4
 800b25a:	d0f8      	beq.n	800b24e <sbrk_aligned+0x22>
 800b25c:	1a21      	subs	r1, r4, r0
 800b25e:	4628      	mov	r0, r5
 800b260:	f000 fa84 	bl	800b76c <_sbrk_r>
 800b264:	3001      	adds	r0, #1
 800b266:	d1f2      	bne.n	800b24e <sbrk_aligned+0x22>
 800b268:	e7ef      	b.n	800b24a <sbrk_aligned+0x1e>
 800b26a:	bf00      	nop
 800b26c:	20000474 	.word	0x20000474

0800b270 <_malloc_r>:
 800b270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b274:	1ccd      	adds	r5, r1, #3
 800b276:	4606      	mov	r6, r0
 800b278:	f025 0503 	bic.w	r5, r5, #3
 800b27c:	3508      	adds	r5, #8
 800b27e:	2d0c      	cmp	r5, #12
 800b280:	bf38      	it	cc
 800b282:	250c      	movcc	r5, #12
 800b284:	2d00      	cmp	r5, #0
 800b286:	db01      	blt.n	800b28c <_malloc_r+0x1c>
 800b288:	42a9      	cmp	r1, r5
 800b28a:	d904      	bls.n	800b296 <_malloc_r+0x26>
 800b28c:	230c      	movs	r3, #12
 800b28e:	6033      	str	r3, [r6, #0]
 800b290:	2000      	movs	r0, #0
 800b292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b36c <_malloc_r+0xfc>
 800b29a:	f000 f869 	bl	800b370 <__malloc_lock>
 800b29e:	f8d8 3000 	ldr.w	r3, [r8]
 800b2a2:	461c      	mov	r4, r3
 800b2a4:	bb44      	cbnz	r4, 800b2f8 <_malloc_r+0x88>
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7ff ffbf 	bl	800b22c <sbrk_aligned>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	d158      	bne.n	800b366 <_malloc_r+0xf6>
 800b2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b2b8:	4627      	mov	r7, r4
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	d143      	bne.n	800b346 <_malloc_r+0xd6>
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	d04b      	beq.n	800b35a <_malloc_r+0xea>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	eb04 0903 	add.w	r9, r4, r3
 800b2cc:	f000 fa4e 	bl	800b76c <_sbrk_r>
 800b2d0:	4581      	cmp	r9, r0
 800b2d2:	d142      	bne.n	800b35a <_malloc_r+0xea>
 800b2d4:	6821      	ldr	r1, [r4, #0]
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	1a6d      	subs	r5, r5, r1
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7ff ffa6 	bl	800b22c <sbrk_aligned>
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d03a      	beq.n	800b35a <_malloc_r+0xea>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	442b      	add	r3, r5
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ee:	685a      	ldr	r2, [r3, #4]
 800b2f0:	bb62      	cbnz	r2, 800b34c <_malloc_r+0xdc>
 800b2f2:	f8c8 7000 	str.w	r7, [r8]
 800b2f6:	e00f      	b.n	800b318 <_malloc_r+0xa8>
 800b2f8:	6822      	ldr	r2, [r4, #0]
 800b2fa:	1b52      	subs	r2, r2, r5
 800b2fc:	d420      	bmi.n	800b340 <_malloc_r+0xd0>
 800b2fe:	2a0b      	cmp	r2, #11
 800b300:	d917      	bls.n	800b332 <_malloc_r+0xc2>
 800b302:	1961      	adds	r1, r4, r5
 800b304:	42a3      	cmp	r3, r4
 800b306:	6025      	str	r5, [r4, #0]
 800b308:	bf18      	it	ne
 800b30a:	6059      	strne	r1, [r3, #4]
 800b30c:	6863      	ldr	r3, [r4, #4]
 800b30e:	bf08      	it	eq
 800b310:	f8c8 1000 	streq.w	r1, [r8]
 800b314:	5162      	str	r2, [r4, r5]
 800b316:	604b      	str	r3, [r1, #4]
 800b318:	4630      	mov	r0, r6
 800b31a:	f000 f82f 	bl	800b37c <__malloc_unlock>
 800b31e:	f104 000b 	add.w	r0, r4, #11
 800b322:	1d23      	adds	r3, r4, #4
 800b324:	f020 0007 	bic.w	r0, r0, #7
 800b328:	1ac2      	subs	r2, r0, r3
 800b32a:	bf1c      	itt	ne
 800b32c:	1a1b      	subne	r3, r3, r0
 800b32e:	50a3      	strne	r3, [r4, r2]
 800b330:	e7af      	b.n	800b292 <_malloc_r+0x22>
 800b332:	6862      	ldr	r2, [r4, #4]
 800b334:	42a3      	cmp	r3, r4
 800b336:	bf0c      	ite	eq
 800b338:	f8c8 2000 	streq.w	r2, [r8]
 800b33c:	605a      	strne	r2, [r3, #4]
 800b33e:	e7eb      	b.n	800b318 <_malloc_r+0xa8>
 800b340:	4623      	mov	r3, r4
 800b342:	6864      	ldr	r4, [r4, #4]
 800b344:	e7ae      	b.n	800b2a4 <_malloc_r+0x34>
 800b346:	463c      	mov	r4, r7
 800b348:	687f      	ldr	r7, [r7, #4]
 800b34a:	e7b6      	b.n	800b2ba <_malloc_r+0x4a>
 800b34c:	461a      	mov	r2, r3
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	42a3      	cmp	r3, r4
 800b352:	d1fb      	bne.n	800b34c <_malloc_r+0xdc>
 800b354:	2300      	movs	r3, #0
 800b356:	6053      	str	r3, [r2, #4]
 800b358:	e7de      	b.n	800b318 <_malloc_r+0xa8>
 800b35a:	230c      	movs	r3, #12
 800b35c:	4630      	mov	r0, r6
 800b35e:	6033      	str	r3, [r6, #0]
 800b360:	f000 f80c 	bl	800b37c <__malloc_unlock>
 800b364:	e794      	b.n	800b290 <_malloc_r+0x20>
 800b366:	6005      	str	r5, [r0, #0]
 800b368:	e7d6      	b.n	800b318 <_malloc_r+0xa8>
 800b36a:	bf00      	nop
 800b36c:	20000478 	.word	0x20000478

0800b370 <__malloc_lock>:
 800b370:	4801      	ldr	r0, [pc, #4]	@ (800b378 <__malloc_lock+0x8>)
 800b372:	f000 ba48 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	200005bc 	.word	0x200005bc

0800b37c <__malloc_unlock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	@ (800b384 <__malloc_unlock+0x8>)
 800b37e:	f000 ba43 	b.w	800b808 <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	200005bc 	.word	0x200005bc

0800b388 <std>:
 800b388:	2300      	movs	r3, #0
 800b38a:	b510      	push	{r4, lr}
 800b38c:	4604      	mov	r4, r0
 800b38e:	6083      	str	r3, [r0, #8]
 800b390:	8181      	strh	r1, [r0, #12]
 800b392:	4619      	mov	r1, r3
 800b394:	6643      	str	r3, [r0, #100]	@ 0x64
 800b396:	81c2      	strh	r2, [r0, #14]
 800b398:	2208      	movs	r2, #8
 800b39a:	6183      	str	r3, [r0, #24]
 800b39c:	e9c0 3300 	strd	r3, r3, [r0]
 800b3a0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3a4:	305c      	adds	r0, #92	@ 0x5c
 800b3a6:	f000 f9a5 	bl	800b6f4 <memset>
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <std+0x58>)
 800b3ac:	6224      	str	r4, [r4, #32]
 800b3ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e4 <std+0x5c>)
 800b3b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e8 <std+0x60>)
 800b3b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ec <std+0x64>)
 800b3ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f0 <std+0x68>)
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	d006      	beq.n	800b3d0 <std+0x48>
 800b3c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3c6:	4294      	cmp	r4, r2
 800b3c8:	d002      	beq.n	800b3d0 <std+0x48>
 800b3ca:	33d0      	adds	r3, #208	@ 0xd0
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	d105      	bne.n	800b3dc <std+0x54>
 800b3d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d8:	f000 ba14 	b.w	800b804 <__retarget_lock_init_recursive>
 800b3dc:	bd10      	pop	{r4, pc}
 800b3de:	bf00      	nop
 800b3e0:	0800b531 	.word	0x0800b531
 800b3e4:	0800b553 	.word	0x0800b553
 800b3e8:	0800b58b 	.word	0x0800b58b
 800b3ec:	0800b5af 	.word	0x0800b5af
 800b3f0:	2000047c 	.word	0x2000047c

0800b3f4 <stdio_exit_handler>:
 800b3f4:	4a02      	ldr	r2, [pc, #8]	@ (800b400 <stdio_exit_handler+0xc>)
 800b3f6:	4903      	ldr	r1, [pc, #12]	@ (800b404 <stdio_exit_handler+0x10>)
 800b3f8:	4803      	ldr	r0, [pc, #12]	@ (800b408 <stdio_exit_handler+0x14>)
 800b3fa:	f000 b869 	b.w	800b4d0 <_fwalk_sglue>
 800b3fe:	bf00      	nop
 800b400:	2000005c 	.word	0x2000005c
 800b404:	0800bf65 	.word	0x0800bf65
 800b408:	2000006c 	.word	0x2000006c

0800b40c <cleanup_stdio>:
 800b40c:	6841      	ldr	r1, [r0, #4]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	@ (800b440 <cleanup_stdio+0x34>)
 800b410:	4299      	cmp	r1, r3
 800b412:	b510      	push	{r4, lr}
 800b414:	4604      	mov	r4, r0
 800b416:	d001      	beq.n	800b41c <cleanup_stdio+0x10>
 800b418:	f000 fda4 	bl	800bf64 <_fflush_r>
 800b41c:	68a1      	ldr	r1, [r4, #8]
 800b41e:	4b09      	ldr	r3, [pc, #36]	@ (800b444 <cleanup_stdio+0x38>)
 800b420:	4299      	cmp	r1, r3
 800b422:	d002      	beq.n	800b42a <cleanup_stdio+0x1e>
 800b424:	4620      	mov	r0, r4
 800b426:	f000 fd9d 	bl	800bf64 <_fflush_r>
 800b42a:	68e1      	ldr	r1, [r4, #12]
 800b42c:	4b06      	ldr	r3, [pc, #24]	@ (800b448 <cleanup_stdio+0x3c>)
 800b42e:	4299      	cmp	r1, r3
 800b430:	d004      	beq.n	800b43c <cleanup_stdio+0x30>
 800b432:	4620      	mov	r0, r4
 800b434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b438:	f000 bd94 	b.w	800bf64 <_fflush_r>
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	2000047c 	.word	0x2000047c
 800b444:	200004e4 	.word	0x200004e4
 800b448:	2000054c 	.word	0x2000054c

0800b44c <global_stdio_init.part.0>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4b0b      	ldr	r3, [pc, #44]	@ (800b47c <global_stdio_init.part.0+0x30>)
 800b450:	2104      	movs	r1, #4
 800b452:	4c0b      	ldr	r4, [pc, #44]	@ (800b480 <global_stdio_init.part.0+0x34>)
 800b454:	4a0b      	ldr	r2, [pc, #44]	@ (800b484 <global_stdio_init.part.0+0x38>)
 800b456:	4620      	mov	r0, r4
 800b458:	601a      	str	r2, [r3, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7ff ff94 	bl	800b388 <std>
 800b460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b464:	2201      	movs	r2, #1
 800b466:	2109      	movs	r1, #9
 800b468:	f7ff ff8e 	bl	800b388 <std>
 800b46c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b470:	2202      	movs	r2, #2
 800b472:	2112      	movs	r1, #18
 800b474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b478:	f7ff bf86 	b.w	800b388 <std>
 800b47c:	200005b4 	.word	0x200005b4
 800b480:	2000047c 	.word	0x2000047c
 800b484:	0800b3f5 	.word	0x0800b3f5

0800b488 <__sfp_lock_acquire>:
 800b488:	4801      	ldr	r0, [pc, #4]	@ (800b490 <__sfp_lock_acquire+0x8>)
 800b48a:	f000 b9bc 	b.w	800b806 <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	200005bd 	.word	0x200005bd

0800b494 <__sfp_lock_release>:
 800b494:	4801      	ldr	r0, [pc, #4]	@ (800b49c <__sfp_lock_release+0x8>)
 800b496:	f000 b9b7 	b.w	800b808 <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	200005bd 	.word	0x200005bd

0800b4a0 <__sinit>:
 800b4a0:	b510      	push	{r4, lr}
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	f7ff fff0 	bl	800b488 <__sfp_lock_acquire>
 800b4a8:	6a23      	ldr	r3, [r4, #32]
 800b4aa:	b11b      	cbz	r3, 800b4b4 <__sinit+0x14>
 800b4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b0:	f7ff bff0 	b.w	800b494 <__sfp_lock_release>
 800b4b4:	4b04      	ldr	r3, [pc, #16]	@ (800b4c8 <__sinit+0x28>)
 800b4b6:	6223      	str	r3, [r4, #32]
 800b4b8:	4b04      	ldr	r3, [pc, #16]	@ (800b4cc <__sinit+0x2c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d1f5      	bne.n	800b4ac <__sinit+0xc>
 800b4c0:	f7ff ffc4 	bl	800b44c <global_stdio_init.part.0>
 800b4c4:	e7f2      	b.n	800b4ac <__sinit+0xc>
 800b4c6:	bf00      	nop
 800b4c8:	0800b40d 	.word	0x0800b40d
 800b4cc:	200005b4 	.word	0x200005b4

0800b4d0 <_fwalk_sglue>:
 800b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	4688      	mov	r8, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	2600      	movs	r6, #0
 800b4dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b4e4:	d505      	bpl.n	800b4f2 <_fwalk_sglue+0x22>
 800b4e6:	6824      	ldr	r4, [r4, #0]
 800b4e8:	2c00      	cmp	r4, #0
 800b4ea:	d1f7      	bne.n	800b4dc <_fwalk_sglue+0xc>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d907      	bls.n	800b508 <_fwalk_sglue+0x38>
 800b4f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	d003      	beq.n	800b508 <_fwalk_sglue+0x38>
 800b500:	4629      	mov	r1, r5
 800b502:	4638      	mov	r0, r7
 800b504:	47c0      	blx	r8
 800b506:	4306      	orrs	r6, r0
 800b508:	3568      	adds	r5, #104	@ 0x68
 800b50a:	e7e9      	b.n	800b4e0 <_fwalk_sglue+0x10>

0800b50c <iprintf>:
 800b50c:	b40f      	push	{r0, r1, r2, r3}
 800b50e:	b507      	push	{r0, r1, r2, lr}
 800b510:	4906      	ldr	r1, [pc, #24]	@ (800b52c <iprintf+0x20>)
 800b512:	ab04      	add	r3, sp, #16
 800b514:	6808      	ldr	r0, [r1, #0]
 800b516:	f853 2b04 	ldr.w	r2, [r3], #4
 800b51a:	6881      	ldr	r1, [r0, #8]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	f000 f9f5 	bl	800b90c <_vfiprintf_r>
 800b522:	b003      	add	sp, #12
 800b524:	f85d eb04 	ldr.w	lr, [sp], #4
 800b528:	b004      	add	sp, #16
 800b52a:	4770      	bx	lr
 800b52c:	20000068 	.word	0x20000068

0800b530 <__sread>:
 800b530:	b510      	push	{r4, lr}
 800b532:	460c      	mov	r4, r1
 800b534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b538:	f000 f906 	bl	800b748 <_read_r>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	bfab      	itete	ge
 800b540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b542:	89a3      	ldrhlt	r3, [r4, #12]
 800b544:	181b      	addge	r3, r3, r0
 800b546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b54a:	bfac      	ite	ge
 800b54c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b54e:	81a3      	strhlt	r3, [r4, #12]
 800b550:	bd10      	pop	{r4, pc}

0800b552 <__swrite>:
 800b552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b556:	461f      	mov	r7, r3
 800b558:	898b      	ldrh	r3, [r1, #12]
 800b55a:	4605      	mov	r5, r0
 800b55c:	460c      	mov	r4, r1
 800b55e:	05db      	lsls	r3, r3, #23
 800b560:	4616      	mov	r6, r2
 800b562:	d505      	bpl.n	800b570 <__swrite+0x1e>
 800b564:	2302      	movs	r3, #2
 800b566:	2200      	movs	r2, #0
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	f000 f8da 	bl	800b724 <_lseek_r>
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	4632      	mov	r2, r6
 800b574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b578:	4628      	mov	r0, r5
 800b57a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	463b      	mov	r3, r7
 800b582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b586:	f000 b901 	b.w	800b78c <_write_r>

0800b58a <__sseek>:
 800b58a:	b510      	push	{r4, lr}
 800b58c:	460c      	mov	r4, r1
 800b58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b592:	f000 f8c7 	bl	800b724 <_lseek_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	89a3      	ldrh	r3, [r4, #12]
 800b59a:	bf15      	itete	ne
 800b59c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b59e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5a6:	81a3      	strheq	r3, [r4, #12]
 800b5a8:	bf18      	it	ne
 800b5aa:	81a3      	strhne	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__sclose>:
 800b5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b2:	f000 b8a7 	b.w	800b704 <_close_r>
	...

0800b5b8 <viprintf>:
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	4903      	ldr	r1, [pc, #12]	@ (800b5c8 <viprintf+0x10>)
 800b5bc:	4602      	mov	r2, r0
 800b5be:	6808      	ldr	r0, [r1, #0]
 800b5c0:	6881      	ldr	r1, [r0, #8]
 800b5c2:	f000 b9a3 	b.w	800b90c <_vfiprintf_r>
 800b5c6:	bf00      	nop
 800b5c8:	20000068 	.word	0x20000068

0800b5cc <__swbuf_r>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	460e      	mov	r6, r1
 800b5d0:	4614      	mov	r4, r2
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	b118      	cbz	r0, 800b5de <__swbuf_r+0x12>
 800b5d6:	6a03      	ldr	r3, [r0, #32]
 800b5d8:	b90b      	cbnz	r3, 800b5de <__swbuf_r+0x12>
 800b5da:	f7ff ff61 	bl	800b4a0 <__sinit>
 800b5de:	69a3      	ldr	r3, [r4, #24]
 800b5e0:	60a3      	str	r3, [r4, #8]
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	071a      	lsls	r2, r3, #28
 800b5e6:	d501      	bpl.n	800b5ec <__swbuf_r+0x20>
 800b5e8:	6923      	ldr	r3, [r4, #16]
 800b5ea:	b943      	cbnz	r3, 800b5fe <__swbuf_r+0x32>
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f000 f82a 	bl	800b648 <__swsetup_r>
 800b5f4:	b118      	cbz	r0, 800b5fe <__swbuf_r+0x32>
 800b5f6:	f04f 37ff 	mov.w	r7, #4294967295
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	b2f6      	uxtb	r6, r6
 800b602:	6922      	ldr	r2, [r4, #16]
 800b604:	4637      	mov	r7, r6
 800b606:	1a98      	subs	r0, r3, r2
 800b608:	6963      	ldr	r3, [r4, #20]
 800b60a:	4283      	cmp	r3, r0
 800b60c:	dc05      	bgt.n	800b61a <__swbuf_r+0x4e>
 800b60e:	4621      	mov	r1, r4
 800b610:	4628      	mov	r0, r5
 800b612:	f000 fca7 	bl	800bf64 <_fflush_r>
 800b616:	2800      	cmp	r0, #0
 800b618:	d1ed      	bne.n	800b5f6 <__swbuf_r+0x2a>
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	60a3      	str	r3, [r4, #8]
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	1c5a      	adds	r2, r3, #1
 800b624:	6022      	str	r2, [r4, #0]
 800b626:	701e      	strb	r6, [r3, #0]
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	6962      	ldr	r2, [r4, #20]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d004      	beq.n	800b63a <__swbuf_r+0x6e>
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	07db      	lsls	r3, r3, #31
 800b634:	d5e1      	bpl.n	800b5fa <__swbuf_r+0x2e>
 800b636:	2e0a      	cmp	r6, #10
 800b638:	d1df      	bne.n	800b5fa <__swbuf_r+0x2e>
 800b63a:	4621      	mov	r1, r4
 800b63c:	4628      	mov	r0, r5
 800b63e:	f000 fc91 	bl	800bf64 <_fflush_r>
 800b642:	2800      	cmp	r0, #0
 800b644:	d0d9      	beq.n	800b5fa <__swbuf_r+0x2e>
 800b646:	e7d6      	b.n	800b5f6 <__swbuf_r+0x2a>

0800b648 <__swsetup_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4b29      	ldr	r3, [pc, #164]	@ (800b6f0 <__swsetup_r+0xa8>)
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	b118      	cbz	r0, 800b65c <__swsetup_r+0x14>
 800b654:	6a03      	ldr	r3, [r0, #32]
 800b656:	b90b      	cbnz	r3, 800b65c <__swsetup_r+0x14>
 800b658:	f7ff ff22 	bl	800b4a0 <__sinit>
 800b65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b660:	0719      	lsls	r1, r3, #28
 800b662:	d422      	bmi.n	800b6aa <__swsetup_r+0x62>
 800b664:	06da      	lsls	r2, r3, #27
 800b666:	d407      	bmi.n	800b678 <__swsetup_r+0x30>
 800b668:	2209      	movs	r2, #9
 800b66a:	602a      	str	r2, [r5, #0]
 800b66c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b670:	f04f 30ff 	mov.w	r0, #4294967295
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	e033      	b.n	800b6e0 <__swsetup_r+0x98>
 800b678:	0758      	lsls	r0, r3, #29
 800b67a:	d512      	bpl.n	800b6a2 <__swsetup_r+0x5a>
 800b67c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b67e:	b141      	cbz	r1, 800b692 <__swsetup_r+0x4a>
 800b680:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b684:	4299      	cmp	r1, r3
 800b686:	d002      	beq.n	800b68e <__swsetup_r+0x46>
 800b688:	4628      	mov	r0, r5
 800b68a:	f000 f8cb 	bl	800b824 <_free_r>
 800b68e:	2300      	movs	r3, #0
 800b690:	6363      	str	r3, [r4, #52]	@ 0x34
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	2300      	movs	r3, #0
 800b69c:	6063      	str	r3, [r4, #4]
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f043 0308 	orr.w	r3, r3, #8
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	6923      	ldr	r3, [r4, #16]
 800b6ac:	b94b      	cbnz	r3, 800b6c2 <__swsetup_r+0x7a>
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6b8:	d003      	beq.n	800b6c2 <__swsetup_r+0x7a>
 800b6ba:	4621      	mov	r1, r4
 800b6bc:	4628      	mov	r0, r5
 800b6be:	f000 fc9e 	bl	800bffe <__smakebuf_r>
 800b6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c6:	f013 0201 	ands.w	r2, r3, #1
 800b6ca:	d00a      	beq.n	800b6e2 <__swsetup_r+0x9a>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	60a2      	str	r2, [r4, #8]
 800b6d0:	6962      	ldr	r2, [r4, #20]
 800b6d2:	4252      	negs	r2, r2
 800b6d4:	61a2      	str	r2, [r4, #24]
 800b6d6:	6922      	ldr	r2, [r4, #16]
 800b6d8:	b942      	cbnz	r2, 800b6ec <__swsetup_r+0xa4>
 800b6da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6de:	d1c5      	bne.n	800b66c <__swsetup_r+0x24>
 800b6e0:	bd38      	pop	{r3, r4, r5, pc}
 800b6e2:	0799      	lsls	r1, r3, #30
 800b6e4:	bf58      	it	pl
 800b6e6:	6962      	ldrpl	r2, [r4, #20]
 800b6e8:	60a2      	str	r2, [r4, #8]
 800b6ea:	e7f4      	b.n	800b6d6 <__swsetup_r+0x8e>
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e7f7      	b.n	800b6e0 <__swsetup_r+0x98>
 800b6f0:	20000068 	.word	0x20000068

0800b6f4 <memset>:
 800b6f4:	4402      	add	r2, r0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d100      	bne.n	800b6fe <memset+0xa>
 800b6fc:	4770      	bx	lr
 800b6fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b702:	e7f9      	b.n	800b6f8 <memset+0x4>

0800b704 <_close_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	2300      	movs	r3, #0
 800b708:	4d05      	ldr	r5, [pc, #20]	@ (800b720 <_close_r+0x1c>)
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	602b      	str	r3, [r5, #0]
 800b710:	f7f5 fdcd 	bl	80012ae <_close>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_close_r+0x1a>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_close_r+0x1a>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	200005b8 	.word	0x200005b8

0800b724 <_lseek_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4604      	mov	r4, r0
 800b728:	4d06      	ldr	r5, [pc, #24]	@ (800b744 <_lseek_r+0x20>)
 800b72a:	4608      	mov	r0, r1
 800b72c:	4611      	mov	r1, r2
 800b72e:	2200      	movs	r2, #0
 800b730:	602a      	str	r2, [r5, #0]
 800b732:	461a      	mov	r2, r3
 800b734:	f7f5 fde2 	bl	80012fc <_lseek>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	d102      	bne.n	800b742 <_lseek_r+0x1e>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	b103      	cbz	r3, 800b742 <_lseek_r+0x1e>
 800b740:	6023      	str	r3, [r4, #0]
 800b742:	bd38      	pop	{r3, r4, r5, pc}
 800b744:	200005b8 	.word	0x200005b8

0800b748 <_read_r>:
 800b748:	b538      	push	{r3, r4, r5, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	4d06      	ldr	r5, [pc, #24]	@ (800b768 <_read_r+0x20>)
 800b74e:	4608      	mov	r0, r1
 800b750:	4611      	mov	r1, r2
 800b752:	2200      	movs	r2, #0
 800b754:	602a      	str	r2, [r5, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	f7f5 fd70 	bl	800123c <_read>
 800b75c:	1c43      	adds	r3, r0, #1
 800b75e:	d102      	bne.n	800b766 <_read_r+0x1e>
 800b760:	682b      	ldr	r3, [r5, #0]
 800b762:	b103      	cbz	r3, 800b766 <_read_r+0x1e>
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	200005b8 	.word	0x200005b8

0800b76c <_sbrk_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	2300      	movs	r3, #0
 800b770:	4d05      	ldr	r5, [pc, #20]	@ (800b788 <_sbrk_r+0x1c>)
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	602b      	str	r3, [r5, #0]
 800b778:	f7f5 fdce 	bl	8001318 <_sbrk>
 800b77c:	1c43      	adds	r3, r0, #1
 800b77e:	d102      	bne.n	800b786 <_sbrk_r+0x1a>
 800b780:	682b      	ldr	r3, [r5, #0]
 800b782:	b103      	cbz	r3, 800b786 <_sbrk_r+0x1a>
 800b784:	6023      	str	r3, [r4, #0]
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	200005b8 	.word	0x200005b8

0800b78c <_write_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4604      	mov	r4, r0
 800b790:	4d06      	ldr	r5, [pc, #24]	@ (800b7ac <_write_r+0x20>)
 800b792:	4608      	mov	r0, r1
 800b794:	4611      	mov	r1, r2
 800b796:	2200      	movs	r2, #0
 800b798:	602a      	str	r2, [r5, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	f7f5 fd6b 	bl	8001276 <_write>
 800b7a0:	1c43      	adds	r3, r0, #1
 800b7a2:	d102      	bne.n	800b7aa <_write_r+0x1e>
 800b7a4:	682b      	ldr	r3, [r5, #0]
 800b7a6:	b103      	cbz	r3, 800b7aa <_write_r+0x1e>
 800b7a8:	6023      	str	r3, [r4, #0]
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
 800b7ac:	200005b8 	.word	0x200005b8

0800b7b0 <__errno>:
 800b7b0:	4b01      	ldr	r3, [pc, #4]	@ (800b7b8 <__errno+0x8>)
 800b7b2:	6818      	ldr	r0, [r3, #0]
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	20000068 	.word	0x20000068

0800b7bc <__libc_init_array>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	4d0d      	ldr	r5, [pc, #52]	@ (800b7f4 <__libc_init_array+0x38>)
 800b7c0:	2600      	movs	r6, #0
 800b7c2:	4c0d      	ldr	r4, [pc, #52]	@ (800b7f8 <__libc_init_array+0x3c>)
 800b7c4:	1b64      	subs	r4, r4, r5
 800b7c6:	10a4      	asrs	r4, r4, #2
 800b7c8:	42a6      	cmp	r6, r4
 800b7ca:	d109      	bne.n	800b7e0 <__libc_init_array+0x24>
 800b7cc:	4d0b      	ldr	r5, [pc, #44]	@ (800b7fc <__libc_init_array+0x40>)
 800b7ce:	2600      	movs	r6, #0
 800b7d0:	4c0b      	ldr	r4, [pc, #44]	@ (800b800 <__libc_init_array+0x44>)
 800b7d2:	f000 fc81 	bl	800c0d8 <_init>
 800b7d6:	1b64      	subs	r4, r4, r5
 800b7d8:	10a4      	asrs	r4, r4, #2
 800b7da:	42a6      	cmp	r6, r4
 800b7dc:	d105      	bne.n	800b7ea <__libc_init_array+0x2e>
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	4798      	blx	r3
 800b7e8:	e7ee      	b.n	800b7c8 <__libc_init_array+0xc>
 800b7ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ee:	3601      	adds	r6, #1
 800b7f0:	4798      	blx	r3
 800b7f2:	e7f2      	b.n	800b7da <__libc_init_array+0x1e>
 800b7f4:	0800c210 	.word	0x0800c210
 800b7f8:	0800c210 	.word	0x0800c210
 800b7fc:	0800c210 	.word	0x0800c210
 800b800:	0800c214 	.word	0x0800c214

0800b804 <__retarget_lock_init_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_acquire_recursive>:
 800b806:	4770      	bx	lr

0800b808 <__retarget_lock_release_recursive>:
 800b808:	4770      	bx	lr

0800b80a <memcpy>:
 800b80a:	440a      	add	r2, r1
 800b80c:	1e43      	subs	r3, r0, #1
 800b80e:	4291      	cmp	r1, r2
 800b810:	d100      	bne.n	800b814 <memcpy+0xa>
 800b812:	4770      	bx	lr
 800b814:	b510      	push	{r4, lr}
 800b816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b81a:	4291      	cmp	r1, r2
 800b81c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b820:	d1f9      	bne.n	800b816 <memcpy+0xc>
 800b822:	bd10      	pop	{r4, pc}

0800b824 <_free_r>:
 800b824:	b538      	push	{r3, r4, r5, lr}
 800b826:	4605      	mov	r5, r0
 800b828:	2900      	cmp	r1, #0
 800b82a:	d041      	beq.n	800b8b0 <_free_r+0x8c>
 800b82c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b830:	1f0c      	subs	r4, r1, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	bfb8      	it	lt
 800b836:	18e4      	addlt	r4, r4, r3
 800b838:	f7ff fd9a 	bl	800b370 <__malloc_lock>
 800b83c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b4 <_free_r+0x90>)
 800b83e:	6813      	ldr	r3, [r2, #0]
 800b840:	b933      	cbnz	r3, 800b850 <_free_r+0x2c>
 800b842:	6063      	str	r3, [r4, #4]
 800b844:	6014      	str	r4, [r2, #0]
 800b846:	4628      	mov	r0, r5
 800b848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b84c:	f7ff bd96 	b.w	800b37c <__malloc_unlock>
 800b850:	42a3      	cmp	r3, r4
 800b852:	d908      	bls.n	800b866 <_free_r+0x42>
 800b854:	6820      	ldr	r0, [r4, #0]
 800b856:	1821      	adds	r1, r4, r0
 800b858:	428b      	cmp	r3, r1
 800b85a:	bf01      	itttt	eq
 800b85c:	6819      	ldreq	r1, [r3, #0]
 800b85e:	685b      	ldreq	r3, [r3, #4]
 800b860:	1809      	addeq	r1, r1, r0
 800b862:	6021      	streq	r1, [r4, #0]
 800b864:	e7ed      	b.n	800b842 <_free_r+0x1e>
 800b866:	461a      	mov	r2, r3
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	b10b      	cbz	r3, 800b870 <_free_r+0x4c>
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	d9fa      	bls.n	800b866 <_free_r+0x42>
 800b870:	6811      	ldr	r1, [r2, #0]
 800b872:	1850      	adds	r0, r2, r1
 800b874:	42a0      	cmp	r0, r4
 800b876:	d10b      	bne.n	800b890 <_free_r+0x6c>
 800b878:	6820      	ldr	r0, [r4, #0]
 800b87a:	4401      	add	r1, r0
 800b87c:	1850      	adds	r0, r2, r1
 800b87e:	6011      	str	r1, [r2, #0]
 800b880:	4283      	cmp	r3, r0
 800b882:	d1e0      	bne.n	800b846 <_free_r+0x22>
 800b884:	6818      	ldr	r0, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	4408      	add	r0, r1
 800b88a:	6053      	str	r3, [r2, #4]
 800b88c:	6010      	str	r0, [r2, #0]
 800b88e:	e7da      	b.n	800b846 <_free_r+0x22>
 800b890:	d902      	bls.n	800b898 <_free_r+0x74>
 800b892:	230c      	movs	r3, #12
 800b894:	602b      	str	r3, [r5, #0]
 800b896:	e7d6      	b.n	800b846 <_free_r+0x22>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	1821      	adds	r1, r4, r0
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf02      	ittt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	1809      	addeq	r1, r1, r0
 800b8a6:	6063      	str	r3, [r4, #4]
 800b8a8:	bf08      	it	eq
 800b8aa:	6021      	streq	r1, [r4, #0]
 800b8ac:	6054      	str	r4, [r2, #4]
 800b8ae:	e7ca      	b.n	800b846 <_free_r+0x22>
 800b8b0:	bd38      	pop	{r3, r4, r5, pc}
 800b8b2:	bf00      	nop
 800b8b4:	20000478 	.word	0x20000478

0800b8b8 <__sfputc_r>:
 800b8b8:	6893      	ldr	r3, [r2, #8]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	b410      	push	{r4}
 800b8c0:	6093      	str	r3, [r2, #8]
 800b8c2:	da08      	bge.n	800b8d6 <__sfputc_r+0x1e>
 800b8c4:	6994      	ldr	r4, [r2, #24]
 800b8c6:	42a3      	cmp	r3, r4
 800b8c8:	db01      	blt.n	800b8ce <__sfputc_r+0x16>
 800b8ca:	290a      	cmp	r1, #10
 800b8cc:	d103      	bne.n	800b8d6 <__sfputc_r+0x1e>
 800b8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d2:	f7ff be7b 	b.w	800b5cc <__swbuf_r>
 800b8d6:	6813      	ldr	r3, [r2, #0]
 800b8d8:	1c58      	adds	r0, r3, #1
 800b8da:	6010      	str	r0, [r2, #0]
 800b8dc:	4608      	mov	r0, r1
 800b8de:	7019      	strb	r1, [r3, #0]
 800b8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <__sfputs_r>:
 800b8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e8:	4606      	mov	r6, r0
 800b8ea:	460f      	mov	r7, r1
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	18d5      	adds	r5, r2, r3
 800b8f0:	42ac      	cmp	r4, r5
 800b8f2:	d101      	bne.n	800b8f8 <__sfputs_r+0x12>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	e007      	b.n	800b908 <__sfputs_r+0x22>
 800b8f8:	463a      	mov	r2, r7
 800b8fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fe:	4630      	mov	r0, r6
 800b900:	f7ff ffda 	bl	800b8b8 <__sfputc_r>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d1f3      	bne.n	800b8f0 <__sfputs_r+0xa>
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b90c <_vfiprintf_r>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	460d      	mov	r5, r1
 800b912:	b09d      	sub	sp, #116	@ 0x74
 800b914:	4614      	mov	r4, r2
 800b916:	4698      	mov	r8, r3
 800b918:	4606      	mov	r6, r0
 800b91a:	b118      	cbz	r0, 800b924 <_vfiprintf_r+0x18>
 800b91c:	6a03      	ldr	r3, [r0, #32]
 800b91e:	b90b      	cbnz	r3, 800b924 <_vfiprintf_r+0x18>
 800b920:	f7ff fdbe 	bl	800b4a0 <__sinit>
 800b924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b926:	07d9      	lsls	r1, r3, #31
 800b928:	d405      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_vfiprintf_r+0x2a>
 800b930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b932:	f7ff ff68 	bl	800b806 <__retarget_lock_acquire_recursive>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	071b      	lsls	r3, r3, #28
 800b93a:	d501      	bpl.n	800b940 <_vfiprintf_r+0x34>
 800b93c:	692b      	ldr	r3, [r5, #16]
 800b93e:	b99b      	cbnz	r3, 800b968 <_vfiprintf_r+0x5c>
 800b940:	4629      	mov	r1, r5
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff fe80 	bl	800b648 <__swsetup_r>
 800b948:	b170      	cbz	r0, 800b968 <_vfiprintf_r+0x5c>
 800b94a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b94c:	07dc      	lsls	r4, r3, #31
 800b94e:	d504      	bpl.n	800b95a <_vfiprintf_r+0x4e>
 800b950:	f04f 30ff 	mov.w	r0, #4294967295
 800b954:	b01d      	add	sp, #116	@ 0x74
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95a:	89ab      	ldrh	r3, [r5, #12]
 800b95c:	0598      	lsls	r0, r3, #22
 800b95e:	d4f7      	bmi.n	800b950 <_vfiprintf_r+0x44>
 800b960:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b962:	f7ff ff51 	bl	800b808 <__retarget_lock_release_recursive>
 800b966:	e7f3      	b.n	800b950 <_vfiprintf_r+0x44>
 800b968:	2300      	movs	r3, #0
 800b96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b96e:	f04f 0901 	mov.w	r9, #1
 800b972:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800bb28 <_vfiprintf_r+0x21c>
 800b976:	9309      	str	r3, [sp, #36]	@ 0x24
 800b978:	2320      	movs	r3, #32
 800b97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b97e:	2330      	movs	r3, #48	@ 0x30
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b984:	4623      	mov	r3, r4
 800b986:	469a      	mov	sl, r3
 800b988:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98c:	b10a      	cbz	r2, 800b992 <_vfiprintf_r+0x86>
 800b98e:	2a25      	cmp	r2, #37	@ 0x25
 800b990:	d1f9      	bne.n	800b986 <_vfiprintf_r+0x7a>
 800b992:	ebba 0b04 	subs.w	fp, sl, r4
 800b996:	d00b      	beq.n	800b9b0 <_vfiprintf_r+0xa4>
 800b998:	465b      	mov	r3, fp
 800b99a:	4622      	mov	r2, r4
 800b99c:	4629      	mov	r1, r5
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f7ff ffa1 	bl	800b8e6 <__sfputs_r>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	f000 80a7 	beq.w	800baf8 <_vfiprintf_r+0x1ec>
 800b9aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9ac:	445a      	add	r2, fp
 800b9ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 809f 	beq.w	800baf8 <_vfiprintf_r+0x1ec>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	f10a 0a01 	add.w	sl, sl, #1
 800b9c4:	9304      	str	r3, [sp, #16]
 800b9c6:	9307      	str	r3, [sp, #28]
 800b9c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9d2:	4654      	mov	r4, sl
 800b9d4:	2205      	movs	r2, #5
 800b9d6:	4854      	ldr	r0, [pc, #336]	@ (800bb28 <_vfiprintf_r+0x21c>)
 800b9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9dc:	f000 fb6e 	bl	800c0bc <memchr>
 800b9e0:	9a04      	ldr	r2, [sp, #16]
 800b9e2:	b9d8      	cbnz	r0, 800ba1c <_vfiprintf_r+0x110>
 800b9e4:	06d1      	lsls	r1, r2, #27
 800b9e6:	bf44      	itt	mi
 800b9e8:	2320      	movmi	r3, #32
 800b9ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ee:	0713      	lsls	r3, r2, #28
 800b9f0:	bf44      	itt	mi
 800b9f2:	232b      	movmi	r3, #43	@ 0x2b
 800b9f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9fe:	d015      	beq.n	800ba2c <_vfiprintf_r+0x120>
 800ba00:	9a07      	ldr	r2, [sp, #28]
 800ba02:	4654      	mov	r4, sl
 800ba04:	2000      	movs	r0, #0
 800ba06:	f04f 0c0a 	mov.w	ip, #10
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba10:	3b30      	subs	r3, #48	@ 0x30
 800ba12:	2b09      	cmp	r3, #9
 800ba14:	d94b      	bls.n	800baae <_vfiprintf_r+0x1a2>
 800ba16:	b1b0      	cbz	r0, 800ba46 <_vfiprintf_r+0x13a>
 800ba18:	9207      	str	r2, [sp, #28]
 800ba1a:	e014      	b.n	800ba46 <_vfiprintf_r+0x13a>
 800ba1c:	eba0 0308 	sub.w	r3, r0, r8
 800ba20:	46a2      	mov	sl, r4
 800ba22:	fa09 f303 	lsl.w	r3, r9, r3
 800ba26:	4313      	orrs	r3, r2
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	e7d2      	b.n	800b9d2 <_vfiprintf_r+0xc6>
 800ba2c:	9b03      	ldr	r3, [sp, #12]
 800ba2e:	1d19      	adds	r1, r3, #4
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	9103      	str	r1, [sp, #12]
 800ba36:	bfbb      	ittet	lt
 800ba38:	425b      	neglt	r3, r3
 800ba3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3e:	9307      	strge	r3, [sp, #28]
 800ba40:	9307      	strlt	r3, [sp, #28]
 800ba42:	bfb8      	it	lt
 800ba44:	9204      	strlt	r2, [sp, #16]
 800ba46:	7823      	ldrb	r3, [r4, #0]
 800ba48:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4a:	d10a      	bne.n	800ba62 <_vfiprintf_r+0x156>
 800ba4c:	7863      	ldrb	r3, [r4, #1]
 800ba4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba50:	d132      	bne.n	800bab8 <_vfiprintf_r+0x1ac>
 800ba52:	9b03      	ldr	r3, [sp, #12]
 800ba54:	3402      	adds	r4, #2
 800ba56:	1d1a      	adds	r2, r3, #4
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba5e:	9203      	str	r2, [sp, #12]
 800ba60:	9305      	str	r3, [sp, #20]
 800ba62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb38 <_vfiprintf_r+0x22c>
 800ba66:	2203      	movs	r2, #3
 800ba68:	7821      	ldrb	r1, [r4, #0]
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	f000 fb26 	bl	800c0bc <memchr>
 800ba70:	b138      	cbz	r0, 800ba82 <_vfiprintf_r+0x176>
 800ba72:	eba0 000a 	sub.w	r0, r0, sl
 800ba76:	2240      	movs	r2, #64	@ 0x40
 800ba78:	9b04      	ldr	r3, [sp, #16]
 800ba7a:	3401      	adds	r4, #1
 800ba7c:	4082      	lsls	r2, r0
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba86:	2206      	movs	r2, #6
 800ba88:	4828      	ldr	r0, [pc, #160]	@ (800bb2c <_vfiprintf_r+0x220>)
 800ba8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba8e:	f000 fb15 	bl	800c0bc <memchr>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d03f      	beq.n	800bb16 <_vfiprintf_r+0x20a>
 800ba96:	4b26      	ldr	r3, [pc, #152]	@ (800bb30 <_vfiprintf_r+0x224>)
 800ba98:	bb1b      	cbnz	r3, 800bae2 <_vfiprintf_r+0x1d6>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3307      	adds	r3, #7
 800ba9e:	f023 0307 	bic.w	r3, r3, #7
 800baa2:	3308      	adds	r3, #8
 800baa4:	9303      	str	r3, [sp, #12]
 800baa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baa8:	443b      	add	r3, r7
 800baaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800baac:	e76a      	b.n	800b984 <_vfiprintf_r+0x78>
 800baae:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab2:	460c      	mov	r4, r1
 800bab4:	2001      	movs	r0, #1
 800bab6:	e7a8      	b.n	800ba0a <_vfiprintf_r+0xfe>
 800bab8:	2300      	movs	r3, #0
 800baba:	3401      	adds	r4, #1
 800babc:	f04f 0c0a 	mov.w	ip, #10
 800bac0:	4619      	mov	r1, r3
 800bac2:	9305      	str	r3, [sp, #20]
 800bac4:	4620      	mov	r0, r4
 800bac6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baca:	3a30      	subs	r2, #48	@ 0x30
 800bacc:	2a09      	cmp	r2, #9
 800bace:	d903      	bls.n	800bad8 <_vfiprintf_r+0x1cc>
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0c6      	beq.n	800ba62 <_vfiprintf_r+0x156>
 800bad4:	9105      	str	r1, [sp, #20]
 800bad6:	e7c4      	b.n	800ba62 <_vfiprintf_r+0x156>
 800bad8:	fb0c 2101 	mla	r1, ip, r1, r2
 800badc:	4604      	mov	r4, r0
 800bade:	2301      	movs	r3, #1
 800bae0:	e7f0      	b.n	800bac4 <_vfiprintf_r+0x1b8>
 800bae2:	ab03      	add	r3, sp, #12
 800bae4:	462a      	mov	r2, r5
 800bae6:	a904      	add	r1, sp, #16
 800bae8:	4630      	mov	r0, r6
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	4b11      	ldr	r3, [pc, #68]	@ (800bb34 <_vfiprintf_r+0x228>)
 800baee:	f3af 8000 	nop.w
 800baf2:	4607      	mov	r7, r0
 800baf4:	1c78      	adds	r0, r7, #1
 800baf6:	d1d6      	bne.n	800baa6 <_vfiprintf_r+0x19a>
 800baf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafa:	07d9      	lsls	r1, r3, #31
 800bafc:	d405      	bmi.n	800bb0a <_vfiprintf_r+0x1fe>
 800bafe:	89ab      	ldrh	r3, [r5, #12]
 800bb00:	059a      	lsls	r2, r3, #22
 800bb02:	d402      	bmi.n	800bb0a <_vfiprintf_r+0x1fe>
 800bb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb06:	f7ff fe7f 	bl	800b808 <__retarget_lock_release_recursive>
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	065b      	lsls	r3, r3, #25
 800bb0e:	f53f af1f 	bmi.w	800b950 <_vfiprintf_r+0x44>
 800bb12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb14:	e71e      	b.n	800b954 <_vfiprintf_r+0x48>
 800bb16:	ab03      	add	r3, sp, #12
 800bb18:	462a      	mov	r2, r5
 800bb1a:	a904      	add	r1, sp, #16
 800bb1c:	4630      	mov	r0, r6
 800bb1e:	9300      	str	r3, [sp, #0]
 800bb20:	4b04      	ldr	r3, [pc, #16]	@ (800bb34 <_vfiprintf_r+0x228>)
 800bb22:	f000 f87d 	bl	800bc20 <_printf_i>
 800bb26:	e7e4      	b.n	800baf2 <_vfiprintf_r+0x1e6>
 800bb28:	0800c1d4 	.word	0x0800c1d4
 800bb2c:	0800c1de 	.word	0x0800c1de
 800bb30:	00000000 	.word	0x00000000
 800bb34:	0800b8e7 	.word	0x0800b8e7
 800bb38:	0800c1da 	.word	0x0800c1da

0800bb3c <_printf_common>:
 800bb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb40:	4616      	mov	r6, r2
 800bb42:	4698      	mov	r8, r3
 800bb44:	688a      	ldr	r2, [r1, #8]
 800bb46:	4607      	mov	r7, r0
 800bb48:	690b      	ldr	r3, [r1, #16]
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	bfb8      	it	lt
 800bb54:	4613      	movlt	r3, r2
 800bb56:	6033      	str	r3, [r6, #0]
 800bb58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb5c:	b10a      	cbz	r2, 800bb62 <_printf_common+0x26>
 800bb5e:	3301      	adds	r3, #1
 800bb60:	6033      	str	r3, [r6, #0]
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	0699      	lsls	r1, r3, #26
 800bb66:	bf42      	ittt	mi
 800bb68:	6833      	ldrmi	r3, [r6, #0]
 800bb6a:	3302      	addmi	r3, #2
 800bb6c:	6033      	strmi	r3, [r6, #0]
 800bb6e:	6825      	ldr	r5, [r4, #0]
 800bb70:	f015 0506 	ands.w	r5, r5, #6
 800bb74:	d106      	bne.n	800bb84 <_printf_common+0x48>
 800bb76:	f104 0a19 	add.w	sl, r4, #25
 800bb7a:	68e3      	ldr	r3, [r4, #12]
 800bb7c:	6832      	ldr	r2, [r6, #0]
 800bb7e:	1a9b      	subs	r3, r3, r2
 800bb80:	42ab      	cmp	r3, r5
 800bb82:	dc2b      	bgt.n	800bbdc <_printf_common+0xa0>
 800bb84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb88:	6822      	ldr	r2, [r4, #0]
 800bb8a:	3b00      	subs	r3, #0
 800bb8c:	bf18      	it	ne
 800bb8e:	2301      	movne	r3, #1
 800bb90:	0692      	lsls	r2, r2, #26
 800bb92:	d430      	bmi.n	800bbf6 <_printf_common+0xba>
 800bb94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb98:	4641      	mov	r1, r8
 800bb9a:	4638      	mov	r0, r7
 800bb9c:	47c8      	blx	r9
 800bb9e:	3001      	adds	r0, #1
 800bba0:	d023      	beq.n	800bbea <_printf_common+0xae>
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	341a      	adds	r4, #26
 800bba6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800bbaa:	f003 0306 	and.w	r3, r3, #6
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	bf0a      	itet	eq
 800bbb2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800bbb6:	2500      	movne	r5, #0
 800bbb8:	6833      	ldreq	r3, [r6, #0]
 800bbba:	f04f 0600 	mov.w	r6, #0
 800bbbe:	bf08      	it	eq
 800bbc0:	1aed      	subeq	r5, r5, r3
 800bbc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bbc6:	bf08      	it	eq
 800bbc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	bfc4      	itt	gt
 800bbd0:	1a9b      	subgt	r3, r3, r2
 800bbd2:	18ed      	addgt	r5, r5, r3
 800bbd4:	42b5      	cmp	r5, r6
 800bbd6:	d11a      	bne.n	800bc0e <_printf_common+0xd2>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e008      	b.n	800bbee <_printf_common+0xb2>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4652      	mov	r2, sl
 800bbe0:	4641      	mov	r1, r8
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	47c8      	blx	r9
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d103      	bne.n	800bbf2 <_printf_common+0xb6>
 800bbea:	f04f 30ff 	mov.w	r0, #4294967295
 800bbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf2:	3501      	adds	r5, #1
 800bbf4:	e7c1      	b.n	800bb7a <_printf_common+0x3e>
 800bbf6:	18e1      	adds	r1, r4, r3
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	2030      	movs	r0, #48	@ 0x30
 800bbfc:	3302      	adds	r3, #2
 800bbfe:	4422      	add	r2, r4
 800bc00:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc0c:	e7c2      	b.n	800bb94 <_printf_common+0x58>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	4622      	mov	r2, r4
 800bc12:	4641      	mov	r1, r8
 800bc14:	4638      	mov	r0, r7
 800bc16:	47c8      	blx	r9
 800bc18:	3001      	adds	r0, #1
 800bc1a:	d0e6      	beq.n	800bbea <_printf_common+0xae>
 800bc1c:	3601      	adds	r6, #1
 800bc1e:	e7d9      	b.n	800bbd4 <_printf_common+0x98>

0800bc20 <_printf_i>:
 800bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	7e0f      	ldrb	r7, [r1, #24]
 800bc26:	4691      	mov	r9, r2
 800bc28:	4680      	mov	r8, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	2f78      	cmp	r7, #120	@ 0x78
 800bc2e:	469a      	mov	sl, r3
 800bc30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc36:	d807      	bhi.n	800bc48 <_printf_i+0x28>
 800bc38:	2f62      	cmp	r7, #98	@ 0x62
 800bc3a:	d80a      	bhi.n	800bc52 <_printf_i+0x32>
 800bc3c:	2f00      	cmp	r7, #0
 800bc3e:	f000 80d1 	beq.w	800bde4 <_printf_i+0x1c4>
 800bc42:	2f58      	cmp	r7, #88	@ 0x58
 800bc44:	f000 80b8 	beq.w	800bdb8 <_printf_i+0x198>
 800bc48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc50:	e03a      	b.n	800bcc8 <_printf_i+0xa8>
 800bc52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc56:	2b15      	cmp	r3, #21
 800bc58:	d8f6      	bhi.n	800bc48 <_printf_i+0x28>
 800bc5a:	a101      	add	r1, pc, #4	@ (adr r1, 800bc60 <_printf_i+0x40>)
 800bc5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc60:	0800bcb9 	.word	0x0800bcb9
 800bc64:	0800bccd 	.word	0x0800bccd
 800bc68:	0800bc49 	.word	0x0800bc49
 800bc6c:	0800bc49 	.word	0x0800bc49
 800bc70:	0800bc49 	.word	0x0800bc49
 800bc74:	0800bc49 	.word	0x0800bc49
 800bc78:	0800bccd 	.word	0x0800bccd
 800bc7c:	0800bc49 	.word	0x0800bc49
 800bc80:	0800bc49 	.word	0x0800bc49
 800bc84:	0800bc49 	.word	0x0800bc49
 800bc88:	0800bc49 	.word	0x0800bc49
 800bc8c:	0800bdcb 	.word	0x0800bdcb
 800bc90:	0800bcf7 	.word	0x0800bcf7
 800bc94:	0800bd85 	.word	0x0800bd85
 800bc98:	0800bc49 	.word	0x0800bc49
 800bc9c:	0800bc49 	.word	0x0800bc49
 800bca0:	0800bded 	.word	0x0800bded
 800bca4:	0800bc49 	.word	0x0800bc49
 800bca8:	0800bcf7 	.word	0x0800bcf7
 800bcac:	0800bc49 	.word	0x0800bc49
 800bcb0:	0800bc49 	.word	0x0800bc49
 800bcb4:	0800bd8d 	.word	0x0800bd8d
 800bcb8:	6833      	ldr	r3, [r6, #0]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	6032      	str	r2, [r6, #0]
 800bcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e09c      	b.n	800be06 <_printf_i+0x1e6>
 800bccc:	6833      	ldr	r3, [r6, #0]
 800bcce:	6820      	ldr	r0, [r4, #0]
 800bcd0:	1d19      	adds	r1, r3, #4
 800bcd2:	6031      	str	r1, [r6, #0]
 800bcd4:	0606      	lsls	r6, r0, #24
 800bcd6:	d501      	bpl.n	800bcdc <_printf_i+0xbc>
 800bcd8:	681d      	ldr	r5, [r3, #0]
 800bcda:	e003      	b.n	800bce4 <_printf_i+0xc4>
 800bcdc:	0645      	lsls	r5, r0, #25
 800bcde:	d5fb      	bpl.n	800bcd8 <_printf_i+0xb8>
 800bce0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bce4:	2d00      	cmp	r5, #0
 800bce6:	da03      	bge.n	800bcf0 <_printf_i+0xd0>
 800bce8:	232d      	movs	r3, #45	@ 0x2d
 800bcea:	426d      	negs	r5, r5
 800bcec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcf0:	4858      	ldr	r0, [pc, #352]	@ (800be54 <_printf_i+0x234>)
 800bcf2:	230a      	movs	r3, #10
 800bcf4:	e011      	b.n	800bd1a <_printf_i+0xfa>
 800bcf6:	6821      	ldr	r1, [r4, #0]
 800bcf8:	6833      	ldr	r3, [r6, #0]
 800bcfa:	0608      	lsls	r0, r1, #24
 800bcfc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bd00:	d402      	bmi.n	800bd08 <_printf_i+0xe8>
 800bd02:	0649      	lsls	r1, r1, #25
 800bd04:	bf48      	it	mi
 800bd06:	b2ad      	uxthmi	r5, r5
 800bd08:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd0a:	6033      	str	r3, [r6, #0]
 800bd0c:	4851      	ldr	r0, [pc, #324]	@ (800be54 <_printf_i+0x234>)
 800bd0e:	bf14      	ite	ne
 800bd10:	230a      	movne	r3, #10
 800bd12:	2308      	moveq	r3, #8
 800bd14:	2100      	movs	r1, #0
 800bd16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd1a:	6866      	ldr	r6, [r4, #4]
 800bd1c:	2e00      	cmp	r6, #0
 800bd1e:	60a6      	str	r6, [r4, #8]
 800bd20:	db05      	blt.n	800bd2e <_printf_i+0x10e>
 800bd22:	6821      	ldr	r1, [r4, #0]
 800bd24:	432e      	orrs	r6, r5
 800bd26:	f021 0104 	bic.w	r1, r1, #4
 800bd2a:	6021      	str	r1, [r4, #0]
 800bd2c:	d04b      	beq.n	800bdc6 <_printf_i+0x1a6>
 800bd2e:	4616      	mov	r6, r2
 800bd30:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd34:	fb03 5711 	mls	r7, r3, r1, r5
 800bd38:	5dc7      	ldrb	r7, [r0, r7]
 800bd3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd3e:	462f      	mov	r7, r5
 800bd40:	460d      	mov	r5, r1
 800bd42:	42bb      	cmp	r3, r7
 800bd44:	d9f4      	bls.n	800bd30 <_printf_i+0x110>
 800bd46:	2b08      	cmp	r3, #8
 800bd48:	d10b      	bne.n	800bd62 <_printf_i+0x142>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	07df      	lsls	r7, r3, #31
 800bd4e:	d508      	bpl.n	800bd62 <_printf_i+0x142>
 800bd50:	6923      	ldr	r3, [r4, #16]
 800bd52:	6861      	ldr	r1, [r4, #4]
 800bd54:	4299      	cmp	r1, r3
 800bd56:	bfde      	ittt	le
 800bd58:	2330      	movle	r3, #48	@ 0x30
 800bd5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd62:	1b92      	subs	r2, r2, r6
 800bd64:	6122      	str	r2, [r4, #16]
 800bd66:	464b      	mov	r3, r9
 800bd68:	aa03      	add	r2, sp, #12
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	f8cd a000 	str.w	sl, [sp]
 800bd72:	f7ff fee3 	bl	800bb3c <_printf_common>
 800bd76:	3001      	adds	r0, #1
 800bd78:	d14a      	bne.n	800be10 <_printf_i+0x1f0>
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7e:	b004      	add	sp, #16
 800bd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd84:	6823      	ldr	r3, [r4, #0]
 800bd86:	f043 0320 	orr.w	r3, r3, #32
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	2778      	movs	r7, #120	@ 0x78
 800bd8e:	4832      	ldr	r0, [pc, #200]	@ (800be58 <_printf_i+0x238>)
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd96:	061f      	lsls	r7, r3, #24
 800bd98:	6831      	ldr	r1, [r6, #0]
 800bd9a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd9e:	d402      	bmi.n	800bda6 <_printf_i+0x186>
 800bda0:	065f      	lsls	r7, r3, #25
 800bda2:	bf48      	it	mi
 800bda4:	b2ad      	uxthmi	r5, r5
 800bda6:	6031      	str	r1, [r6, #0]
 800bda8:	07d9      	lsls	r1, r3, #31
 800bdaa:	bf44      	itt	mi
 800bdac:	f043 0320 	orrmi.w	r3, r3, #32
 800bdb0:	6023      	strmi	r3, [r4, #0]
 800bdb2:	b11d      	cbz	r5, 800bdbc <_printf_i+0x19c>
 800bdb4:	2310      	movs	r3, #16
 800bdb6:	e7ad      	b.n	800bd14 <_printf_i+0xf4>
 800bdb8:	4826      	ldr	r0, [pc, #152]	@ (800be54 <_printf_i+0x234>)
 800bdba:	e7e9      	b.n	800bd90 <_printf_i+0x170>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	f023 0320 	bic.w	r3, r3, #32
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	e7f6      	b.n	800bdb4 <_printf_i+0x194>
 800bdc6:	4616      	mov	r6, r2
 800bdc8:	e7bd      	b.n	800bd46 <_printf_i+0x126>
 800bdca:	6833      	ldr	r3, [r6, #0]
 800bdcc:	6825      	ldr	r5, [r4, #0]
 800bdce:	1d18      	adds	r0, r3, #4
 800bdd0:	6961      	ldr	r1, [r4, #20]
 800bdd2:	6030      	str	r0, [r6, #0]
 800bdd4:	062e      	lsls	r6, r5, #24
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	d501      	bpl.n	800bdde <_printf_i+0x1be>
 800bdda:	6019      	str	r1, [r3, #0]
 800bddc:	e002      	b.n	800bde4 <_printf_i+0x1c4>
 800bdde:	0668      	lsls	r0, r5, #25
 800bde0:	d5fb      	bpl.n	800bdda <_printf_i+0x1ba>
 800bde2:	8019      	strh	r1, [r3, #0]
 800bde4:	2300      	movs	r3, #0
 800bde6:	4616      	mov	r6, r2
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	e7bc      	b.n	800bd66 <_printf_i+0x146>
 800bdec:	6833      	ldr	r3, [r6, #0]
 800bdee:	2100      	movs	r1, #0
 800bdf0:	1d1a      	adds	r2, r3, #4
 800bdf2:	6032      	str	r2, [r6, #0]
 800bdf4:	681e      	ldr	r6, [r3, #0]
 800bdf6:	6862      	ldr	r2, [r4, #4]
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f000 f95f 	bl	800c0bc <memchr>
 800bdfe:	b108      	cbz	r0, 800be04 <_printf_i+0x1e4>
 800be00:	1b80      	subs	r0, r0, r6
 800be02:	6060      	str	r0, [r4, #4]
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	6123      	str	r3, [r4, #16]
 800be08:	2300      	movs	r3, #0
 800be0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be0e:	e7aa      	b.n	800bd66 <_printf_i+0x146>
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	4632      	mov	r2, r6
 800be14:	4649      	mov	r1, r9
 800be16:	4640      	mov	r0, r8
 800be18:	47d0      	blx	sl
 800be1a:	3001      	adds	r0, #1
 800be1c:	d0ad      	beq.n	800bd7a <_printf_i+0x15a>
 800be1e:	6823      	ldr	r3, [r4, #0]
 800be20:	079b      	lsls	r3, r3, #30
 800be22:	d413      	bmi.n	800be4c <_printf_i+0x22c>
 800be24:	68e0      	ldr	r0, [r4, #12]
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	4298      	cmp	r0, r3
 800be2a:	bfb8      	it	lt
 800be2c:	4618      	movlt	r0, r3
 800be2e:	e7a6      	b.n	800bd7e <_printf_i+0x15e>
 800be30:	2301      	movs	r3, #1
 800be32:	4632      	mov	r2, r6
 800be34:	4649      	mov	r1, r9
 800be36:	4640      	mov	r0, r8
 800be38:	47d0      	blx	sl
 800be3a:	3001      	adds	r0, #1
 800be3c:	d09d      	beq.n	800bd7a <_printf_i+0x15a>
 800be3e:	3501      	adds	r5, #1
 800be40:	68e3      	ldr	r3, [r4, #12]
 800be42:	9903      	ldr	r1, [sp, #12]
 800be44:	1a5b      	subs	r3, r3, r1
 800be46:	42ab      	cmp	r3, r5
 800be48:	dcf2      	bgt.n	800be30 <_printf_i+0x210>
 800be4a:	e7eb      	b.n	800be24 <_printf_i+0x204>
 800be4c:	2500      	movs	r5, #0
 800be4e:	f104 0619 	add.w	r6, r4, #25
 800be52:	e7f5      	b.n	800be40 <_printf_i+0x220>
 800be54:	0800c1e5 	.word	0x0800c1e5
 800be58:	0800c1f6 	.word	0x0800c1f6

0800be5c <__sflush_r>:
 800be5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be64:	0716      	lsls	r6, r2, #28
 800be66:	4605      	mov	r5, r0
 800be68:	460c      	mov	r4, r1
 800be6a:	d454      	bmi.n	800bf16 <__sflush_r+0xba>
 800be6c:	684b      	ldr	r3, [r1, #4]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	dc02      	bgt.n	800be78 <__sflush_r+0x1c>
 800be72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be74:	2b00      	cmp	r3, #0
 800be76:	dd48      	ble.n	800bf0a <__sflush_r+0xae>
 800be78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be7a:	2e00      	cmp	r6, #0
 800be7c:	d045      	beq.n	800bf0a <__sflush_r+0xae>
 800be7e:	2300      	movs	r3, #0
 800be80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be84:	682f      	ldr	r7, [r5, #0]
 800be86:	6a21      	ldr	r1, [r4, #32]
 800be88:	602b      	str	r3, [r5, #0]
 800be8a:	d030      	beq.n	800beee <__sflush_r+0x92>
 800be8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	0759      	lsls	r1, r3, #29
 800be92:	d505      	bpl.n	800bea0 <__sflush_r+0x44>
 800be94:	6863      	ldr	r3, [r4, #4]
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be9a:	b10b      	cbz	r3, 800bea0 <__sflush_r+0x44>
 800be9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be9e:	1ad2      	subs	r2, r2, r3
 800bea0:	2300      	movs	r3, #0
 800bea2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bea4:	6a21      	ldr	r1, [r4, #32]
 800bea6:	4628      	mov	r0, r5
 800bea8:	47b0      	blx	r6
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	d106      	bne.n	800bebe <__sflush_r+0x62>
 800beb0:	6829      	ldr	r1, [r5, #0]
 800beb2:	291d      	cmp	r1, #29
 800beb4:	d82b      	bhi.n	800bf0e <__sflush_r+0xb2>
 800beb6:	4a2a      	ldr	r2, [pc, #168]	@ (800bf60 <__sflush_r+0x104>)
 800beb8:	40ca      	lsrs	r2, r1
 800beba:	07d6      	lsls	r6, r2, #31
 800bebc:	d527      	bpl.n	800bf0e <__sflush_r+0xb2>
 800bebe:	2200      	movs	r2, #0
 800bec0:	04d9      	lsls	r1, r3, #19
 800bec2:	6062      	str	r2, [r4, #4]
 800bec4:	6922      	ldr	r2, [r4, #16]
 800bec6:	6022      	str	r2, [r4, #0]
 800bec8:	d504      	bpl.n	800bed4 <__sflush_r+0x78>
 800beca:	1c42      	adds	r2, r0, #1
 800becc:	d101      	bne.n	800bed2 <__sflush_r+0x76>
 800bece:	682b      	ldr	r3, [r5, #0]
 800bed0:	b903      	cbnz	r3, 800bed4 <__sflush_r+0x78>
 800bed2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bed4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bed6:	602f      	str	r7, [r5, #0]
 800bed8:	b1b9      	cbz	r1, 800bf0a <__sflush_r+0xae>
 800beda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bede:	4299      	cmp	r1, r3
 800bee0:	d002      	beq.n	800bee8 <__sflush_r+0x8c>
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7ff fc9e 	bl	800b824 <_free_r>
 800bee8:	2300      	movs	r3, #0
 800beea:	6363      	str	r3, [r4, #52]	@ 0x34
 800beec:	e00d      	b.n	800bf0a <__sflush_r+0xae>
 800beee:	2301      	movs	r3, #1
 800bef0:	4628      	mov	r0, r5
 800bef2:	47b0      	blx	r6
 800bef4:	4602      	mov	r2, r0
 800bef6:	1c50      	adds	r0, r2, #1
 800bef8:	d1c9      	bne.n	800be8e <__sflush_r+0x32>
 800befa:	682b      	ldr	r3, [r5, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d0c6      	beq.n	800be8e <__sflush_r+0x32>
 800bf00:	2b1d      	cmp	r3, #29
 800bf02:	d001      	beq.n	800bf08 <__sflush_r+0xac>
 800bf04:	2b16      	cmp	r3, #22
 800bf06:	d11d      	bne.n	800bf44 <__sflush_r+0xe8>
 800bf08:	602f      	str	r7, [r5, #0]
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e021      	b.n	800bf52 <__sflush_r+0xf6>
 800bf0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf12:	b21b      	sxth	r3, r3
 800bf14:	e01a      	b.n	800bf4c <__sflush_r+0xf0>
 800bf16:	690f      	ldr	r7, [r1, #16]
 800bf18:	2f00      	cmp	r7, #0
 800bf1a:	d0f6      	beq.n	800bf0a <__sflush_r+0xae>
 800bf1c:	0793      	lsls	r3, r2, #30
 800bf1e:	680e      	ldr	r6, [r1, #0]
 800bf20:	600f      	str	r7, [r1, #0]
 800bf22:	bf0c      	ite	eq
 800bf24:	694b      	ldreq	r3, [r1, #20]
 800bf26:	2300      	movne	r3, #0
 800bf28:	eba6 0807 	sub.w	r8, r6, r7
 800bf2c:	608b      	str	r3, [r1, #8]
 800bf2e:	f1b8 0f00 	cmp.w	r8, #0
 800bf32:	ddea      	ble.n	800bf0a <__sflush_r+0xae>
 800bf34:	4643      	mov	r3, r8
 800bf36:	463a      	mov	r2, r7
 800bf38:	6a21      	ldr	r1, [r4, #32]
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf3e:	47b0      	blx	r6
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dc08      	bgt.n	800bf56 <__sflush_r+0xfa>
 800bf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	81a3      	strh	r3, [r4, #12]
 800bf52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf56:	4407      	add	r7, r0
 800bf58:	eba8 0800 	sub.w	r8, r8, r0
 800bf5c:	e7e7      	b.n	800bf2e <__sflush_r+0xd2>
 800bf5e:	bf00      	nop
 800bf60:	20400001 	.word	0x20400001

0800bf64 <_fflush_r>:
 800bf64:	b538      	push	{r3, r4, r5, lr}
 800bf66:	690b      	ldr	r3, [r1, #16]
 800bf68:	4605      	mov	r5, r0
 800bf6a:	460c      	mov	r4, r1
 800bf6c:	b913      	cbnz	r3, 800bf74 <_fflush_r+0x10>
 800bf6e:	2500      	movs	r5, #0
 800bf70:	4628      	mov	r0, r5
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	b118      	cbz	r0, 800bf7e <_fflush_r+0x1a>
 800bf76:	6a03      	ldr	r3, [r0, #32]
 800bf78:	b90b      	cbnz	r3, 800bf7e <_fflush_r+0x1a>
 800bf7a:	f7ff fa91 	bl	800b4a0 <__sinit>
 800bf7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0f3      	beq.n	800bf6e <_fflush_r+0xa>
 800bf86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf88:	07d0      	lsls	r0, r2, #31
 800bf8a:	d404      	bmi.n	800bf96 <_fflush_r+0x32>
 800bf8c:	0599      	lsls	r1, r3, #22
 800bf8e:	d402      	bmi.n	800bf96 <_fflush_r+0x32>
 800bf90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf92:	f7ff fc38 	bl	800b806 <__retarget_lock_acquire_recursive>
 800bf96:	4628      	mov	r0, r5
 800bf98:	4621      	mov	r1, r4
 800bf9a:	f7ff ff5f 	bl	800be5c <__sflush_r>
 800bf9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	07da      	lsls	r2, r3, #31
 800bfa4:	d4e4      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	059b      	lsls	r3, r3, #22
 800bfaa:	d4e1      	bmi.n	800bf70 <_fflush_r+0xc>
 800bfac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfae:	f7ff fc2b 	bl	800b808 <__retarget_lock_release_recursive>
 800bfb2:	e7dd      	b.n	800bf70 <_fflush_r+0xc>

0800bfb4 <__swhatbuf_r>:
 800bfb4:	b570      	push	{r4, r5, r6, lr}
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfbc:	b096      	sub	sp, #88	@ 0x58
 800bfbe:	4615      	mov	r5, r2
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	461e      	mov	r6, r3
 800bfc4:	da0c      	bge.n	800bfe0 <__swhatbuf_r+0x2c>
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	2100      	movs	r1, #0
 800bfca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfce:	bf14      	ite	ne
 800bfd0:	2340      	movne	r3, #64	@ 0x40
 800bfd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	6031      	str	r1, [r6, #0]
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	b016      	add	sp, #88	@ 0x58
 800bfde:	bd70      	pop	{r4, r5, r6, pc}
 800bfe0:	466a      	mov	r2, sp
 800bfe2:	f000 f849 	bl	800c078 <_fstat_r>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	dbed      	blt.n	800bfc6 <__swhatbuf_r+0x12>
 800bfea:	9901      	ldr	r1, [sp, #4]
 800bfec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bff0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bff4:	4259      	negs	r1, r3
 800bff6:	4159      	adcs	r1, r3
 800bff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bffc:	e7eb      	b.n	800bfd6 <__swhatbuf_r+0x22>

0800bffe <__smakebuf_r>:
 800bffe:	898b      	ldrh	r3, [r1, #12]
 800c000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c002:	079d      	lsls	r5, r3, #30
 800c004:	4606      	mov	r6, r0
 800c006:	460c      	mov	r4, r1
 800c008:	d507      	bpl.n	800c01a <__smakebuf_r+0x1c>
 800c00a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c00e:	6023      	str	r3, [r4, #0]
 800c010:	6123      	str	r3, [r4, #16]
 800c012:	2301      	movs	r3, #1
 800c014:	6163      	str	r3, [r4, #20]
 800c016:	b003      	add	sp, #12
 800c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01a:	ab01      	add	r3, sp, #4
 800c01c:	466a      	mov	r2, sp
 800c01e:	f7ff ffc9 	bl	800bfb4 <__swhatbuf_r>
 800c022:	9f00      	ldr	r7, [sp, #0]
 800c024:	4605      	mov	r5, r0
 800c026:	4630      	mov	r0, r6
 800c028:	4639      	mov	r1, r7
 800c02a:	f7ff f921 	bl	800b270 <_malloc_r>
 800c02e:	b948      	cbnz	r0, 800c044 <__smakebuf_r+0x46>
 800c030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c034:	059a      	lsls	r2, r3, #22
 800c036:	d4ee      	bmi.n	800c016 <__smakebuf_r+0x18>
 800c038:	f023 0303 	bic.w	r3, r3, #3
 800c03c:	f043 0302 	orr.w	r3, r3, #2
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	e7e2      	b.n	800c00a <__smakebuf_r+0xc>
 800c044:	89a3      	ldrh	r3, [r4, #12]
 800c046:	6020      	str	r0, [r4, #0]
 800c048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c054:	b15b      	cbz	r3, 800c06e <__smakebuf_r+0x70>
 800c056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05a:	4630      	mov	r0, r6
 800c05c:	f000 f81e 	bl	800c09c <_isatty_r>
 800c060:	b128      	cbz	r0, 800c06e <__smakebuf_r+0x70>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	f023 0303 	bic.w	r3, r3, #3
 800c068:	f043 0301 	orr.w	r3, r3, #1
 800c06c:	81a3      	strh	r3, [r4, #12]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	431d      	orrs	r5, r3
 800c072:	81a5      	strh	r5, [r4, #12]
 800c074:	e7cf      	b.n	800c016 <__smakebuf_r+0x18>
	...

0800c078 <_fstat_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	2300      	movs	r3, #0
 800c07c:	4d06      	ldr	r5, [pc, #24]	@ (800c098 <_fstat_r+0x20>)
 800c07e:	4604      	mov	r4, r0
 800c080:	4608      	mov	r0, r1
 800c082:	4611      	mov	r1, r2
 800c084:	602b      	str	r3, [r5, #0]
 800c086:	f7f5 f91e 	bl	80012c6 <_fstat>
 800c08a:	1c43      	adds	r3, r0, #1
 800c08c:	d102      	bne.n	800c094 <_fstat_r+0x1c>
 800c08e:	682b      	ldr	r3, [r5, #0]
 800c090:	b103      	cbz	r3, 800c094 <_fstat_r+0x1c>
 800c092:	6023      	str	r3, [r4, #0]
 800c094:	bd38      	pop	{r3, r4, r5, pc}
 800c096:	bf00      	nop
 800c098:	200005b8 	.word	0x200005b8

0800c09c <_isatty_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	2300      	movs	r3, #0
 800c0a0:	4d05      	ldr	r5, [pc, #20]	@ (800c0b8 <_isatty_r+0x1c>)
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	602b      	str	r3, [r5, #0]
 800c0a8:	f7f5 f91d 	bl	80012e6 <_isatty>
 800c0ac:	1c43      	adds	r3, r0, #1
 800c0ae:	d102      	bne.n	800c0b6 <_isatty_r+0x1a>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	b103      	cbz	r3, 800c0b6 <_isatty_r+0x1a>
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	bd38      	pop	{r3, r4, r5, pc}
 800c0b8:	200005b8 	.word	0x200005b8

0800c0bc <memchr>:
 800c0bc:	b2c9      	uxtb	r1, r1
 800c0be:	4603      	mov	r3, r0
 800c0c0:	4402      	add	r2, r0
 800c0c2:	b510      	push	{r4, lr}
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	d101      	bne.n	800c0ce <memchr+0x12>
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	e003      	b.n	800c0d6 <memchr+0x1a>
 800c0ce:	7804      	ldrb	r4, [r0, #0]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	428c      	cmp	r4, r1
 800c0d4:	d1f6      	bne.n	800c0c4 <memchr+0x8>
 800c0d6:	bd10      	pop	{r4, pc}

0800c0d8 <_init>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr

0800c0e4 <_fini>:
 800c0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e6:	bf00      	nop
 800c0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ea:	bc08      	pop	{r3}
 800c0ec:	469e      	mov	lr, r3
 800c0ee:	4770      	bx	lr
